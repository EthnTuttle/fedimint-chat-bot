#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateAddressAction {
    /// Determines the kind of action.
    #[prost(enumeration="UpdateAction", tag="1")]
    pub action: i32,
    /// The address used to apply the update action.
    #[prost(string, tag="2")]
    pub address: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateFeatureAction {
    /// Determines the kind of action.
    #[prost(enumeration="UpdateAction", tag="1")]
    pub action: i32,
    /// The feature bit used to apply the update action.
    #[prost(enumeration="super::lnrpc::FeatureBit", tag="2")]
    pub feature_bit: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NodeAnnouncementUpdateRequest {
    /// Set of changes for the features that the node supports.
    #[prost(message, repeated, tag="1")]
    pub feature_updates: ::prost::alloc::vec::Vec<UpdateFeatureAction>,
    /// Color is the node's color in hex code format.
    #[prost(string, tag="2")]
    pub color: ::prost::alloc::string::String,
    /// Alias or nick name of the node.
    #[prost(string, tag="3")]
    pub alias: ::prost::alloc::string::String,
    /// Set of changes for the node's known addresses.
    #[prost(message, repeated, tag="4")]
    pub address_updates: ::prost::alloc::vec::Vec<UpdateAddressAction>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NodeAnnouncementUpdateResponse {
    #[prost(message, repeated, tag="1")]
    pub ops: ::prost::alloc::vec::Vec<super::lnrpc::Op>,
}
/// UpdateAction is used to determine the kind of action we are referring to.
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum UpdateAction {
    /// ADD indicates this is an "insertion" kind of action.
    Add = 0,
    /// REMOVE indicates this is a "deletion" kind of action.
    Remove = 1,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum FeatureSet {
    ///
    ///SET_INIT identifies features that should be sent in an Init message to
    ///a remote peer.
    SetInit = 0,
    ///
    ///SET_LEGACY_GLOBAL identifies features that should be set in the legacy
    ///GlobalFeatures field of an Init message, which maintains backwards
    ///compatibility with nodes that haven't implemented flat features.
    SetLegacyGlobal = 1,
    ///
    ///SET_NODE_ANN identifies features that should be advertised on node
    ///announcements.
    SetNodeAnn = 2,
    ///
    ///SET_INVOICE identifies features that should be advertised on invoices
    ///generated by the daemon.
    SetInvoice = 3,
    ///
    ///SET_INVOICE_AMP identifies the features that should be advertised on
    ///AMP invoices generated by the daemon.
    SetInvoiceAmp = 4,
}
# [doc = r" Generated client implementations."] pub mod peers_client { # ! [allow (unused_variables , dead_code , missing_docs , clippy :: let_unit_value ,)] use tonic :: codegen :: * ; # [doc = " Peers is a service that can be used to get information and interact"] # [doc = " with the other nodes of the network."] # [derive (Debug , Clone)] pub struct PeersClient < T > { inner : tonic :: client :: Grpc < T > , } impl PeersClient < tonic :: transport :: Channel > { # [doc = r" Attempt to create a new client by connecting to a given endpoint."] pub async fn connect < D > (dst : D) -> Result < Self , tonic :: transport :: Error > where D : std :: convert :: TryInto < tonic :: transport :: Endpoint > , D :: Error : Into < StdError > , { let conn = tonic :: transport :: Endpoint :: new (dst) ? . connect () . await ? ; Ok (Self :: new (conn)) } } impl < T > PeersClient < T > where T : tonic :: client :: GrpcService < tonic :: body :: BoxBody > , T :: ResponseBody : Body + Send + Sync + 'static , T :: Error : Into < StdError > , < T :: ResponseBody as Body > :: Error : Into < StdError > + Send , { pub fn new (inner : T) -> Self { let inner = tonic :: client :: Grpc :: new (inner) ; Self { inner } } pub fn with_interceptor < F > (inner : T , interceptor : F) -> PeersClient < InterceptedService < T , F >> where F : tonic :: service :: Interceptor , T : tonic :: codegen :: Service < http :: Request < tonic :: body :: BoxBody > , Response = http :: Response << T as tonic :: client :: GrpcService < tonic :: body :: BoxBody >> :: ResponseBody > > , < T as tonic :: codegen :: Service < http :: Request < tonic :: body :: BoxBody >> > :: Error : Into < StdError > + Send + Sync , { PeersClient :: new (InterceptedService :: new (inner , interceptor)) } # [doc = r" Compress requests with `gzip`."] # [doc = r""] # [doc = r" This requires the server to support it otherwise it might respond with an"] # [doc = r" error."] pub fn send_gzip (mut self) -> Self { self . inner = self . inner . send_gzip () ; self } # [doc = r" Enable decompressing responses with `gzip`."] pub fn accept_gzip (mut self) -> Self { self . inner = self . inner . accept_gzip () ; self } # [doc = " lncli: peers updatenodeannouncement"] # [doc = "UpdateNodeAnnouncement allows the caller to update the node parameters"] # [doc = "and broadcasts a new version of the node announcement to its peers."] pub async fn update_node_announcement (& mut self , request : impl tonic :: IntoRequest < super :: NodeAnnouncementUpdateRequest > ,) -> Result < tonic :: Response < super :: NodeAnnouncementUpdateResponse > , tonic :: Status > { self . inner . ready () . await . map_err (| e | { tonic :: Status :: new (tonic :: Code :: Unknown , format ! ("Service was not ready: {}" , e . into ())) }) ? ; let codec = tonic :: codec :: ProstCodec :: default () ; let path = http :: uri :: PathAndQuery :: from_static ("/peersrpc.Peers/UpdateNodeAnnouncement") ; self . inner . unary (request . into_request () , path , codec) . await } } }