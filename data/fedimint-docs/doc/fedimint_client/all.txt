â˜°
logo [../static.files/rust-logo-151179464ae7ed46.svg]
../fedimint_client/index.html




logo [../static.files/rust-logo-151179464ae7ed46.svg]
../fedimint_client/index.html


CRATE FEDIMINT_CLIENT

 * Macros
 * Structs
 * Enums
 * Constants
 * Traits
 * Functions
 * Type Definitions

? [../help.html]
Change settings [../static.files/wheel-5ec35bf9ca753509.svg]../settings.html


LIST OF ALL ITEMS


STRUCTS

 * Client [struct.Client.html]
 * ClientBuilder [struct.ClientBuilder.html]
 * ClientModuleInstance [struct.ClientModuleInstance.html]
 * ClientSecret [struct.ClientSecret.html]
 * DynGlobalClientContext [struct.DynGlobalClientContext.html]
 * TransactionUpdates [struct.TransactionUpdates.html]
 * backup::ClientBackup [backup/struct.ClientBackup.html]
 * backup::EncryptedClientBackup [backup/struct.EncryptedClientBackup.html]
 * backup::Metadata [backup/struct.Metadata.html]
 * db::CachedApiVersionSet [db/struct.CachedApiVersionSet.html]
 * db::CachedApiVersionSetKey [db/struct.CachedApiVersionSetKey.html]
 * db::ChronologicalOperationLogKey [db/struct.ChronologicalOperationLogKey.html]
 * db::ChronologicalOperationLogKeyPrefix [db/struct.ChronologicalOperationLogKeyPrefix.html]
 * db::ClientSecretKey [db/struct.ClientSecretKey.html]
 * db::DbKeyPrefixIter [db/struct.DbKeyPrefixIter.html]
 * db::OperationLogKey [db/struct.OperationLogKey.html]
 * module::DynClientModule [module/struct.DynClientModule.html]
 * module::gen::DynClientModuleGen [module/gen/struct.DynClientModuleGen.html]
 * oplog::OperationLog [oplog/struct.OperationLog.html]
 * oplog::OperationLogEntry [oplog/struct.OperationLogEntry.html]
 * secret::PlainRootSecretStrategy [secret/struct.PlainRootSecretStrategy.html]
 * sm::ActiveState [sm/struct.ActiveState.html]
 * sm::ClientSMDatabaseTransaction [sm/struct.ClientSMDatabaseTransaction.html]
 * sm::DynContext [sm/struct.DynContext.html]
 * sm::DynState [sm/struct.DynState.html]
 * sm::Executor [sm/struct.Executor.html]
 * sm::ExecutorBuilder [sm/struct.ExecutorBuilder.html]
 * sm::InactiveState [sm/struct.InactiveState.html]
 * sm::ModuleNotifier [sm/struct.ModuleNotifier.html]
 * sm::Notifier [sm/struct.Notifier.html]
 * sm::OperationId [sm/struct.OperationId.html]
 * sm::OperationState [sm/struct.OperationState.html]
 * sm::StateTransition [sm/struct.StateTransition.html]
 * transaction::ClientInput [transaction/struct.ClientInput.html]
 * transaction::ClientOutput [transaction/struct.ClientOutput.html]
 * transaction::TransactionBuilder [transaction/struct.TransactionBuilder.html]
 * transaction::TxSubmissionContext [transaction/struct.TxSubmissionContext.html]


ENUMS

 * DatabaseSource [enum.DatabaseSource.html]
 * db::DbKeyPrefix [db/enum.DbKeyPrefix.html]
 * oplog::UpdateStreamOrOutcome [oplog/enum.UpdateStreamOrOutcome.html]
 * transaction::TxSubmissionError [transaction/enum.TxSubmissionError.html]
 * transaction::TxSubmissionStates [transaction/enum.TxSubmissionStates.html]


TRAITS

 * IGlobalClientContext [trait.IGlobalClientContext.html]
 * module::ClientModule [module/trait.ClientModule.html]
 * module::IClientModule [module/trait.IClientModule.html]
 * module::gen::ClientModuleGen [module/gen/trait.ClientModuleGen.html]
 * module::gen::IClientModuleGen [module/gen/trait.IClientModuleGen.html]
 * secret::DeriveableSecretClientExt [secret/trait.DeriveableSecretClientExt.html]
 * secret::RootSecretStrategy [secret/trait.RootSecretStrategy.html]
 * sm::Context [sm/trait.Context.html]
 * sm::GlobalContext [sm/trait.GlobalContext.html]
 * sm::IState [sm/trait.IState.html]
 * sm::State [sm/trait.State.html]
 * sm::util::MapStateTransitions [sm/util/trait.MapStateTransitions.html]


MACROS

 * sm_enum_variant_translation [macro.sm_enum_variant_translation.html]


FUNCTIONS

 * client_decoders [fn.client_decoders.html]
 * get_client_root_secret [fn.get_client_root_secret.html]
 * get_client_root_secret_encoding [fn.get_client_root_secret_encoding.html]
 * oplog::caching_operation_update_stream [oplog/fn.caching_operation_update_stream.html]
 * transaction::tx_submission_sm_decoder [transaction/fn.tx_submission_sm_decoder.html]


TYPE DEFINITIONS

 * InstancelessDynClientInput [type.InstancelessDynClientInput.html]
 * InstancelessDynClientOutput [type.InstancelessDynClientOutput.html]
 * ModuleGlobalContextGen [type.ModuleGlobalContextGen.html]
 * module::ClientModuleRegistry [module/type.ClientModuleRegistry.html]
 * module::StateGenerator [module/type.StateGenerator.html]
 * module::gen::ClientModuleGenRegistry [module/gen/type.ClientModuleGenRegistry.html]


CONSTANTS

 * transaction::LOG_TARGET [transaction/constant.LOG_TARGET.html]
 * transaction::TRANSACTION_SUBMISSION_MODULE_INSTANCE [transaction/constant.TRANSACTION_SUBMISSION_MODULE_INSTANCE.html]

