☰
logo [../../../static.files/rust-logo-151179464ae7ed46.svg]
../../../fedimint_client/index.html




logo [../../../static.files/rust-logo-151179464ae7ed46.svg]
../../../fedimint_client/index.html


CLIENTMODULEGEN


REQUIRED ASSOCIATED TYPES

 * Module


REQUIRED METHODS

 * init
 * supported_api_versions


IMPLEMENTORS


IN FEDIMINT_CLIENT::MODULE::GEN [index.html]

? [../../../help.html]
Change settings [../../../static.files/wheel-5ec35bf9ca753509.svg]../../../settings.html


TRAIT FEDIMINT_CLIENT [../../index.html]::MODULE [../index.html]::GEN [index.html]::CLIENTMODULEGENCopy item path
[../../../static.files/clipboard-7571035ce49a181d.svg]

source [../../../src/fedimint_client/module/gen.rs.html#22-41] · [−]

pub trait ClientModuleGen: ExtendsCommonModuleGen + Sizedhttps://doc.rust-lang.org/1.67.0/core/marker/trait.Sized.html {
    type Module: ClientModule../trait.ClientModule.html;

    fn supported_api_versions(&self) -> MultiApiVersion;
    fn init<'life0, 'async_trait>(
        &'life0 self,
        cfg: <<Self as ExtendsCommonModuleGen>::Common as CommonModuleGen>::ClientConfig,
        db: Database,
        api_version: ApiVersion,
        module_root_secret: DerivableSecret../../../fedimint_derive_secret/struct.DerivableSecret.html,
        notifier: ModuleNotifier../../sm/struct.ModuleNotifier.html<DynGlobalClientContext../../struct.DynGlobalClientContext.html, <Self::Moduletrait.ClientModuleGen.html#associatedtype.Module as ClientModule../trait.ClientModule.html>::States../trait.ClientModule.html#associatedtype.States>,
        api: DynGlobalApi,
        module_api: DynModuleApi
    ) -> Pinhttps://doc.rust-lang.org/1.67.0/core/pin/struct.Pin.html<Boxhttps://doc.rust-lang.org/1.67.0/alloc/boxed/struct.Box.html<dyn Futurehttps://doc.rust-lang.org/1.67.0/core/future/future/trait.Future.html<Output = Resulthttps://docs.rs/anyhow/1.0.71/anyhow/type.Result.html<Self::Moduletrait.ClientModuleGen.html#associatedtype.Module>> + Sendhttps://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html + 'async_trait>>
    where
        Self: 'async_trait,
        'life0: 'async_trait;
}


REQUIRED ASSOCIATED TYPES§

source [../../../src/fedimint_client/module/gen.rs.html#23]

TYPE MODULE: CLIENTMODULE [../trait.ClientModule.html]


REQUIRED METHODS§

source [../../../src/fedimint_client/module/gen.rs.html#27]

FN SUPPORTED_API_VERSIONS(&SELF) -> MULTIAPIVERSION

Api versions of the corresponding server side module’s API that this client module implementation can use.

source [../../../src/fedimint_client/module/gen.rs.html#31-40]

FN INIT<'LIFE0, 'ASYNC_TRAIT>(
    &'LIFE0 SELF,
    CFG: <<SELF AS EXTENDSCOMMONMODULEGEN>::COMMON AS COMMONMODULEGEN>::CLIENTCONFIG,
    DB: DATABASE,
    API_VERSION: APIVERSION,
    MODULE_ROOT_SECRET: DERIVABLESECRET [../../../fedimint_derive_secret/struct.DerivableSecret.html],
    NOTIFIER: MODULENOTIFIER [../../sm/struct.ModuleNotifier.html]<DYNGLOBALCLIENTCONTEXT
[../../struct.DynGlobalClientContext.html], <SELF::MODULE [trait.ClientModuleGen.html#associatedtype.Module] AS CLIENTMODULE
[../trait.ClientModule.html]>::STATES [../trait.ClientModule.html#associatedtype.States]>,
    API: DYNGLOBALAPI,
    MODULE_API: DYNMODULEAPI
) -> PIN [https://doc.rust-lang.org/1.67.0/core/pin/struct.Pin.html]<BOX
[https://doc.rust-lang.org/1.67.0/alloc/boxed/struct.Box.html]<DYN FUTURE
[https://doc.rust-lang.org/1.67.0/core/future/future/trait.Future.html]<OUTPUT = RESULT
[https://docs.rs/anyhow/1.0.71/anyhow/type.Result.html]<SELF::MODULE [trait.ClientModuleGen.html#associatedtype.Module]>> + SEND
[https://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html] + 'ASYNC_TRAIT>>WHERE
    SELF: 'ASYNC_TRAIT,
    'LIFE0: 'ASYNC_TRAIT,

Initialize a ClientModule [../trait.ClientModule.html] instance from its config


IMPLEMENTORS§


