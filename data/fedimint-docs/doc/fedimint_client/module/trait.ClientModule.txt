☰
logo [../../static.files/rust-logo-151179464ae7ed46.svg]
../../fedimint_client/index.html




logo [../../static.files/rust-logo-151179464ae7ed46.svg]
../../fedimint_client/index.html


CLIENTMODULE


REQUIRED ASSOCIATED TYPES

 * Common
 * ModuleStateMachineContext
 * States


REQUIRED METHODS

 * context
 * input_amount
 * output_amount


PROVIDED METHODS

 * await_primary_module_output
 * backup
 * create_exact_output
 * create_sufficient_input
 * decoder
 * get_balance
 * handle_cli_command
 * restore
 * subscribe_balance_changes
 * supports_backup
 * supports_being_primary
 * wipe


IMPLEMENTORS


IN FEDIMINT_CLIENT::MODULE [index.html]

? [../../help.html]
Change settings [../../static.files/wheel-5ec35bf9ca753509.svg]../../settings.html


TRAIT FEDIMINT_CLIENT [../index.html]::MODULE [index.html]::CLIENTMODULECopy item path
[../../static.files/clipboard-7571035ce49a181d.svg]

source [../../src/fedimint_client/module/mod.rs.html#28-186] · [−]

pub trait ClientModule: Debughttps://doc.rust-lang.org/1.67.0/core/fmt/trait.Debug.html + MaybeSend + MaybeSync + 'static {
    type Common: ModuleCommon;
    type ModuleStateMachineContext: Context../sm/trait.Context.html;
    type States: State../sm/trait.State.html<GlobalContext = DynGlobalClientContext../struct.DynGlobalClientContext.html, ModuleContext = Self::ModuleStateMachineContexttrait.ClientModule.html#associatedtype.ModuleStateMachineContext> + IntoDynInstance<DynType = DynState../sm/struct.DynState.html<DynGlobalClientContext../struct.DynGlobalClientContext.html>>;

Show 15 methods    fn context(&self) -> Self::ModuleStateMachineContexttrait.ClientModule.html#associatedtype.ModuleStateMachineContext;
    fn input_amount(
        &self,
        input: &<Self::Commontrait.ClientModule.html#associatedtype.Common as ModuleCommon>::Input
    ) -> TransactionItemAmount;
    fn output_amount(
        &self,
        output: &<Self::Commontrait.ClientModule.html#associatedtype.Common as ModuleCommon>::Output
    ) -> TransactionItemAmount;

    fn decoder() -> Decoder { ... }
    fn handle_cli_command<'life0, 'life1, 'life2, 'async_trait>(
        &'life0 self,
        _client: &'life1 Client../struct.Client.html,
        _args: &'life2 [OsStringhttps://doc.rust-lang.org/1.67.0/std/ffi/os_str/struct.OsString.html]
    ) -> Pinhttps://doc.rust-lang.org/1.67.0/core/pin/struct.Pin.html<Boxhttps://doc.rust-lang.org/1.67.0/alloc/boxed/struct.Box.html<dyn Futurehttps://doc.rust-lang.org/1.67.0/core/future/future/trait.Future.html<Output = Resulthttps://docs.rs/anyhow/1.0.71/anyhow/type.Result.html<Valuehttps://docs.rs/serde_json/1.0.96/serde_json/value/enum.Value.html>> + Sendhttps://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html + 'async_trait>>
    where
        Self: Synchttps://doc.rust-lang.org/1.67.0/core/marker/trait.Sync.html + 'async_trait,
        'life0: 'async_trait,
        'life1: 'async_trait,
        'life2: 'async_trait,
    { ... }
    fn supports_backup(&self) -> boolhttps://doc.rust-lang.org/1.67.0/std/primitive.bool.html { ... }
    fn backup<'life0, 'life1, 'life2, 'async_trait>(
        &'life0 self,
        _dbtx: &'life1 mut ModuleDatabaseTransaction<'life2>,
        _executor: Executor../sm/struct.Executor.html<DynGlobalClientContext../struct.DynGlobalClientContext.html>,
        _api: DynGlobalApi,
        _module_instance_id: ModuleInstanceId
    ) -> Pinhttps://doc.rust-lang.org/1.67.0/core/pin/struct.Pin.html<Boxhttps://doc.rust-lang.org/1.67.0/alloc/boxed/struct.Box.html<dyn Futurehttps://doc.rust-lang.org/1.67.0/core/future/future/trait.Future.html<Output = Resulthttps://docs.rs/anyhow/1.0.71/anyhow/type.Result.html<Vechttps://doc.rust-lang.org/1.67.0/alloc/vec/struct.Vec.html<u8https://doc.rust-lang.org/1.67.0/std/primitive.u8.html>>> + Sendhttps://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html + 'async_trait>>
    where
        Self: Synchttps://doc.rust-lang.org/1.67.0/core/marker/trait.Sync.html + 'async_trait,
        'life0: 'async_trait,
        'life1: 'async_trait,
        'life2: 'async_trait,
    { ... }
    fn restore<'life0, 'life1, 'life2, 'life3, 'async_trait>(
        &'life0 self,
        _dbtx: &'life1 mut DatabaseTransaction<'life2>,
        _module_instance_id: ModuleInstanceId,
        _executor: Executor../sm/struct.Executor.html<DynGlobalClientContext../struct.DynGlobalClientContext.html>,
        _api: DynGlobalApi,
        _snapshot: Optionhttps://doc.rust-lang.org/1.67.0/core/option/enum.Option.html<&'life3 [u8https://doc.rust-lang.org/1.67.0/std/primitive.u8.html]>
    ) -> Pinhttps://doc.rust-lang.org/1.67.0/core/pin/struct.Pin.html<Boxhttps://doc.rust-lang.org/1.67.0/alloc/boxed/struct.Box.html<dyn Futurehttps://doc.rust-lang.org/1.67.0/core/future/future/trait.Future.html<Output = Resulthttps://docs.rs/anyhow/1.0.71/anyhow/type.Result.html<()https://doc.rust-lang.org/1.67.0/std/primitive.unit.html>> + Sendhttps://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html + 'async_trait>>
    where
        Self: Synchttps://doc.rust-lang.org/1.67.0/core/marker/trait.Sync.html + 'async_trait,
        'life0: 'async_trait,
        'life1: 'async_trait,
        'life2: 'async_trait,
        'life3: 'async_trait,
    { ... }
    fn wipe<'life0, 'life1, 'life2, 'async_trait>(
        &'life0 self,
        _dbtx: &'life1 mut ModuleDatabaseTransaction<'life2>,
        _module_instance_id: ModuleInstanceId,
        _executor: Executor../sm/struct.Executor.html<DynGlobalClientContext../struct.DynGlobalClientContext.html>
    ) -> Pinhttps://doc.rust-lang.org/1.67.0/core/pin/struct.Pin.html<Boxhttps://doc.rust-lang.org/1.67.0/alloc/boxed/struct.Box.html<dyn Futurehttps://doc.rust-lang.org/1.67.0/core/future/future/trait.Future.html<Output = Resulthttps://docs.rs/anyhow/1.0.71/anyhow/type.Result.html<()https://doc.rust-lang.org/1.67.0/std/primitive.unit.html>> + Sendhttps://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html + 'async_trait>>
    where
        Self: Synchttps://doc.rust-lang.org/1.67.0/core/marker/trait.Sync.html + 'async_trait,
        'life0: 'async_trait,
        'life1: 'async_trait,
        'life2: 'async_trait,
    { ... }
    fn supports_being_primary(&self) -> boolhttps://doc.rust-lang.org/1.67.0/std/primitive.bool.html { ... }
    fn create_sufficient_input<'life0, 'life1, 'life2, 'async_trait>(
        &'life0 self,
        _dbtx: &'life1 mut ModuleDatabaseTransaction<'life2>,
        _operation_id: OperationId../sm/struct.OperationId.html,
        _min_amount: Amount
    ) -> Pinhttps://doc.rust-lang.org/1.67.0/core/pin/struct.Pin.html<Boxhttps://doc.rust-lang.org/1.67.0/alloc/boxed/struct.Box.html<dyn Futurehttps://doc.rust-lang.org/1.67.0/core/future/future/trait.Future.html<Output = Resulthttps://docs.rs/anyhow/1.0.71/anyhow/type.Result.html<ClientInput../transaction/struct.ClientInput.html<<Self::Commontrait.ClientModule.html#associatedtype.Common as ModuleCommon>::Input, Self::Statestrait.ClientModule.html#associatedtype.States>>> + Sendhttps://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html + 'async_trait>>
    where
        Self: Synchttps://doc.rust-lang.org/1.67.0/core/marker/trait.Sync.html + 'async_trait,
        'life0: 'async_trait,
        'life1: 'async_trait,
        'life2: 'async_trait,
    { ... }
    fn create_exact_output<'life0, 'life1, 'life2, 'async_trait>(
        &'life0 self,
        _dbtx: &'life1 mut ModuleDatabaseTransaction<'life2>,
        _operation_id: OperationId../sm/struct.OperationId.html,
        _amount: Amount
    ) -> Pinhttps://doc.rust-lang.org/1.67.0/core/pin/struct.Pin.html<Boxhttps://doc.rust-lang.org/1.67.0/alloc/boxed/struct.Box.html<dyn Futurehttps://doc.rust-lang.org/1.67.0/core/future/future/trait.Future.html<Output = ClientOutput../transaction/struct.ClientOutput.html<<Self::Commontrait.ClientModule.html#associatedtype.Common as ModuleCommon>::Output, Self::Statestrait.ClientModule.html#associatedtype.States>> + Sendhttps://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html + 'async_trait>>
    where
        Self: Synchttps://doc.rust-lang.org/1.67.0/core/marker/trait.Sync.html + 'async_trait,
        'life0: 'async_trait,
        'life1: 'async_trait,
        'life2: 'async_trait,
    { ... }
    fn await_primary_module_output<'life0, 'async_trait>(
        &'life0 self,
        _operation_id: OperationId../sm/struct.OperationId.html,
        _out_point: OutPoint
    ) -> Pinhttps://doc.rust-lang.org/1.67.0/core/pin/struct.Pin.html<Boxhttps://doc.rust-lang.org/1.67.0/alloc/boxed/struct.Box.html<dyn Futurehttps://doc.rust-lang.org/1.67.0/core/future/future/trait.Future.html<Output = Resulthttps://docs.rs/anyhow/1.0.71/anyhow/type.Result.html<Amount>> + Sendhttps://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html + 'async_trait>>
    where
        Self: Synchttps://doc.rust-lang.org/1.67.0/core/marker/trait.Sync.html + 'async_trait,
        'life0: 'async_trait,
    { ... }
    fn get_balance<'life0, 'life1, 'life2, 'async_trait>(
        &'life0 self,
        _dbtx: &'life1 mut ModuleDatabaseTransaction<'life2>
    ) -> Pinhttps://doc.rust-lang.org/1.67.0/core/pin/struct.Pin.html<Boxhttps://doc.rust-lang.org/1.67.0/alloc/boxed/struct.Box.html<dyn Futurehttps://doc.rust-lang.org/1.67.0/core/future/future/trait.Future.html<Output = Amount> + Sendhttps://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html + 'async_trait>>
    where
        Self: Synchttps://doc.rust-lang.org/1.67.0/core/marker/trait.Sync.html + 'async_trait,
        'life0: 'async_trait,
        'life1: 'async_trait,
        'life2: 'async_trait,
    { ... }
    fn subscribe_balance_changes<'life0, 'async_trait>(
        &'life0 self
    ) -> Pinhttps://doc.rust-lang.org/1.67.0/core/pin/struct.Pin.html<Boxhttps://doc.rust-lang.org/1.67.0/alloc/boxed/struct.Box.html<dyn Futurehttps://doc.rust-lang.org/1.67.0/core/future/future/trait.Future.html<Output = BoxStream<'static, ()https://doc.rust-lang.org/1.67.0/std/primitive.unit.html>> + Sendhttps://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html + 'async_trait>>
    where
        Self: Synchttps://doc.rust-lang.org/1.67.0/core/marker/trait.Sync.html + 'async_trait,
        'life0: 'async_trait,
    { ... }
}

Expand description

Fedimint module client


REQUIRED ASSOCIATED TYPES§

source [../../src/fedimint_client/module/mod.rs.html#30]

TYPE COMMON: MODULECOMMON

Common module types shared between client and server

source [../../src/fedimint_client/module/mod.rs.html#34]

TYPE MODULESTATEMACHINECONTEXT: CONTEXT [../sm/trait.Context.html]

Data and API clients available to state machine transitions of this module

source [../../src/fedimint_client/module/mod.rs.html#37-40]

TYPE STATES: STATE [../sm/trait.State.html]<GLOBALCONTEXT = DYNGLOBALCLIENTCONTEXT [../struct.DynGlobalClientContext.html],
MODULECONTEXT = SELF::MODULESTATEMACHINECONTEXT [trait.ClientModule.html#associatedtype.ModuleStateMachineContext]> +
INTODYNINSTANCE<DYNTYPE = DYNSTATE [../sm/struct.DynState.html]<DYNGLOBALCLIENTCONTEXT [../struct.DynGlobalClientContext.html]>>

All possible states this client can submit to the executor


REQUIRED METHODS§

source [../../src/fedimint_client/module/mod.rs.html#48]

FN CONTEXT(&SELF) -> SELF::MODULESTATEMACHINECONTEXT [trait.ClientModule.html#associatedtype.ModuleStateMachineContext]

source [../../src/fedimint_client/module/mod.rs.html#62]

FN INPUT_AMOUNT(
    &SELF,
    INPUT: &<SELF::COMMON [trait.ClientModule.html#associatedtype.Common] AS MODULECOMMON>::INPUT
) -> TRANSACTIONITEMAMOUNT

Returns the amount represented by the input and the fee its processing requires

source [../../src/fedimint_client/module/mod.rs.html#66-69]

FN OUTPUT_AMOUNT(
    &SELF,
    OUTPUT: &<SELF::COMMON [trait.ClientModule.html#associatedtype.Common] AS MODULECOMMON>::OUTPUT
) -> TRANSACTIONITEMAMOUNT

Returns the amount represented by the output and the fee its processing requires


PROVIDED METHODS§

source [../../src/fedimint_client/module/mod.rs.html#42-46]

FN DECODER() -> DECODER

source [../../src/fedimint_client/module/mod.rs.html#50-58]

FN HANDLE_CLI_COMMAND<'LIFE0, 'LIFE1, 'LIFE2, 'ASYNC_TRAIT>(
    &'LIFE0 SELF,
    _CLIENT: &'LIFE1 CLIENT [../struct.Client.html],
    _ARGS: &'LIFE2 [OSSTRING [https://doc.rust-lang.org/1.67.0/std/ffi/os_str/struct.OsString.html]]
) -> PIN [https://doc.rust-lang.org/1.67.0/core/pin/struct.Pin.html]<BOX
[https://doc.rust-lang.org/1.67.0/alloc/boxed/struct.Box.html]<DYN FUTURE
[https://doc.rust-lang.org/1.67.0/core/future/future/trait.Future.html]<OUTPUT = RESULT
[https://docs.rs/anyhow/1.0.71/anyhow/type.Result.html]<VALUE
[https://docs.rs/serde_json/1.0.96/serde_json/value/enum.Value.html]>> + SEND
[https://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html] + 'ASYNC_TRAIT>>WHERE
    SELF: SYNC [https://doc.rust-lang.org/1.67.0/core/marker/trait.Sync.html] + 'ASYNC_TRAIT,
    'LIFE0: 'ASYNC_TRAIT,
    'LIFE1: 'ASYNC_TRAIT,
    'LIFE2: 'ASYNC_TRAIT,

source [../../src/fedimint_client/module/mod.rs.html#71-73]

FN SUPPORTS_BACKUP(&SELF) -> BOOL [https://doc.rust-lang.org/1.67.0/std/primitive.bool.html]

source [../../src/fedimint_client/module/mod.rs.html#75-83]

FN BACKUP<'LIFE0, 'LIFE1, 'LIFE2, 'ASYNC_TRAIT>(
    &'LIFE0 SELF,
    _DBTX: &'LIFE1 MUT MODULEDATABASETRANSACTION<'LIFE2>,
    _EXECUTOR: EXECUTOR [../sm/struct.Executor.html]<DYNGLOBALCLIENTCONTEXT [../struct.DynGlobalClientContext.html]>,
    _API: DYNGLOBALAPI,
    _MODULE_INSTANCE_ID: MODULEINSTANCEID
) -> PIN [https://doc.rust-lang.org/1.67.0/core/pin/struct.Pin.html]<BOX
[https://doc.rust-lang.org/1.67.0/alloc/boxed/struct.Box.html]<DYN FUTURE
[https://doc.rust-lang.org/1.67.0/core/future/future/trait.Future.html]<OUTPUT = RESULT
[https://docs.rs/anyhow/1.0.71/anyhow/type.Result.html]<VEC [https://doc.rust-lang.org/1.67.0/alloc/vec/struct.Vec.html]<U8
[https://doc.rust-lang.org/1.67.0/std/primitive.u8.html]>>> + SEND [https://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html]
+ 'ASYNC_TRAIT>>WHERE
    SELF: SYNC [https://doc.rust-lang.org/1.67.0/core/marker/trait.Sync.html] + 'ASYNC_TRAIT,
    'LIFE0: 'ASYNC_TRAIT,
    'LIFE1: 'ASYNC_TRAIT,
    'LIFE2: 'ASYNC_TRAIT,

source [../../src/fedimint_client/module/mod.rs.html#85-95]

FN RESTORE<'LIFE0, 'LIFE1, 'LIFE2, 'LIFE3, 'ASYNC_TRAIT>(
    &'LIFE0 SELF,
    _DBTX: &'LIFE1 MUT DATABASETRANSACTION<'LIFE2>,
    _MODULE_INSTANCE_ID: MODULEINSTANCEID,
    _EXECUTOR: EXECUTOR [../sm/struct.Executor.html]<DYNGLOBALCLIENTCONTEXT [../struct.DynGlobalClientContext.html]>,
    _API: DYNGLOBALAPI,
    _SNAPSHOT: OPTION [https://doc.rust-lang.org/1.67.0/core/option/enum.Option.html]<&'LIFE3 [U8
[https://doc.rust-lang.org/1.67.0/std/primitive.u8.html]]>
) -> PIN [https://doc.rust-lang.org/1.67.0/core/pin/struct.Pin.html]<BOX
[https://doc.rust-lang.org/1.67.0/alloc/boxed/struct.Box.html]<DYN FUTURE
[https://doc.rust-lang.org/1.67.0/core/future/future/trait.Future.html]<OUTPUT = RESULT
[https://docs.rs/anyhow/1.0.71/anyhow/type.Result.html]<() [https://doc.rust-lang.org/1.67.0/std/primitive.unit.html]>> + SEND
[https://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html] + 'ASYNC_TRAIT>>WHERE
    SELF: SYNC [https://doc.rust-lang.org/1.67.0/core/marker/trait.Sync.html] + 'ASYNC_TRAIT,
    'LIFE0: 'ASYNC_TRAIT,
    'LIFE1: 'ASYNC_TRAIT,
    'LIFE2: 'ASYNC_TRAIT,
    'LIFE3: 'ASYNC_TRAIT,

source [../../src/fedimint_client/module/mod.rs.html#97-104]

FN WIPE<'LIFE0, 'LIFE1, 'LIFE2, 'ASYNC_TRAIT>(
    &'LIFE0 SELF,
    _DBTX: &'LIFE1 MUT MODULEDATABASETRANSACTION<'LIFE2>,
    _MODULE_INSTANCE_ID: MODULEINSTANCEID,
    _EXECUTOR: EXECUTOR [../sm/struct.Executor.html]<DYNGLOBALCLIENTCONTEXT [../struct.DynGlobalClientContext.html]>
) -> PIN [https://doc.rust-lang.org/1.67.0/core/pin/struct.Pin.html]<BOX
[https://doc.rust-lang.org/1.67.0/alloc/boxed/struct.Box.html]<DYN FUTURE
[https://doc.rust-lang.org/1.67.0/core/future/future/trait.Future.html]<OUTPUT = RESULT
[https://docs.rs/anyhow/1.0.71/anyhow/type.Result.html]<() [https://doc.rust-lang.org/1.67.0/std/primitive.unit.html]>> + SEND
[https://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html] + 'ASYNC_TRAIT>>WHERE
    SELF: SYNC [https://doc.rust-lang.org/1.67.0/core/marker/trait.Sync.html] + 'ASYNC_TRAIT,
    'LIFE0: 'ASYNC_TRAIT,
    'LIFE1: 'ASYNC_TRAIT,
    'LIFE2: 'ASYNC_TRAIT,

source [../../src/fedimint_client/module/mod.rs.html#115-117]

FN SUPPORTS_BEING_PRIMARY(&SELF) -> BOOL [https://doc.rust-lang.org/1.67.0/std/primitive.bool.html]

Does this module support being a primary module

If it does it must implement:

 * Self::create_sufficient_input [trait.ClientModule.html#method.create_sufficient_input]
 * Self::create_exact_output [trait.ClientModule.html#method.create_exact_output]
 * Self::await_primary_module_output [trait.ClientModule.html#method.await_primary_module_output]
 * Self::get_balance [trait.ClientModule.html#method.get_balance]
 * Self::subscribe_balance_changes [trait.ClientModule.html#method.subscribe_balance_changes]

source [../../src/fedimint_client/module/mod.rs.html#136-143]

FN CREATE_SUFFICIENT_INPUT<'LIFE0, 'LIFE1, 'LIFE2, 'ASYNC_TRAIT>(
    &'LIFE0 SELF,
    _DBTX: &'LIFE1 MUT MODULEDATABASETRANSACTION<'LIFE2>,
    _OPERATION_ID: OPERATIONID [../sm/struct.OperationId.html],
    _MIN_AMOUNT: AMOUNT
) -> PIN [https://doc.rust-lang.org/1.67.0/core/pin/struct.Pin.html]<BOX
[https://doc.rust-lang.org/1.67.0/alloc/boxed/struct.Box.html]<DYN FUTURE
[https://doc.rust-lang.org/1.67.0/core/future/future/trait.Future.html]<OUTPUT = RESULT
[https://docs.rs/anyhow/1.0.71/anyhow/type.Result.html]<CLIENTINPUT [../transaction/struct.ClientInput.html]<<SELF::COMMON
[trait.ClientModule.html#associatedtype.Common] AS MODULECOMMON>::INPUT, SELF::STATES
[trait.ClientModule.html#associatedtype.States]>>> + SEND [https://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html] +
'ASYNC_TRAIT>>WHERE
    SELF: SYNC [https://doc.rust-lang.org/1.67.0/core/marker/trait.Sync.html] + 'ASYNC_TRAIT,
    'LIFE0: 'ASYNC_TRAIT,
    'LIFE1: 'ASYNC_TRAIT,
    'LIFE2: 'ASYNC_TRAIT,

Creates an input of at least a given min_amount from the holdings managed by the module.

If successful it returns:

 * A set of private keys belonging to the input for signing the transaction
 * The input of at least min_amount, the actual amount might be larger, the caller has to handle this case and possibly generate
   change using create_change_output.
 * A closure that generates states belonging to the input. This closure takes the transaction id of the transaction in which the
   input was used and the input index as input since these cannot be known at time of calling create_funding_input and have to be
   injected later.

The function returns an error if the client’s funds are not sufficient to create the requested input.

source [../../src/fedimint_client/module/mod.rs.html#154-161]

FN CREATE_EXACT_OUTPUT<'LIFE0, 'LIFE1, 'LIFE2, 'ASYNC_TRAIT>(
    &'LIFE0 SELF,
    _DBTX: &'LIFE1 MUT MODULEDATABASETRANSACTION<'LIFE2>,
    _OPERATION_ID: OPERATIONID [../sm/struct.OperationId.html],
    _AMOUNT: AMOUNT
) -> PIN [https://doc.rust-lang.org/1.67.0/core/pin/struct.Pin.html]<BOX
[https://doc.rust-lang.org/1.67.0/alloc/boxed/struct.Box.html]<DYN FUTURE
[https://doc.rust-lang.org/1.67.0/core/future/future/trait.Future.html]<OUTPUT = CLIENTOUTPUT
[../transaction/struct.ClientOutput.html]<<SELF::COMMON [trait.ClientModule.html#associatedtype.Common] AS MODULECOMMON>::OUTPUT,
SELF::STATES [trait.ClientModule.html#associatedtype.States]>> + SEND
[https://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html] + 'ASYNC_TRAIT>>WHERE
    SELF: SYNC [https://doc.rust-lang.org/1.67.0/core/marker/trait.Sync.html] + 'ASYNC_TRAIT,
    'LIFE0: 'ASYNC_TRAIT,
    'LIFE1: 'ASYNC_TRAIT,
    'LIFE2: 'ASYNC_TRAIT,

Creates an output of exactly amount that will pay into the holdings managed by the module.

It returns:

 * The output of exactly amount.
 * A closure that generates states belonging to the output. This closure takes the transaction id of the transaction in which the
   output was used and the output index as input since these cannot be known at time of calling create_change_output and have to
   be injected later.

source [../../src/fedimint_client/module/mod.rs.html#167-173]

FN AWAIT_PRIMARY_MODULE_OUTPUT<'LIFE0, 'ASYNC_TRAIT>(
    &'LIFE0 SELF,
    _OPERATION_ID: OPERATIONID [../sm/struct.OperationId.html],
    _OUT_POINT: OUTPOINT
) -> PIN [https://doc.rust-lang.org/1.67.0/core/pin/struct.Pin.html]<BOX
[https://doc.rust-lang.org/1.67.0/alloc/boxed/struct.Box.html]<DYN FUTURE
[https://doc.rust-lang.org/1.67.0/core/future/future/trait.Future.html]<OUTPUT = RESULT
[https://docs.rs/anyhow/1.0.71/anyhow/type.Result.html]<AMOUNT>> + SEND
[https://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html] + 'ASYNC_TRAIT>>WHERE
    SELF: SYNC [https://doc.rust-lang.org/1.67.0/core/marker/trait.Sync.html] + 'ASYNC_TRAIT,
    'LIFE0: 'ASYNC_TRAIT,

Waits for the funds from an output created by Self::create_exact_output [trait.ClientModule.html#method.create_exact_output] to
become available. This function returning typically implies a change in the output of Self::get_balance
[trait.ClientModule.html#method.get_balance].

source [../../src/fedimint_client/module/mod.rs.html#177-179]

FN GET_BALANCE<'LIFE0, 'LIFE1, 'LIFE2, 'ASYNC_TRAIT>(
    &'LIFE0 SELF,
    _DBTX: &'LIFE1 MUT MODULEDATABASETRANSACTION<'LIFE2>
) -> PIN [https://doc.rust-lang.org/1.67.0/core/pin/struct.Pin.html]<BOX
[https://doc.rust-lang.org/1.67.0/alloc/boxed/struct.Box.html]<DYN FUTURE
[https://doc.rust-lang.org/1.67.0/core/future/future/trait.Future.html]<OUTPUT = AMOUNT> + SEND
[https://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html] + 'ASYNC_TRAIT>>WHERE
    SELF: SYNC [https://doc.rust-lang.org/1.67.0/core/marker/trait.Sync.html] + 'ASYNC_TRAIT,
    'LIFE0: 'ASYNC_TRAIT,
    'LIFE1: 'ASYNC_TRAIT,
    'LIFE2: 'ASYNC_TRAIT,

Returns the balance held by this module and available for funding transactions.

source [../../src/fedimint_client/module/mod.rs.html#183-185]

FN SUBSCRIBE_BALANCE_CHANGES<'LIFE0, 'ASYNC_TRAIT>(
    &'LIFE0 SELF
) -> PIN [https://doc.rust-lang.org/1.67.0/core/pin/struct.Pin.html]<BOX
[https://doc.rust-lang.org/1.67.0/alloc/boxed/struct.Box.html]<DYN FUTURE
[https://doc.rust-lang.org/1.67.0/core/future/future/trait.Future.html]<OUTPUT = BOXSTREAM<'STATIC, ()
[https://doc.rust-lang.org/1.67.0/std/primitive.unit.html]>> + SEND [https://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html]
+ 'ASYNC_TRAIT>>WHERE
    SELF: SYNC [https://doc.rust-lang.org/1.67.0/core/marker/trait.Sync.html] + 'ASYNC_TRAIT,
    'LIFE0: 'ASYNC_TRAIT,

Returns a stream that will output the updated module balance each time it changes.


IMPLEMENTORS§


