☰
logo [../../static.files/rust-logo-151179464ae7ed46.svg]
../../fedimint_client/index.html




logo [../../static.files/rust-logo-151179464ae7ed46.svg]
../../fedimint_client/index.html


ICLIENTMODULE


REQUIRED METHODS

 * as_any
 * await_primary_module_output
 * backup
 * context
 * create_exact_output
 * create_sufficient_input
 * decoder
 * get_balance
 * handle_cli_command
 * input_amount
 * output_amount
 * restore
 * subscribe_balance_changes
 * supports_backup
 * supports_being_primary
 * wipe


TRAIT IMPLEMENTATIONS

 * AsRef<dyn IClientModule + Send + Sync + 'static>


IMPLEMENTORS


IN FEDIMINT_CLIENT::MODULE [index.html]

? [../../help.html]
Change settings [../../static.files/wheel-5ec35bf9ca753509.svg]../../settings.html


TRAIT FEDIMINT_CLIENT [../index.html]::MODULE [index.html]::ICLIENTMODULECopy item path
[../../static.files/clipboard-7571035ce49a181d.svg]

source [../../src/fedimint_client/module/mod.rs.html#190-265] · [−]

pub trait IClientModule: Debughttps://doc.rust-lang.org/1.67.0/core/fmt/trait.Debug.html {
Show 16 methods    fn as_any(&self) -> &(dyn Anyhttps://doc.rust-lang.org/1.67.0/core/any/trait.Any.html + Sendhttps://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html + Synchttps://doc.rust-lang.org/1.67.0/core/marker/trait.Sync.html);
    fn decoder(&self) -> Decoder;
    fn context(&self, instance: ModuleInstanceId) -> DynContext../sm/struct.DynContext.html;
    fn handle_cli_command<'life0, 'life1, 'life2, 'async_trait>(
        &'life0 self,
        client: &'life1 Client../struct.Client.html,
        args: &'life2 [OsStringhttps://doc.rust-lang.org/1.67.0/std/ffi/os_str/struct.OsString.html]
    ) -> Pinhttps://doc.rust-lang.org/1.67.0/core/pin/struct.Pin.html<Boxhttps://doc.rust-lang.org/1.67.0/alloc/boxed/struct.Box.html<dyn Futurehttps://doc.rust-lang.org/1.67.0/core/future/future/trait.Future.html<Output = Resulthttps://docs.rs/anyhow/1.0.71/anyhow/type.Result.html<Valuehttps://docs.rs/serde_json/1.0.96/serde_json/value/enum.Value.html>> + Sendhttps://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html + 'async_trait>>
    where
        Self: 'async_trait,
        'life0: 'async_trait,
        'life1: 'async_trait,
        'life2: 'async_trait;
    fn input_amount(&self, input: &DynInput) -> TransactionItemAmount;
    fn output_amount(&self, output: &DynOutput) -> TransactionItemAmount;
    fn supports_backup(&self) -> boolhttps://doc.rust-lang.org/1.67.0/std/primitive.bool.html;
    fn backup<'life0, 'life1, 'life2, 'async_trait>(
        &'life0 self,
        dbtx: &'life1 mut ModuleDatabaseTransaction<'life2>,
        executor: Executor../sm/struct.Executor.html<DynGlobalClientContext../struct.DynGlobalClientContext.html>,
        api: DynGlobalApi,
        module_instance_id: ModuleInstanceId
    ) -> Pinhttps://doc.rust-lang.org/1.67.0/core/pin/struct.Pin.html<Boxhttps://doc.rust-lang.org/1.67.0/alloc/boxed/struct.Box.html<dyn Futurehttps://doc.rust-lang.org/1.67.0/core/future/future/trait.Future.html<Output = Resulthttps://docs.rs/anyhow/1.0.71/anyhow/type.Result.html<Vechttps://doc.rust-lang.org/1.67.0/alloc/vec/struct.Vec.html<u8https://doc.rust-lang.org/1.67.0/std/primitive.u8.html>>> + Sendhttps://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html + 'async_trait>>
    where
        Self: 'async_trait,
        'life0: 'async_trait,
        'life1: 'async_trait,
        'life2: 'async_trait;
    fn restore<'life0, 'life1, 'life2, 'life3, 'async_trait>(
        &'life0 self,
        dbtx: &'life1 mut DatabaseTransaction<'life2>,
        module_instance_id: ModuleInstanceId,
        executor: Executor../sm/struct.Executor.html<DynGlobalClientContext../struct.DynGlobalClientContext.html>,
        api: DynGlobalApi,
        snapshot: Optionhttps://doc.rust-lang.org/1.67.0/core/option/enum.Option.html<&'life3 [u8https://doc.rust-lang.org/1.67.0/std/primitive.u8.html]>
    ) -> Pinhttps://doc.rust-lang.org/1.67.0/core/pin/struct.Pin.html<Boxhttps://doc.rust-lang.org/1.67.0/alloc/boxed/struct.Box.html<dyn Futurehttps://doc.rust-lang.org/1.67.0/core/future/future/trait.Future.html<Output = Resulthttps://docs.rs/anyhow/1.0.71/anyhow/type.Result.html<()https://doc.rust-lang.org/1.67.0/std/primitive.unit.html>> + Sendhttps://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html + 'async_trait>>
    where
        Self: 'async_trait,
        'life0: 'async_trait,
        'life1: 'async_trait,
        'life2: 'async_trait,
        'life3: 'async_trait;
    fn wipe<'life0, 'life1, 'life2, 'async_trait>(
        &'life0 self,
        dbtx: &'life1 mut ModuleDatabaseTransaction<'life2>,
        module_instance_id: ModuleInstanceId,
        executor: Executor../sm/struct.Executor.html<DynGlobalClientContext../struct.DynGlobalClientContext.html>
    ) -> Pinhttps://doc.rust-lang.org/1.67.0/core/pin/struct.Pin.html<Boxhttps://doc.rust-lang.org/1.67.0/alloc/boxed/struct.Box.html<dyn Futurehttps://doc.rust-lang.org/1.67.0/core/future/future/trait.Future.html<Output = Resulthttps://docs.rs/anyhow/1.0.71/anyhow/type.Result.html<()https://doc.rust-lang.org/1.67.0/std/primitive.unit.html>> + Sendhttps://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html + 'async_trait>>
    where
        Self: 'async_trait,
        'life0: 'async_trait,
        'life1: 'async_trait,
        'life2: 'async_trait;
    fn supports_being_primary(&self) -> boolhttps://doc.rust-lang.org/1.67.0/std/primitive.bool.html;
    fn create_sufficient_input<'life0, 'life1, 'life2, 'async_trait>(
        &'life0 self,
        module_instance: ModuleInstanceId,
        dbtx: &'life1 mut DatabaseTransaction<'life2>,
        operation_id: OperationId../sm/struct.OperationId.html,
        min_amount: Amount
    ) -> Pinhttps://doc.rust-lang.org/1.67.0/core/pin/struct.Pin.html<Boxhttps://doc.rust-lang.org/1.67.0/alloc/boxed/struct.Box.html<dyn Futurehttps://doc.rust-lang.org/1.67.0/core/future/future/trait.Future.html<Output = Resulthttps://docs.rs/anyhow/1.0.71/anyhow/type.Result.html<ClientInput../transaction/struct.ClientInput.html>> + Sendhttps://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html + 'async_trait>>
    where
        Self: 'async_trait,
        'life0: 'async_trait,
        'life1: 'async_trait,
        'life2: 'async_trait;
    fn create_exact_output<'life0, 'life1, 'life2, 'async_trait>(
        &'life0 self,
        module_instance: ModuleInstanceId,
        dbtx: &'life1 mut DatabaseTransaction<'life2>,
        operation_id: OperationId../sm/struct.OperationId.html,
        amount: Amount
    ) -> Pinhttps://doc.rust-lang.org/1.67.0/core/pin/struct.Pin.html<Boxhttps://doc.rust-lang.org/1.67.0/alloc/boxed/struct.Box.html<dyn Futurehttps://doc.rust-lang.org/1.67.0/core/future/future/trait.Future.html<Output = ClientOutput../transaction/struct.ClientOutput.html> + Sendhttps://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html + 'async_trait>>
    where
        Self: 'async_trait,
        'life0: 'async_trait,
        'life1: 'async_trait,
        'life2: 'async_trait;
    fn await_primary_module_output<'life0, 'async_trait>(
        &'life0 self,
        operation_id: OperationId../sm/struct.OperationId.html,
        out_point: OutPoint
    ) -> Pinhttps://doc.rust-lang.org/1.67.0/core/pin/struct.Pin.html<Boxhttps://doc.rust-lang.org/1.67.0/alloc/boxed/struct.Box.html<dyn Futurehttps://doc.rust-lang.org/1.67.0/core/future/future/trait.Future.html<Output = Resulthttps://docs.rs/anyhow/1.0.71/anyhow/type.Result.html<Amount>> + Sendhttps://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html + 'async_trait>>
    where
        Self: 'async_trait,
        'life0: 'async_trait;
    fn get_balance<'life0, 'life1, 'life2, 'async_trait>(
        &'life0 self,
        module_instance: ModuleInstanceId,
        dbtx: &'life1 mut DatabaseTransaction<'life2>
    ) -> Pinhttps://doc.rust-lang.org/1.67.0/core/pin/struct.Pin.html<Boxhttps://doc.rust-lang.org/1.67.0/alloc/boxed/struct.Box.html<dyn Futurehttps://doc.rust-lang.org/1.67.0/core/future/future/trait.Future.html<Output = Amount> + Sendhttps://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html + 'async_trait>>
    where
        Self: 'async_trait,
        'life0: 'async_trait,
        'life1: 'async_trait,
        'life2: 'async_trait;
    fn subscribe_balance_changes<'life0, 'async_trait>(
        &'life0 self
    ) -> Pinhttps://doc.rust-lang.org/1.67.0/core/pin/struct.Pin.html<Boxhttps://doc.rust-lang.org/1.67.0/alloc/boxed/struct.Box.html<dyn Futurehttps://doc.rust-lang.org/1.67.0/core/future/future/trait.Future.html<Output = BoxStream<'static, ()https://doc.rust-lang.org/1.67.0/std/primitive.unit.html>> + Sendhttps://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html + 'async_trait>>
    where
        Self: 'async_trait,
        'life0: 'async_trait;
}

Expand description

Type-erased version of ClientModule [trait.ClientModule.html]


REQUIRED METHODS§

source [../../src/fedimint_client/module/mod.rs.html#191]

FN AS_ANY(&SELF) -> &(DYN ANY [https://doc.rust-lang.org/1.67.0/core/any/trait.Any.html] + SEND
[https://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html] + SYNC
[https://doc.rust-lang.org/1.67.0/core/marker/trait.Sync.html])

source [../../src/fedimint_client/module/mod.rs.html#193]

FN DECODER(&SELF) -> DECODER

source [../../src/fedimint_client/module/mod.rs.html#195]

FN CONTEXT(&SELF, INSTANCE: MODULEINSTANCEID) -> DYNCONTEXT [../sm/struct.DynContext.html]

source [../../src/fedimint_client/module/mod.rs.html#197-201]

FN HANDLE_CLI_COMMAND<'LIFE0, 'LIFE1, 'LIFE2, 'ASYNC_TRAIT>(
    &'LIFE0 SELF,
    CLIENT: &'LIFE1 CLIENT [../struct.Client.html],
    ARGS: &'LIFE2 [OSSTRING [https://doc.rust-lang.org/1.67.0/std/ffi/os_str/struct.OsString.html]]
) -> PIN [https://doc.rust-lang.org/1.67.0/core/pin/struct.Pin.html]<BOX
[https://doc.rust-lang.org/1.67.0/alloc/boxed/struct.Box.html]<DYN FUTURE
[https://doc.rust-lang.org/1.67.0/core/future/future/trait.Future.html]<OUTPUT = RESULT
[https://docs.rs/anyhow/1.0.71/anyhow/type.Result.html]<VALUE
[https://docs.rs/serde_json/1.0.96/serde_json/value/enum.Value.html]>> + SEND
[https://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html] + 'ASYNC_TRAIT>>WHERE
    SELF: 'ASYNC_TRAIT,
    'LIFE0: 'ASYNC_TRAIT,
    'LIFE1: 'ASYNC_TRAIT,
    'LIFE2: 'ASYNC_TRAIT,

source [../../src/fedimint_client/module/mod.rs.html#203]

FN INPUT_AMOUNT(&SELF, INPUT: &DYNINPUT) -> TRANSACTIONITEMAMOUNT

source [../../src/fedimint_client/module/mod.rs.html#205]

FN OUTPUT_AMOUNT(&SELF, OUTPUT: &DYNOUTPUT) -> TRANSACTIONITEMAMOUNT

source [../../src/fedimint_client/module/mod.rs.html#207]

FN SUPPORTS_BACKUP(&SELF) -> BOOL [https://doc.rust-lang.org/1.67.0/std/primitive.bool.html]

source [../../src/fedimint_client/module/mod.rs.html#209-215]

FN BACKUP<'LIFE0, 'LIFE1, 'LIFE2, 'ASYNC_TRAIT>(
    &'LIFE0 SELF,
    DBTX: &'LIFE1 MUT MODULEDATABASETRANSACTION<'LIFE2>,
    EXECUTOR: EXECUTOR [../sm/struct.Executor.html]<DYNGLOBALCLIENTCONTEXT [../struct.DynGlobalClientContext.html]>,
    API: DYNGLOBALAPI,
    MODULE_INSTANCE_ID: MODULEINSTANCEID
) -> PIN [https://doc.rust-lang.org/1.67.0/core/pin/struct.Pin.html]<BOX
[https://doc.rust-lang.org/1.67.0/alloc/boxed/struct.Box.html]<DYN FUTURE
[https://doc.rust-lang.org/1.67.0/core/future/future/trait.Future.html]<OUTPUT = RESULT
[https://docs.rs/anyhow/1.0.71/anyhow/type.Result.html]<VEC [https://doc.rust-lang.org/1.67.0/alloc/vec/struct.Vec.html]<U8
[https://doc.rust-lang.org/1.67.0/std/primitive.u8.html]>>> + SEND [https://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html]
+ 'ASYNC_TRAIT>>WHERE
    SELF: 'ASYNC_TRAIT,
    'LIFE0: 'ASYNC_TRAIT,
    'LIFE1: 'ASYNC_TRAIT,
    'LIFE2: 'ASYNC_TRAIT,

source [../../src/fedimint_client/module/mod.rs.html#217-225]

FN RESTORE<'LIFE0, 'LIFE1, 'LIFE2, 'LIFE3, 'ASYNC_TRAIT>(
    &'LIFE0 SELF,
    DBTX: &'LIFE1 MUT DATABASETRANSACTION<'LIFE2>,
    MODULE_INSTANCE_ID: MODULEINSTANCEID,
    EXECUTOR: EXECUTOR [../sm/struct.Executor.html]<DYNGLOBALCLIENTCONTEXT [../struct.DynGlobalClientContext.html]>,
    API: DYNGLOBALAPI,
    SNAPSHOT: OPTION [https://doc.rust-lang.org/1.67.0/core/option/enum.Option.html]<&'LIFE3 [U8
[https://doc.rust-lang.org/1.67.0/std/primitive.u8.html]]>
) -> PIN [https://doc.rust-lang.org/1.67.0/core/pin/struct.Pin.html]<BOX
[https://doc.rust-lang.org/1.67.0/alloc/boxed/struct.Box.html]<DYN FUTURE
[https://doc.rust-lang.org/1.67.0/core/future/future/trait.Future.html]<OUTPUT = RESULT
[https://docs.rs/anyhow/1.0.71/anyhow/type.Result.html]<() [https://doc.rust-lang.org/1.67.0/std/primitive.unit.html]>> + SEND
[https://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html] + 'ASYNC_TRAIT>>WHERE
    SELF: 'ASYNC_TRAIT,
    'LIFE0: 'ASYNC_TRAIT,
    'LIFE1: 'ASYNC_TRAIT,
    'LIFE2: 'ASYNC_TRAIT,
    'LIFE3: 'ASYNC_TRAIT,

source [../../src/fedimint_client/module/mod.rs.html#227-232]

FN WIPE<'LIFE0, 'LIFE1, 'LIFE2, 'ASYNC_TRAIT>(
    &'LIFE0 SELF,
    DBTX: &'LIFE1 MUT MODULEDATABASETRANSACTION<'LIFE2>,
    MODULE_INSTANCE_ID: MODULEINSTANCEID,
    EXECUTOR: EXECUTOR [../sm/struct.Executor.html]<DYNGLOBALCLIENTCONTEXT [../struct.DynGlobalClientContext.html]>
) -> PIN [https://doc.rust-lang.org/1.67.0/core/pin/struct.Pin.html]<BOX
[https://doc.rust-lang.org/1.67.0/alloc/boxed/struct.Box.html]<DYN FUTURE
[https://doc.rust-lang.org/1.67.0/core/future/future/trait.Future.html]<OUTPUT = RESULT
[https://docs.rs/anyhow/1.0.71/anyhow/type.Result.html]<() [https://doc.rust-lang.org/1.67.0/std/primitive.unit.html]>> + SEND
[https://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html] + 'ASYNC_TRAIT>>WHERE
    SELF: 'ASYNC_TRAIT,
    'LIFE0: 'ASYNC_TRAIT,
    'LIFE1: 'ASYNC_TRAIT,
    'LIFE2: 'ASYNC_TRAIT,

source [../../src/fedimint_client/module/mod.rs.html#234]

FN SUPPORTS_BEING_PRIMARY(&SELF) -> BOOL [https://doc.rust-lang.org/1.67.0/std/primitive.bool.html]

source [../../src/fedimint_client/module/mod.rs.html#236-242]

FN CREATE_SUFFICIENT_INPUT<'LIFE0, 'LIFE1, 'LIFE2, 'ASYNC_TRAIT>(
    &'LIFE0 SELF,
    MODULE_INSTANCE: MODULEINSTANCEID,
    DBTX: &'LIFE1 MUT DATABASETRANSACTION<'LIFE2>,
    OPERATION_ID: OPERATIONID [../sm/struct.OperationId.html],
    MIN_AMOUNT: AMOUNT
) -> PIN [https://doc.rust-lang.org/1.67.0/core/pin/struct.Pin.html]<BOX
[https://doc.rust-lang.org/1.67.0/alloc/boxed/struct.Box.html]<DYN FUTURE
[https://doc.rust-lang.org/1.67.0/core/future/future/trait.Future.html]<OUTPUT = RESULT
[https://docs.rs/anyhow/1.0.71/anyhow/type.Result.html]<CLIENTINPUT [../transaction/struct.ClientInput.html]>> + SEND
[https://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html] + 'ASYNC_TRAIT>>WHERE
    SELF: 'ASYNC_TRAIT,
    'LIFE0: 'ASYNC_TRAIT,
    'LIFE1: 'ASYNC_TRAIT,
    'LIFE2: 'ASYNC_TRAIT,

source [../../src/fedimint_client/module/mod.rs.html#244-250]

FN CREATE_EXACT_OUTPUT<'LIFE0, 'LIFE1, 'LIFE2, 'ASYNC_TRAIT>(
    &'LIFE0 SELF,
    MODULE_INSTANCE: MODULEINSTANCEID,
    DBTX: &'LIFE1 MUT DATABASETRANSACTION<'LIFE2>,
    OPERATION_ID: OPERATIONID [../sm/struct.OperationId.html],
    AMOUNT: AMOUNT
) -> PIN [https://doc.rust-lang.org/1.67.0/core/pin/struct.Pin.html]<BOX
[https://doc.rust-lang.org/1.67.0/alloc/boxed/struct.Box.html]<DYN FUTURE
[https://doc.rust-lang.org/1.67.0/core/future/future/trait.Future.html]<OUTPUT = CLIENTOUTPUT
[../transaction/struct.ClientOutput.html]> + SEND [https://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html] +
'ASYNC_TRAIT>>WHERE
    SELF: 'ASYNC_TRAIT,
    'LIFE0: 'ASYNC_TRAIT,
    'LIFE1: 'ASYNC_TRAIT,
    'LIFE2: 'ASYNC_TRAIT,

source [../../src/fedimint_client/module/mod.rs.html#252-256]

FN AWAIT_PRIMARY_MODULE_OUTPUT<'LIFE0, 'ASYNC_TRAIT>(
    &'LIFE0 SELF,
    OPERATION_ID: OPERATIONID [../sm/struct.OperationId.html],
    OUT_POINT: OUTPOINT
) -> PIN [https://doc.rust-lang.org/1.67.0/core/pin/struct.Pin.html]<BOX
[https://doc.rust-lang.org/1.67.0/alloc/boxed/struct.Box.html]<DYN FUTURE
[https://doc.rust-lang.org/1.67.0/core/future/future/trait.Future.html]<OUTPUT = RESULT
[https://docs.rs/anyhow/1.0.71/anyhow/type.Result.html]<AMOUNT>> + SEND
[https://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html] + 'ASYNC_TRAIT>>WHERE
    SELF: 'ASYNC_TRAIT,
    'LIFE0: 'ASYNC_TRAIT,

source [../../src/fedimint_client/module/mod.rs.html#258-262]

FN GET_BALANCE<'LIFE0, 'LIFE1, 'LIFE2, 'ASYNC_TRAIT>(
    &'LIFE0 SELF,
    MODULE_INSTANCE: MODULEINSTANCEID,
    DBTX: &'LIFE1 MUT DATABASETRANSACTION<'LIFE2>
) -> PIN [https://doc.rust-lang.org/1.67.0/core/pin/struct.Pin.html]<BOX
[https://doc.rust-lang.org/1.67.0/alloc/boxed/struct.Box.html]<DYN FUTURE
[https://doc.rust-lang.org/1.67.0/core/future/future/trait.Future.html]<OUTPUT = AMOUNT> + SEND
[https://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html] + 'ASYNC_TRAIT>>WHERE
    SELF: 'ASYNC_TRAIT,
    'LIFE0: 'ASYNC_TRAIT,
    'LIFE1: 'ASYNC_TRAIT,
    'LIFE2: 'ASYNC_TRAIT,

source [../../src/fedimint_client/module/mod.rs.html#264]

FN SUBSCRIBE_BALANCE_CHANGES<'LIFE0, 'ASYNC_TRAIT>(
    &'LIFE0 SELF
) -> PIN [https://doc.rust-lang.org/1.67.0/core/pin/struct.Pin.html]<BOX
[https://doc.rust-lang.org/1.67.0/alloc/boxed/struct.Box.html]<DYN FUTURE
[https://doc.rust-lang.org/1.67.0/core/future/future/trait.Future.html]<OUTPUT = BOXSTREAM<'STATIC, ()
[https://doc.rust-lang.org/1.67.0/std/primitive.unit.html]>> + SEND [https://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html]
+ 'ASYNC_TRAIT>>WHERE
    SELF: 'ASYNC_TRAIT,
    'LIFE0: 'ASYNC_TRAIT,


TRAIT IMPLEMENTATIONS§

source [../../src/fedimint_client/module/mod.rs.html#411-415]§


IMPL ASREF [https://doc.rust-lang.org/1.67.0/core/convert/trait.AsRef.html]<DYN ICLIENTMODULE [trait.IClientModule.html] + SEND
[https://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html] + SYNC
[https://doc.rust-lang.org/1.67.0/core/marker/trait.Sync.html] + 'STATIC> FOR DYNCLIENTMODULE [struct.DynClientModule.html]

source [../../src/fedimint_client/module/mod.rs.html#412-414]§

FN AS_REF [https://doc.rust-lang.org/1.67.0/core/convert/trait.AsRef.html#tymethod.as_ref](&SELF) -> &(DYN ICLIENTMODULE
[trait.IClientModule.html] + SEND [https://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html] + SYNC
[https://doc.rust-lang.org/1.67.0/core/marker/trait.Sync.html] + 'STATIC)

Converts this type into a shared reference of the (usually inferred) input type.


IMPLEMENTORS§

source [../../src/fedimint_client/module/mod.rs.html#268-404]§


IMPL<T> ICLIENTMODULE [trait.IClientModule.html] FOR TWHERE
    T: CLIENTMODULE [trait.ClientModule.html],

