☰
logo [../static.files/rust-logo-151179464ae7ed46.svg]
../fedimint_client/index.html




logo [../static.files/rust-logo-151179464ae7ed46.svg]
../fedimint_client/index.html


CRATE FEDIMINT_CLIENT

 * Version 0.1.0
 * All Items [all.html]

 * Re-exports
 * Modules
 * Macros
 * Structs
 * Enums
 * Traits
 * Functions
 * Type Definitions

? [../help.html]
Change settings [../static.files/wheel-5ec35bf9ca753509.svg]../settings.html


CRATE FEDIMINT_CLIENTCopy item path [../static.files/clipboard-7571035ce49a181d.svg]

source [../src/fedimint_client/lib.rs.html#1-1498] · [−]
Expand description


CLIENT LIBRARY FOR FEDIMINTD

This library provides a client interface to build module clients that can be plugged together into a fedimint client that exposes
a high-level interface for application authors to integrate with.


MODULE CLIENTS

Module clients have to at least implement the module::ClientModule [module/trait.ClientModule.html] trait and a factory struct
implementing module::gen::ClientModuleGen [module/gen/trait.ClientModuleGen.html]. The ClientModule trait defines the module types
(tx inputs, outputs, etc.) as well as the module’s state machines [sm/trait.State.html].

STATE MACHINES

State machines are spawned when starting operations and drive them forward in the background. All module state machines are run by
a central sm::Executor [sm/struct.Executor.html]. This means typically starting an operation shall return instantly.

For example when doing a deposit the function starting it would immediately return a deposit address and a OperationId
[sm/struct.OperationId.html] (important concept, highly recommended to read the docs) while spawning a state machine checking the
blockchain for incoming bitcoin transactions. The progress of these state machines can then be observed using the operation id,
but no further user interaction is required to drive them forward.

STATE MACHINE CONTEXTS

State machines have access to both a global context [sm/trait.GlobalContext.html] as well as to a module-specific context
[module/trait.ClientModule.html#tymethod.context].

The global context provides access to the federation API and allows to claim module outputs (and transferring the value into the
client’s wallet), which can be used for refunds.

The client-specific context can be used for other purposes, such as supplying config to the state transitions or giving access to
other APIs (e.g. LN gateway in case of the lightning module).

EXTENSION TRAITS

The modules themselves can only create inputs and outputs that then have to be combined into transactions by the user and
submitted via Client::finalize_and_submit_transaction [struct.Client.html#method.finalize_and_submit_transaction]. To make this
easier most module client implementations contain an extension trait which is implemented for Client [struct.Client.html] and
allows to create the most typical fedimint transactions with a single function call.

To observe the progress each high level operation function should be accompanied by one returning a stream of high-level operation
updates. Internally that stream queries the state machines belonging to the operation to determine the high-level operation state.

PRIMARY MODULES

Not all modules have the ability to hold money for long. E.g. the lightning module and its smart contracts are only used to
incentivize LN payments, not to hold money. The mint module on the other hand holds e-cash note and can thus be used to fund
transactions and to absorb change. Module clients with this ability should implement ClientModule::supports_being_primary
[module/trait.ClientModule.html#method.supports_being_primary] and related methods.

For a example of a client module see the mint client
[https://github.com/fedimint/fedimint/blob/master/modules/fedimint-mint-client/src/lib.rs].


CLIENT

The Client [struct.Client.html] struct is the main entry point for application authors. It is constructed using its builder which
can be obtained via Client::builder [struct.Client.html#method.builder]. The supported module clients have to be chosen at compile
time while the actually available ones will be determined by the config loaded at runtime.

For a hacky instantiation of a complete client see the ng subcommand of fedimint-cli
[https://github.com/fedimint/fedimint/blob/55f9d88e17d914b92a7018de677d16e57ed42bf6/fedimint-cli/src/ng.rs#L56-L73].


RE-EXPORTS

pub use fedimint_derive_secret [../fedimint_derive_secret/index.html] as derivable_secret;


MODULES

backup [backup/index.html]
Client backup
db [db/index.html]
Database keys used by the client
module [module/index.html]
Module client interface definitions
oplog [oplog/index.html]
Operation log subsystem of the client
secret [secret/index.html]
Secret handling & derivation
sm [sm/index.html]
Client state machine interfaces and executor implementation
transaction [transaction/index.html]
Structs and interfaces to construct Fedimint transactions


MACROS

sm_enum_variant_translation [macro.sm_enum_variant_translation.html]


STRUCTS

Client [struct.Client.html]
ClientBuilder [struct.ClientBuilder.html]
ClientModuleInstance [struct.ClientModuleInstance.html]
Resources particular to a module instance
ClientSecret [struct.ClientSecret.html]
Secret input key material from which the DerivableSecret [../fedimint_derive_secret/struct.DerivableSecret.html] used by the
client will be seeded
DynGlobalClientContext [struct.DynGlobalClientContext.html]
Global state and functionality provided to all state machines running in the client
TransactionUpdates [struct.TransactionUpdates.html]
See Client::transaction_updates [struct.Client.html#method.transaction_updates]


ENUMS

DatabaseSource [enum.DatabaseSource.html]


TRAITS

IGlobalClientContext [trait.IGlobalClientContext.html]


FUNCTIONS

client_decoders [fn.client_decoders.html]
get_client_root_secret [fn.get_client_root_secret.html]
Fetches the client secret from the database or generates a new one if none is present
get_client_root_secret_encoding [fn.get_client_root_secret_encoding.html]
Fetches the client secret encoding from the database or generates a new one if none is present


TYPE DEFINITIONS

InstancelessDynClientInput [type.InstancelessDynClientInput.html]
InstancelessDynClientOutput [type.InstancelessDynClientOutput.html]
ModuleGlobalContextGen [type.ModuleGlobalContextGen.html]
