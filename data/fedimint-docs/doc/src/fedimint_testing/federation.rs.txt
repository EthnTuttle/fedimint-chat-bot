logo [../../static.files/rust-logo-151179464ae7ed46.svg]../../fedimint_testing/index.html
? [../../help.html]
Change settings [../../static.files/wheel-5ec35bf9ca753509.svg]../../settings.html

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197


use std::collections::{BTreeMap, HashMap};

use fedimint_client::module::gen::ClientModuleGenRegistry;
use fedimint_client::secret::PlainRootSecretStrategy;
use fedimint_client::{Client, ClientBuilder};
use fedimint_core::admin_client::{ConfigGenParamsConsensus, PeerServerParams};
use fedimint_core::api::WsClientConnectInfo;
use fedimint_core::config::{
    ClientConfig, FederationId, ServerModuleGenParamsRegistry, ServerModuleGenRegistry,
    META_FEDERATION_NAME_KEY,
};
use fedimint_core::core::ModuleInstanceId;
use fedimint_core::db::mem_impl::MemDatabase;
use fedimint_core::db::Database;
use fedimint_core::module::ApiAuth;
use fedimint_core::task::TaskGroup;
use fedimint_core::PeerId;
use fedimint_server::config::api::ConfigGenParamsLocal;
use fedimint_server::config::{gen_cert_and_key, ConfigGenParams, ServerConfig};
use fedimint_server::consensus::server::ConsensusServer;
use fedimint_server::net::connect::mock::{MockNetwork, StreamReliability};
use fedimint_server::net::connect::{parse_host_port, Connector};
use fedimint_server::net::peers::DelayCalculator;
use fedimint_server::FedimintServer;
use tokio_rustls::rustls;

/// Test fixture for a running fedimint federation
pub struct FederationTest {
    configs: BTreeMap<PeerId, ServerConfig>,
    server_gen: ServerModuleGenRegistry,
    client_gen: ClientModuleGenRegistry,
    primary_client: ModuleInstanceId,
    task: TaskGroup,
}

impl FederationTest {
    /// Create two clients, useful for send/receive tests
    pub async fn two_clients(&self) -> (Client, Client) {
        (self.new_client().await, self.new_client().await)
    }

    /// Create a client connected to this fed
    pub async fn new_client(&self) -> Client {
        let client_config = self.configs[&PeerId::from(0)]
            .consensus
            .to_client_config(&self.server_gen)
            .unwrap();

        self.new_client_with_config(client_config).await
    }

    pub async fn new_client_with_config(&self, client_config: ClientConfig) -> Client {
        let mut client_builder = ClientBuilder::default();
        client_builder.with_module_gens(self.client_gen.clone());
        client_builder.with_primary_module(self.primary_client);
        client_builder.with_config(client_config);
        client_builder.with_database(MemDatabase::new());
        client_builder
            .build::<PlainRootSecretStrategy>(&mut self.task.make_subgroup().await)
            .await
            .expect("Failed to build client")
    }

    /// Return first connection code for gateways
    pub fn connection_code(&self) -> WsClientConnectInfo {
        self.configs[&PeerId::from(0)].get_connect_info()
    }

    ///  Return first id for gateways
    pub fn id(&self) -> FederationId {
        self.configs[&PeerId::from(0)]
            .consensus
            .to_client_config(&self.server_gen)
            .unwrap()
            .federation_id
    }

    pub(crate) async fn new(
        num_peers: u16,
        base_port: u16,
        params: ServerModuleGenParamsRegistry,
        server_gen: ServerModuleGenRegistry,
        client_gen: ClientModuleGenRegistry,
        primary_client: ModuleInstanceId,
    ) -> Self {
        let peers = (0..num_peers).map(PeerId::from).collect::<Vec<_>>();
        let params =
            local_config_gen_params(&peers, base_port, params).expect("Generates local config");

        let configs = ServerConfig::trusted_dealer_gen(&params, server_gen.clone());
        let network = MockNetwork::new();

        let mut task = TaskGroup::new();
        for (peer_id, config) in configs.clone() {
            let reliability = StreamReliability::INTEGRATION_TEST;
            let connections = network.connector(peer_id, reliability).into_dyn();

            let instances = config.consensus.iter_module_instances();
            let decoders = server_gen.decoders(instances).unwrap();
            let db = Database::new(MemDatabase::new(), decoders);

            let server = ConsensusServer::new_with(
                config.clone(),
                db.clone(),
                server_gen.clone(),
                connections,
                DelayCalculator::TEST_DEFAULT,
                &mut task,
            )
            .await
            .expect("Failed to init server");

            let api_handle = FedimintServer::spawn_consensus_api(&server, false).await;
            task.spawn("fedimintd", move |handle| async {
                server.run_consensus(handle).await.unwrap();
                api_handle.stop().await;
            })
            .await;
        }

        Self {
            configs,
            server_gen,
            client_gen,
            primary_client,
            task,
        }
    }
}

/// Creates the config gen params for each peer
///
/// Uses peers * 2 ports offset from `base_port`
pub fn local_config_gen_params(
    peers: &[PeerId],
    base_port: u16,
    server_config_gen: ServerModuleGenParamsRegistry,
) -> anyhow::Result<HashMap<PeerId, ConfigGenParams>> {
    // Generate TLS cert and private key
    let tls_keys: HashMap<PeerId, (rustls::Certificate, rustls::PrivateKey)> = peers
        .iter()
        .map(|peer| {
            (
                *peer,
                gen_cert_and_key(&format!("peer-{}", peer.to_usize())).unwrap(),
            )
        })
        .collect();

    // Generate the P2P and API URL on 2 different ports for each peer
    let connections: BTreeMap<PeerId, PeerServerParams> = peers
        .iter()
        .map(|peer| {
            let peer_port = base_port + u16::from(*peer) * 2;
            let p2p_url = format!("fedimint://127.0.0.1:{peer_port}");
            let api_url = format!("ws://127.0.0.1:{}", peer_port + 1);

            let params: PeerServerParams = PeerServerParams {
                cert: tls_keys[peer].0.clone(),
                p2p_url: p2p_url.parse().expect("Should parse"),
                api_url: api_url.parse().expect("Should parse"),
                name: format!("peer-{}", peer.to_usize()),
                status: None,
            };
            (*peer, params)
        })
        .collect();

    peers
        .iter()
        .map(|peer| {
            let p2p_bind = parse_host_port(connections[peer].clone().p2p_url)?;
            let api_bind = parse_host_port(connections[peer].clone().api_url)?;

            let params = ConfigGenParams {
                local: ConfigGenParamsLocal {
                    our_id: *peer,
                    our_private_key: tls_keys[peer].1.clone(),
                    api_auth: ApiAuth(format!("pass{}", peer.to_usize())),
                    p2p_bind: p2p_bind.parse().expect("Valid address"),
                    api_bind: api_bind.parse().expect("Valid address"),
                    download_token_limit: None,
                    max_connections: 10,
                },
                consensus: ConfigGenParamsConsensus {
                    peers: connections.clone(),
                    meta: BTreeMap::from([(
                        META_FEDERATION_NAME_KEY.to_owned(),
                        "federation_name".to_string(),
                    )]),
                    modules: server_config_gen.clone(),
                },
            };
            Ok((*peer, params))
        })
        .collect::<anyhow::Result<HashMap<_, _>>>()
}


