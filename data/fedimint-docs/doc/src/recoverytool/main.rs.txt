logo [../../static.files/rust-logo-151179464ae7ed46.svg]../../recoverytool/index.html
? [../../help.html]
Change settings [../../static.files/wheel-5ec35bf9ca753509.svg]../../settings.html

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
235
236
237
238
239
240
241
242
243
244
245
246
247
248
249
250
251
252
253
254
255
256
257
258
259
260
261
262
263
264
265
266
267
268
269
270
271
272
273
274
275
276
277
278
279
280
281
282
283
284
285
286
287
288
289
290
291
292
293
294
295
296
297
298
299
300
301
302
303
304
305
306
307
308
309
310
311
312
313
314
315
316
317
318
319
320
321
322
323
324
325
326
327
328
329
330
331
332
333
334
335
336
337
338
339
340
341
342
343
344
345
346
347
348
349
350
351
352
353
354
355
356
357
358
359
360
361
362
363
364
365
366
367
368
369
370
371
372
373
374
375
376
377
378
379
380
381
382
383
384
385
386
387
388
389
390
391
392
393
394
395
396
397
398
399
400
401
402
403
404
405
406
407
408
409
410
411
412
413
414
415
416
417
418
419
420
421
422
423
424
425
426
427
428
429
430
431
432
433
434
435
436
437
438
439
440
441
442
443
444
445
446
447
448
449
450
451
452
453
454
455
456
457
458
459
460
461
462
463


use std::cmp::Ordering;
use std::collections::BTreeSet;
use std::fmt::{Display, Formatter};
use std::hash::Hasher;
use std::path::PathBuf;

use anyhow::anyhow;
use bitcoin::hashes::hex::FromHex;
use bitcoin::hashes::sha256;
use bitcoin::hashes::sha256::Hash;
use bitcoin::network::constants::Network;
use bitcoin::OutPoint;
use clap::{ArgGroup, Parser, Subcommand};
use fedimint_core::core::{
    LEGACY_HARDCODED_INSTANCE_ID_LN, LEGACY_HARDCODED_INSTANCE_ID_MINT,
    LEGACY_HARDCODED_INSTANCE_ID_WALLET,
};
use fedimint_core::db::Database;
use fedimint_core::encoding::Encodable;
use fedimint_core::module::registry::ModuleDecoderRegistry;
use fedimint_core::module::CommonModuleGen;
use fedimint_core::{BitcoinHash, ServerModule};
use fedimint_ln_server::common::LightningCommonGen;
use fedimint_ln_server::Lightning;
use fedimint_logging::TracingSetup;
use fedimint_mint_server::common::MintCommonGen;
use fedimint_mint_server::Mint;
use fedimint_rocksdb::RocksDb;
use fedimint_server::config::io::read_server_config;
use fedimint_server::db::EpochHistoryKeyPrefix;
use fedimint_server::epoch::{IterUnzipConsensusItem, SignedEpochOutcome, UnzipConsensusItem};
use fedimint_server::transaction::Transaction;
use fedimint_wallet_server::common::config::WalletConfig;
use fedimint_wallet_server::common::db::{UTXOKey, UTXOPrefixKey};
use fedimint_wallet_server::common::keys::CompressedPublicKey;
use fedimint_wallet_server::common::tweakable::Tweakable;
use fedimint_wallet_server::common::{
    PegInDescriptor, SpendableUTXO, WalletCommonGen, WalletInput,
};
use fedimint_wallet_server::Wallet;
use futures::stream::StreamExt;
use miniscript::{Descriptor, MiniscriptKey, ToPublicKey, TranslatePk, Translator};
use secp256k1::SecretKey;
use serde::Serialize;
use tracing::info;

/// Tool to recover the on-chain wallet of a Fedimint federation
#[derive(Debug, Parser)]
#[command(group(
    ArgGroup::new("keysource")
        .required(true)
        .args(["config", "descriptor"]),
))]
struct RecoveryTool {
    /// Directory containing server config files
    #[arg(long = "cfg")]
    config: Option<PathBuf>,
    /// The password that encrypts the configs
    #[arg(long, env = "FM_PASSWORD", requires = "config")]
    password: String,
    /// Wallet descriptor, can be used instead of --cfg
    #[arg(long)]
    descriptor: Option<PegInDescriptor>,
    /// Wallet secret key, can be used instead of config together with
    /// --descriptor
    #[arg(long, requires = "descriptor")]
    key: Option<SecretKey>,
    /// Network to operate on, has to be specified if --cfg isn't present
    #[arg(long, default_value = "bitcoin", requires = "descriptor")]
    network: Network,
    #[command(subcommand)]
    strategy: TweakSource,
}

#[derive(Debug, Clone, Subcommand)]
enum TweakSource {
    /// Derive the wallet descriptor using a single tweak
    Direct {
        #[arg(long, value_parser = tweak_parser)]
        tweak: [u8; 32],
    },
    /// Derive all wallet descriptors of confirmed UTXOs in the on-chain wallet.
    /// Note that unconfirmed change UTXOs will not appear here.
    Utxos {
        /// Extract UTXOs from a database without module partitioning
        #[arg(long)]
        legacy: bool,
        /// Path to database
        #[arg(long)]
        db: PathBuf,
    },
    /// Derive all wallet descriptors of tweaks that were ever used according to
    /// the epoch log. In a long-running and busy federation this list will
    /// contain many empty descriptors.
    Epochs {
        /// Path to database
        #[arg(long)]
        db: PathBuf,
    },
}

fn tweak_parser(hex: &str) -> anyhow::Result<[u8; 32]> {
    <Vec<u8> as FromHex>::from_hex(hex)?
        .try_into()
        .map_err(|_| anyhow!("tasks have to be 32 bytes long"))
}

#[tokio::main]
async fn main() -> anyhow::Result<()> {
    TracingSetup::default().init()?;

    let opts: RecoveryTool = RecoveryTool::parse();

    let (base_descriptor, base_key, network) = if let Some(config) = opts.config {
        let cfg = read_server_config(&opts.password, config).expect("Could not read config file");
        let wallet_cfg: WalletConfig = cfg
            .get_module_config_typed(LEGACY_HARDCODED_INSTANCE_ID_WALLET)
            .expect("Malformed wallet config");
        let base_descriptor = wallet_cfg.consensus.peg_in_descriptor;
        let base_key = wallet_cfg.private.peg_in_key;
        let network = wallet_cfg.consensus.network;

        (base_descriptor, base_key, network)
    } else if let (Some(descriptor), Some(key)) = (opts.descriptor, opts.key) {
        (descriptor, key, opts.network)
    } else {
        panic!("Either config or descriptor will be provided by clap");
    };

    match opts.strategy {
        TweakSource::Direct { tweak } => {
            let descriptor = tweak_descriptor(&base_descriptor, &base_key, &tweak, network);
            let wallets = vec![ImportableWalletMin { descriptor }];

            serde_json::to_writer(std::io::stdout().lock(), &wallets)
                .expect("Could not encode to stdout")
        }
        TweakSource::Utxos { legacy, db } => {
            let db = Database::new(
                RocksDb::open(db).expect("Error opening DB"),
                Default::default(),
            );

            let db = if legacy {
                db
            } else {
                db.new_isolated(LEGACY_HARDCODED_INSTANCE_ID_WALLET)
            };

            let utxos: Vec<ImportableWallet> = db
                .begin_transaction()
                .await
                .find_by_prefix(&UTXOPrefixKey)
                .await
                .map(|(UTXOKey(outpoint), SpendableUTXO { tweak, amount })| {
                    let descriptor = tweak_descriptor(&base_descriptor, &base_key, &tweak, network);

                    ImportableWallet {
                        outpoint,
                        descriptor,
                        amount_sat: amount,
                    }
                })
                .collect()
                .await;

            serde_json::to_writer(std::io::stdout().lock(), &utxos)
                .expect("Could not encode to stdout")
        }
        TweakSource::Epochs { db } => {
            let decoders = ModuleDecoderRegistry::from_iter([
                (
                    LEGACY_HARDCODED_INSTANCE_ID_LN,
                    LightningCommonGen::KIND,
                    <Lightning as ServerModule>::decoder(),
                ),
                (
                    LEGACY_HARDCODED_INSTANCE_ID_MINT,
                    MintCommonGen::KIND,
                    <Mint as ServerModule>::decoder(),
                ),
                (
                    LEGACY_HARDCODED_INSTANCE_ID_WALLET,
                    WalletCommonGen::KIND,
                    <Wallet as ServerModule>::decoder(),
                ),
            ]);

            let db = Database::new(RocksDb::open(db).expect("Error opening DB"), decoders);
            let mut dbtx = db.begin_transaction().await;

            let mut change_tweak_idx: u64 = 0;
            let tweaks = dbtx.find_by_prefix(&EpochHistoryKeyPrefix).await.flat_map(
                |(_, SignedEpochOutcome { outcome, .. })| {
                    let UnzipConsensusItem {
                        transaction: transaction_cis,
                        ..
                    } = outcome
                        .items
                        .into_iter()
                        .flat_map(|(peer, cis)| cis.into_iter().map(move |ci| (peer, ci)))
                        .unzip_consensus_item();

                    // Get all user-submitted tweaks and if we did a peg-out tx also return the
                    // consensus round's tweak used for change
                    let (mut peg_in_tweaks, peg_out_present) =
                        input_tweaks_output_present(transaction_cis.into_iter().map(|(_, ci)| ci));

                    if peg_out_present {
                        info!("Found change output, adding tweak {change_tweak_idx} to list");
                        let change_tweak = change_tweak_idx
                            .consensus_hash::<sha256::Hash>()
                            .into_inner();
                        peg_in_tweaks.insert(change_tweak);
                        change_tweak_idx += 1;
                    }

                    futures::stream::iter(peg_in_tweaks.into_iter())
                },
            );

            let wallets = tweaks
                .map(|tweak| {
                    let descriptor = tweak_descriptor(&base_descriptor, &base_key, &tweak, network);
                    ImportableWalletMin { descriptor }
                })
                .collect::<Vec<_>>()
                .await;

            serde_json::to_writer(std::io::stdout().lock(), &wallets)
                .expect("Could not encode to stdout")
        }
    }

    Ok(())
}

fn input_tweaks_output_present(
    transactions: impl Iterator<Item = Transaction>,
) -> (BTreeSet<[u8; 32]>, bool) {
    let mut contains_peg_out = false;
    let tweaks =
        transactions
            .flat_map(|tx| {
                if tx.outputs.iter().any(|output| {
                    output.module_instance_id() == LEGACY_HARDCODED_INSTANCE_ID_WALLET
                }) {
                    contains_peg_out = true;
                }

                tx.inputs.into_iter().filter_map(|input| {
                    if input.module_instance_id() != LEGACY_HARDCODED_INSTANCE_ID_WALLET {
                        return None;
                    }

                    Some(
                        input
                            .as_any()
                            .downcast_ref::<WalletInput>()
                            .expect("Instance id mapping incorrect")
                            .0
                            .tweak_contract_key()
                            .serialize(),
                    )
                })
            })
            .collect::<BTreeSet<_>>();

    (tweaks, contains_peg_out)
}

fn tweak_descriptor(
    base_descriptor: &PegInDescriptor,
    base_sk: &SecretKey,
    tweak: &[u8; 32],
    network: Network,
) -> Descriptor<Key> {
    let secret_key = base_sk.tweak(tweak, secp256k1::SECP256K1);
    let pub_key =
        CompressedPublicKey::new(secp256k1::PublicKey::from_secret_key_global(&secret_key));
    base_descriptor
        .tweak(tweak, secp256k1::SECP256K1)
        .translate_pk(&mut SecretKeyInjector {
            secret: bitcoin::util::key::PrivateKey {
                compressed: true,
                network,
                inner: secret_key,
            },
            public: pub_key,
        })
        .expect("can't fail")
}

/// A UTXO with its Bitcoin Core importable descriptor
#[derive(Debug, Serialize)]
struct ImportableWallet {
    outpoint: OutPoint,
    descriptor: Descriptor<Key>,
    #[serde(with = "bitcoin::util::amount::serde::as_sat")]
    amount_sat: bitcoin::Amount,
}

/// A Bitcoin Core importable descriptor
#[derive(Debug, Serialize)]
struct ImportableWalletMin {
    descriptor: Descriptor<Key>,
}

/// `MiniscriptKey` that is either a WIF-encoded private key or a compressed,
/// hex-encoded public key
#[derive(Debug, Clone, Copy, Eq)]
enum Key {
    Public(CompressedPublicKey),
    Private(bitcoin::util::key::PrivateKey),
}

impl PartialOrd for Key {
    fn partial_cmp(&self, other: &Self) -> Option<Ordering> {
        self.to_compressed_public_key()
            .partial_cmp(&other.to_compressed_public_key())
    }
}

impl Ord for Key {
    fn cmp(&self, other: &Self) -> Ordering {
        self.to_compressed_public_key()
            .cmp(&other.to_compressed_public_key())
    }
}

impl PartialEq for Key {
    fn eq(&self, other: &Self) -> bool {
        self.to_compressed_public_key()
            .eq(&other.to_compressed_public_key())
    }
}

impl std::hash::Hash for Key {
    fn hash<H: Hasher>(&self, state: &mut H) {
        self.to_compressed_public_key().hash(state)
    }
}

impl Key {
    fn to_compressed_public_key(self) -> CompressedPublicKey {
        match self {
            Key::Public(pk) => pk,
            Key::Private(sk) => {
                CompressedPublicKey::new(secp256k1::PublicKey::from_secret_key_global(&sk.inner))
            }
        }
    }
}

impl Display for Key {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        match self {
            Key::Public(pk) => Display::fmt(pk, f),
            Key::Private(sk) => Display::fmt(sk, f),
        }
    }
}

impl MiniscriptKey for Key {
    fn is_uncompressed(&self) -> bool {
        false
    }

    type RawPkHash = Key;
    type Sha256 = bitcoin::hashes::sha256::Hash;
    type Hash256 = miniscript::hash256::Hash;
    type Ripemd160 = bitcoin::hashes::ripemd160::Hash;
    type Hash160 = bitcoin::hashes::hash160::Hash;

    fn to_pubkeyhash(&self) -> Self::RawPkHash {
        *self
    }
}

impl ToPublicKey for Key {
    fn to_public_key(&self) -> bitcoin::PublicKey {
        self.to_compressed_public_key().to_public_key()
    }

    fn hash_to_hash160(
        hash: &<Self as MiniscriptKey>::RawPkHash,
    ) -> bitcoin::hashes::hash160::Hash {
        <CompressedPublicKey as ToPublicKey>::hash_to_hash160(&hash.to_compressed_public_key())
    }

    fn to_sha256(hash: &<Self as MiniscriptKey>::Sha256) -> Hash {
        *hash
    }

    fn to_hash256(hash: &<Self as MiniscriptKey>::Hash256) -> miniscript::hash256::Hash {
        *hash
    }

    fn to_ripemd160(hash: &<Self as MiniscriptKey>::Ripemd160) -> bitcoin::hashes::ripemd160::Hash {
        *hash
    }

    fn to_hash160(hash: &<Self as MiniscriptKey>::Hash160) -> bitcoin::hashes::hash160::Hash {
        *hash
    }
}

/// Miniscript [`Translator`] that replaces a public key with a private key we
/// know.
#[derive(Debug)]
struct SecretKeyInjector {
    secret: bitcoin::util::key::PrivateKey,
    public: CompressedPublicKey,
}

impl Translator<CompressedPublicKey, Key, ()> for SecretKeyInjector {
    fn pk(&mut self, pk: &CompressedPublicKey) -> Result<Key, ()> {
        if &self.public == pk {
            Ok(Key::Private(self.secret))
        } else {
            Ok(Key::Public(*pk))
        }
    }

    fn pkh(
        &mut self,
        pkh: &<CompressedPublicKey as MiniscriptKey>::RawPkHash,
    ) -> Result<<Key as MiniscriptKey>::RawPkHash, ()> {
        if &self.public == pkh {
            Ok(Key::Private(self.secret))
        } else {
            Ok(Key::Public(*pkh))
        }
    }

    fn sha256(
        &mut self,
        _sha256: &<CompressedPublicKey as MiniscriptKey>::Sha256,
    ) -> Result<<Key as MiniscriptKey>::Sha256, ()> {
        unimplemented!()
    }

    fn hash256(
        &mut self,
        _hash256: &<CompressedPublicKey as MiniscriptKey>::Hash256,
    ) -> Result<<Key as MiniscriptKey>::Hash256, ()> {
        unimplemented!()
    }

    fn ripemd160(
        &mut self,
        _ripemd160: &<CompressedPublicKey as MiniscriptKey>::Ripemd160,
    ) -> Result<<Key as MiniscriptKey>::Ripemd160, ()> {
        unimplemented!()
    }

    fn hash160(
        &mut self,
        _hash160: &<CompressedPublicKey as MiniscriptKey>::Hash160,
    ) -> Result<<Key as MiniscriptKey>::Hash160, ()> {
        unimplemented!()
    }
}


