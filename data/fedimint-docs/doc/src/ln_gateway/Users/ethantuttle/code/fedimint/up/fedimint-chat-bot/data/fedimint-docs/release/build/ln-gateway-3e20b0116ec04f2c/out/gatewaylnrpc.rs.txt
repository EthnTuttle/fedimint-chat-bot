logo
[../../../../../../../../../../../../../../static.files/rust-logo-151179464ae7ed46.svg]../../../../../../../../../../../../../../ln_gateway/index.html
? [../../../../../../../../../../../../../../help.html]
Change settings
[../../../../../../../../../../../../../../static.files/wheel-5ec35bf9ca753509.svg]../../../../../../../../../../../../../../settings.html

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
235
236
237
238
239
240
241
242
243
244
245
246
247
248
249
250
251
252
253
254
255
256
257
258
259
260
261
262
263
264
265
266
267
268
269
270
271
272
273
274
275
276
277
278
279
280
281
282
283
284
285
286
287
288
289
290
291
292
293
294
295
296
297
298
299
300
301
302
303
304
305
306
307
308
309
310
311
312
313
314
315
316
317
318
319
320
321
322
323
324
325
326
327
328
329
330
331
332
333
334
335
336
337
338
339
340
341
342
343
344
345
346
347
348
349
350
351
352
353
354
355
356
357
358
359
360
361
362
363
364
365
366
367
368
369
370
371
372
373
374
375
376
377
378
379
380
381
382
383
384
385
386
387
388
389
390
391
392
393
394
395
396
397
398
399
400
401
402
403
404
405
406
407
408
409
410
411
412
413
414
415
416
417
418
419
420
421
422
423
424
425
426
427
428
429
430
431
432
433
434
435
436
437
438
439
440
441
442
443
444
445
446
447
448
449
450
451
452
453
454
455
456
457
458
459
460
461
462
463
464
465
466
467
468
469
470
471
472
473
474
475
476
477
478
479
480
481
482
483
484
485
486
487
488
489
490
491
492
493
494
495
496
497
498
499
500
501
502
503
504
505
506
507
508
509
510
511
512
513
514
515
516
517
518
519
520
521
522
523
524
525
526
527
528
529
530
531
532
533
534
535
536
537
538
539
540
541
542
543
544
545
546
547
548
549
550
551
552
553
554
555
556
557
558
559
560
561
562
563
564
565
566
567
568
569
570
571
572
573
574
575
576
577
578
579
580
581
582
583
584
585
586
587
588
589
590
591
592
593
594
595
596
597
598
599
600
601
602
603
604
605
606
607
608
609
610
611
612
613
614
615
616
617
618
619
620
621
622
623
624
625
626
627
628
629
630
631
632
633
634
635
636
637
638
639
640
641
642
643
644
645
646
647
648
649
650
651
652
653
654
655
656
657
658
659
660
661
662
663
664
665
666
667
668
669
670
671
672
673
674
675
676
677
678
679
680
681
682
683
684
685
686
687
688
689
690


#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EmptyRequest {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EmptyResponse {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetNodeInfoResponse {
    /// The public key of the associated lightning node
    #[prost(bytes = "vec", tag = "1")]
    pub pub_key: ::prost::alloc::vec::Vec<u8>,
    /// The alias of the lightning node
    #[prost(string, tag = "2")]
    pub alias: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PayInvoiceRequest {
    #[prost(string, tag = "1")]
    pub invoice: ::prost::alloc::string::String,
    #[prost(uint64, tag = "2")]
    pub max_delay: u64,
    #[prost(uint64, tag = "3")]
    pub max_fee_msat: u64,
    #[prost(bytes = "vec", tag = "4")]
    pub payment_hash: ::prost::alloc::vec::Vec<u8>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PayInvoiceResponse {
    /// The preimage of the invoice
    #[prost(bytes = "vec", tag = "1")]
    pub preimage: ::prost::alloc::vec::Vec<u8>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InterceptHtlcRequest {
    /// The HTLC payment hash.
    /// Value is not guaranteed to be unique per intercepted HTLC
    #[prost(bytes = "vec", tag = "1")]
    pub payment_hash: ::prost::alloc::vec::Vec<u8>,
    /// The incoming HTLC amount in millisatoshi.
    /// This amount minus the `outgoing_amount_msat` is the fee paid for processing
    /// this intercepted HTLC
    #[prost(uint64, tag = "2")]
    pub incoming_amount_msat: u64,
    /// The outgoing HTLC amount in millisatoshi
    /// This is the amount we should forward to the Federation if we successfully
    /// process this intercepted HTLC
    #[prost(uint64, tag = "3")]
    pub outgoing_amount_msat: u64,
    /// The incoming HTLC expiry
    /// Determines block height when the node will automatically cancel and revert
    /// the intercepted HTLC to sender if it is not settled.
    #[prost(uint32, tag = "4")]
    pub incoming_expiry: u32,
    /// The short channel id of the HTLC.
    /// Use this value to confirm relevance of the intercepted HTLC
    #[prost(uint64, tag = "10")]
    pub short_channel_id: u64,
    /// The id of the incoming channel
    #[prost(uint64, tag = "12")]
    pub incoming_chan_id: u64,
    /// The index of the incoming htlc in the incoming channel
    #[prost(uint64, tag = "13")]
    pub htlc_id: u64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InterceptHtlcResponse {
    /// The id of the incoming channel
    #[prost(uint64, tag = "4")]
    pub incoming_chan_id: u64,
    /// The index of the incoming htlc in the incoming channel
    #[prost(uint64, tag = "5")]
    pub htlc_id: u64,
    #[prost(oneof = "intercept_htlc_response::Action", tags = "1, 2, 3")]
    pub action: ::core::option::Option<intercept_htlc_response::Action>,
}
/// Nested message and enum types in `InterceptHtlcResponse`.
pub mod intercept_htlc_response {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Settle {
        /// The preimage for settling an intercepted HTLC
        #[prost(bytes = "vec", tag = "1")]
        pub preimage: ::prost::alloc::vec::Vec<u8>,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Cancel {
        /// The reason for the cancellation of an intercepted HTLC
        #[prost(string, tag = "1")]
        pub reason: ::prost::alloc::string::String,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Forward {}
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Action {
        /// Request to complete an intercepted HTLC with success result after
        /// processing
        ///
        /// Send this request when the gateway successfully processed intercepted
        /// HTLC GatewayLightning will settle/resolve the intercepted HTLC with
        /// reason provided.
        #[prost(message, tag = "1")]
        Settle(Settle),
        /// Request to complete an intercepted HTLC with failure result after
        /// processing
        ///
        /// Send this request when the gateway failed or canceled processing of
        /// intercepted HTLC. GatewayLightning will fail/cancel the intercepted HTLC
        /// with reason provided.
        #[prost(message, tag = "2")]
        Cancel(Cancel),
        /// Request to just forward the HTLC without failing or settling it.
        #[prost(message, tag = "3")]
        Forward(Forward),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetRouteHintsResponse {
    /// The route hints to the associated lightning node
    #[prost(message, repeated, tag = "1")]
    pub route_hints: ::prost::alloc::vec::Vec<get_route_hints_response::RouteHint>,
}
/// Nested message and enum types in `GetRouteHintsResponse`.
pub mod get_route_hints_response {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct RouteHintHop {
        /// The node_id of the non-target end of the route.
        #[prost(bytes = "vec", tag = "1")]
        pub src_node_id: ::prost::alloc::vec::Vec<u8>,
        /// The short_channel_id of this channel.
        #[prost(uint64, tag = "2")]
        pub short_channel_id: u64,
        /// Flat routing fee in millisatoshis.
        #[prost(uint32, tag = "3")]
        pub base_msat: u32,
        /// Liquidity-based routing fee in millionths of a routed amount.
        /// In other words, 10000 is 1%.
        #[prost(uint32, tag = "4")]
        pub proportional_millionths: u32,
        /// The difference in CLTV values between this node and the next node.
        #[prost(uint32, tag = "5")]
        pub cltv_expiry_delta: u32,
        /// The minimum value, in msat, which must be relayed to the next hop.
        #[prost(uint64, optional, tag = "6")]
        pub htlc_minimum_msat: ::core::option::Option<u64>,
        /// The maximum value in msat available for routing with a single HTLC.
        #[prost(uint64, optional, tag = "7")]
        pub htlc_maximum_msat: ::core::option::Option<u64>,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct RouteHint {
        /// Hops that make up a route hint to the associated lightning node
        #[prost(message, repeated, tag = "1")]
        pub hops: ::prost::alloc::vec::Vec<RouteHintHop>,
    }
}
/// Generated client implementations.
pub mod gateway_lightning_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    ///
    /// GatewayLightning is a service that provides limited access and functionality
    /// from a lightning node to Fedimint gateways
    #[derive(Debug, Clone)]
    pub struct GatewayLightningClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl GatewayLightningClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: std::convert::TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> GatewayLightningClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> GatewayLightningClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + Send + Sync,
        {
            GatewayLightningClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// GetNodeInfo returns the public key and alias of the associated lightning node
        pub async fn get_node_info(
            &mut self,
            request: impl tonic::IntoRequest<super::EmptyRequest>,
        ) -> Result<tonic::Response<super::GetNodeInfoResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/gatewaylnrpc.GatewayLightning/GetNodeInfo",
            );
            self.inner.unary(request.into_request(), path, codec).await
        }
        /// GetRouteHints returns the route hints to the associated lightning node
        pub async fn get_route_hints(
            &mut self,
            request: impl tonic::IntoRequest<super::EmptyRequest>,
        ) -> Result<tonic::Response<super::GetRouteHintsResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/gatewaylnrpc.GatewayLightning/GetRouteHints",
            );
            self.inner.unary(request.into_request(), path, codec).await
        }
        ///
        /// PayInvoice attempts to pay an invoice using the associated lightning node
        pub async fn pay_invoice(
            &mut self,
            request: impl tonic::IntoRequest<super::PayInvoiceRequest>,
        ) -> Result<tonic::Response<super::PayInvoiceResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/gatewaylnrpc.GatewayLightning/PayInvoice",
            );
            self.inner.unary(request.into_request(), path, codec).await
        }
        ///
        /// RouteHtlcs opens a bi-directional stream for the client to receive intercepted
        /// HTLCs. `InterceptHtlcRequest` is sent from the server to alert the client that
        /// an HTLC has been intercepted and needs to be processed. The client is expected
        /// to response with `InterceptHtlcResponse` after the HTLC has been processed with
        /// the appropriate action (Settle, Forward, Cancel).
        pub async fn route_htlcs(
            &mut self,
            request: impl tonic::IntoRequest<super::EmptyRequest>,
        ) -> Result<
            tonic::Response<tonic::codec::Streaming<super::InterceptHtlcRequest>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/gatewaylnrpc.GatewayLightning/RouteHtlcs",
            );
            self.inner.server_streaming(request.into_request(), path, codec).await
        }
        pub async fn complete_htlc(
            &mut self,
            request: impl tonic::IntoRequest<super::InterceptHtlcResponse>,
        ) -> Result<tonic::Response<super::EmptyResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/gatewaylnrpc.GatewayLightning/CompleteHtlc",
            );
            self.inner.unary(request.into_request(), path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod gateway_lightning_server {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with GatewayLightningServer.
    #[async_trait]
    pub trait GatewayLightning: Send + Sync + 'static {
        /// GetNodeInfo returns the public key and alias of the associated lightning node
        async fn get_node_info(
            &self,
            request: tonic::Request<super::EmptyRequest>,
        ) -> Result<tonic::Response<super::GetNodeInfoResponse>, tonic::Status>;
        /// GetRouteHints returns the route hints to the associated lightning node
        async fn get_route_hints(
            &self,
            request: tonic::Request<super::EmptyRequest>,
        ) -> Result<tonic::Response<super::GetRouteHintsResponse>, tonic::Status>;
        ///
        /// PayInvoice attempts to pay an invoice using the associated lightning node
        async fn pay_invoice(
            &self,
            request: tonic::Request<super::PayInvoiceRequest>,
        ) -> Result<tonic::Response<super::PayInvoiceResponse>, tonic::Status>;
        /// Server streaming response type for the RouteHtlcs method.
        type RouteHtlcsStream: futures_core::Stream<
                Item = Result<super::InterceptHtlcRequest, tonic::Status>,
            >
            + Send
            + 'static;
        ///
        /// RouteHtlcs opens a bi-directional stream for the client to receive intercepted
        /// HTLCs. `InterceptHtlcRequest` is sent from the server to alert the client that
        /// an HTLC has been intercepted and needs to be processed. The client is expected
        /// to response with `InterceptHtlcResponse` after the HTLC has been processed with
        /// the appropriate action (Settle, Forward, Cancel).
        async fn route_htlcs(
            &self,
            request: tonic::Request<super::EmptyRequest>,
        ) -> Result<tonic::Response<Self::RouteHtlcsStream>, tonic::Status>;
        async fn complete_htlc(
            &self,
            request: tonic::Request<super::InterceptHtlcResponse>,
        ) -> Result<tonic::Response<super::EmptyResponse>, tonic::Status>;
    }
    ///
    /// GatewayLightning is a service that provides limited access and functionality
    /// from a lightning node to Fedimint gateways
    #[derive(Debug)]
    pub struct GatewayLightningServer<T: GatewayLightning> {
        inner: _Inner<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
    }
    struct _Inner<T>(Arc<T>);
    impl<T: GatewayLightning> GatewayLightningServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            let inner = _Inner(inner);
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for GatewayLightningServer<T>
    where
        T: GatewayLightning,
        B: Body + Send + 'static,
        B::Error: Into<StdError> + Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            let inner = self.inner.clone();
            match req.uri().path() {
                "/gatewaylnrpc.GatewayLightning/GetNodeInfo" => {
                    #[allow(non_camel_case_types)]
                    struct GetNodeInfoSvc<T: GatewayLightning>(pub Arc<T>);
                    impl<
                        T: GatewayLightning,
                    > tonic::server::UnaryService<super::EmptyRequest>
                    for GetNodeInfoSvc<T> {
                        type Response = super::GetNodeInfoResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::EmptyRequest>,
                        ) -> Self::Future {
                            let inner = self.0.clone();
                            let fut = async move {
                                (*inner).get_node_info(request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = GetNodeInfoSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/gatewaylnrpc.GatewayLightning/GetRouteHints" => {
                    #[allow(non_camel_case_types)]
                    struct GetRouteHintsSvc<T: GatewayLightning>(pub Arc<T>);
                    impl<
                        T: GatewayLightning,
                    > tonic::server::UnaryService<super::EmptyRequest>
                    for GetRouteHintsSvc<T> {
                        type Response = super::GetRouteHintsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::EmptyRequest>,
                        ) -> Self::Future {
                            let inner = self.0.clone();
                            let fut = async move {
                                (*inner).get_route_hints(request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = GetRouteHintsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/gatewaylnrpc.GatewayLightning/PayInvoice" => {
                    #[allow(non_camel_case_types)]
                    struct PayInvoiceSvc<T: GatewayLightning>(pub Arc<T>);
                    impl<
                        T: GatewayLightning,
                    > tonic::server::UnaryService<super::PayInvoiceRequest>
                    for PayInvoiceSvc<T> {
                        type Response = super::PayInvoiceResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::PayInvoiceRequest>,
                        ) -> Self::Future {
                            let inner = self.0.clone();
                            let fut = async move { (*inner).pay_invoice(request).await };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = PayInvoiceSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/gatewaylnrpc.GatewayLightning/RouteHtlcs" => {
                    #[allow(non_camel_case_types)]
                    struct RouteHtlcsSvc<T: GatewayLightning>(pub Arc<T>);
                    impl<
                        T: GatewayLightning,
                    > tonic::server::ServerStreamingService<super::EmptyRequest>
                    for RouteHtlcsSvc<T> {
                        type Response = super::InterceptHtlcRequest;
                        type ResponseStream = T::RouteHtlcsStream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::EmptyRequest>,
                        ) -> Self::Future {
                            let inner = self.0.clone();
                            let fut = async move { (*inner).route_htlcs(request).await };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = RouteHtlcsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            );
                        let res = grpc.server_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/gatewaylnrpc.GatewayLightning/CompleteHtlc" => {
                    #[allow(non_camel_case_types)]
                    struct CompleteHtlcSvc<T: GatewayLightning>(pub Arc<T>);
                    impl<
                        T: GatewayLightning,
                    > tonic::server::UnaryService<super::InterceptHtlcResponse>
                    for CompleteHtlcSvc<T> {
                        type Response = super::EmptyResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::InterceptHtlcResponse>,
                        ) -> Self::Future {
                            let inner = self.0.clone();
                            let fut = async move {
                                (*inner).complete_htlc(request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = CompleteHtlcSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        Ok(
                            http::Response::builder()
                                .status(200)
                                .header("grpc-status", "12")
                                .header("content-type", "application/grpc")
                                .body(empty_body())
                                .unwrap(),
                        )
                    })
                }
            }
        }
    }
    impl<T: GatewayLightning> Clone for GatewayLightningServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
            }
        }
    }
    impl<T: GatewayLightning> Clone for _Inner<T> {
        fn clone(&self) -> Self {
            Self(self.0.clone())
        }
    }
    impl<T: std::fmt::Debug> std::fmt::Debug for _Inner<T> {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            write!(f, "{:?}", self.0)
        }
    }
    impl<T: GatewayLightning> tonic::server::NamedService for GatewayLightningServer<T> {
        const NAME: &'static str = "gatewaylnrpc.GatewayLightning";
    }
}


