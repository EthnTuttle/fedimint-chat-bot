logo [../../static.files/rust-logo-151179464ae7ed46.svg]../../fedimint_core/index.html
? [../../help.html]
Change settings [../../static.files/wheel-5ec35bf9ca753509.svg]../../settings.html

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
235
236
237
238
239
240
241
242
243
244
245
246
247
248
249
250
251
252
253
254
255
256
257
258
259
260
261
262
263
264
265
266
267
268
269
270
271
272
273
274
275
276
277
278
279
280
281
282
283
284
285
286
287
288
289
290
291
292
293
294
295
296
297
298
299
300
301
302
303
304
305
306
307
308
309
310
311
312
313
314
315
316
317
318
319
320
321
322
323
324
325
326
327
328
329
330
331
332
333
334
335
336
337
338
339
340
341
342
343
344
345
346
347
348
349
350
351
352
353
354
355
356
357
358
359
360
361
362
363
364
365
366
367
368
369
370
371
372
373
374
375
376
377
378
379
380
381
382
383
384
385
386
387
388
389
390
391
392
393
394
395
396
397
398
399
400
401
402
403
404
405
406
407
408
409
410
411
412
413
414
415
416
417
418
419
420
421
422
423
424
425
426
427
428
429
430
431
432
433
434
435
436
437
438
439
440
441
442
443
444
445
446
447
448
449
450
451
452
453
454
455
456
457
458
459
460
461
462
463
464
465
466
467
468
469
470
471
472
473
474
475
476
477
478
479
480
481
482
483
484
485
486
487
488
489
490
491
492
493
494
495
496
497
498
499
500
501
502
503
504
505
506
507
508
509
510
511
512
513
514
515
516
517
518
519
520
521
522
523
524
525
526
527
528
529
530
531
532
533
534
535
536
537
538
539
540
541
542
543
544
545
546
547
548
549
550
551
552
553
554
555
556
557
558
559
560
561
562
563
564
565
566
567
568
569
570
571
572


use std::collections::{BTreeMap, BTreeSet, HashSet};
use std::fmt::Debug;
use std::mem;
use std::time::{Duration, SystemTime};

use anyhow::format_err;
use fedimint_core::task::{MaybeSend, MaybeSync};
use fedimint_core::time::now;
use fedimint_core::{maybe_add_send_sync, PeerId};
use tracing::debug;

use crate::api::{self, ApiVersionSet, MemberError};
use crate::module::{
    ApiVersion, SupportedApiVersionsSummary, SupportedCoreApiVersions, SupportedModuleApiVersions,
};

/// Returns a result from the first responding peer
pub struct TrustAllPeers;

impl<R> QueryStrategy<R> for TrustAllPeers {
    fn process(&mut self, peer: PeerId, result: api::MemberResult<R>) -> QueryStep<R> {
        match result {
            Ok(o) => QueryStep::Success(o),
            Err(e) => QueryStep::FailMembers(BTreeMap::from([(peer, e)])),
        }
    }
}

/// Returns first response with a valid signature
pub struct VerifiableResponse<R> {
    verifier: Box<maybe_add_send_sync!(dyn Fn(&R) -> bool)>,
    allow_consensus_fallback: bool,
    current: CurrentConsensus<R>,
}

impl<R> VerifiableResponse<R> {
    /// Strategy for returning first response that is verifiable (typically with
    /// a signature)
    ///
    /// * `required`: How many responses until a failure or success is returned
    /// * `allow_consensus_fallback`: Returns a success if cannot verify but
    ///   `required` agree
    /// * `verifier`: Function that verifies the data with the public key
    pub fn new(
        required: usize,
        allow_consensus_fallback: bool,
        verifier: impl Fn(&R) -> bool + MaybeSend + MaybeSync + 'static,
    ) -> Self {
        Self {
            verifier: Box::new(verifier),
            allow_consensus_fallback,
            current: CurrentConsensus::new(required),
        }
    }
}

impl<R: Debug + Eq + Clone> QueryStrategy<R> for VerifiableResponse<R> {
    fn process(&mut self, peer: PeerId, result: api::MemberResult<R>) -> QueryStep<R> {
        match result {
            Ok(result) if (self.verifier)(&result) => QueryStep::Success(result),
            Ok(result) => {
                if self.allow_consensus_fallback {
                    self.current.process(peer, Ok(result))
                } else {
                    self.current.process(
                        peer,
                        Err(MemberError::InvalidResponse(
                            "Invalid signature".to_string(),
                        )),
                    )
                }
            }
            error => self.current.process(peer, error),
        }
    }
}

/// Returns the deduplicated union of `required` number of responses
pub struct UnionResponses<R> {
    responses: HashSet<PeerId>,
    existing_results: Vec<R>,
    current: CurrentConsensus<Vec<R>>,
    required: usize,
}

impl<R> UnionResponses<R> {
    pub fn new(required: usize) -> Self {
        Self {
            responses: HashSet::new(),
            existing_results: vec![],
            current: CurrentConsensus::new(required),
            required,
        }
    }
}

impl<R: Debug + Eq + Clone> QueryStrategy<Vec<R>> for UnionResponses<R> {
    fn process(&mut self, peer: PeerId, results: api::MemberResult<Vec<R>>) -> QueryStep<Vec<R>> {
        if let Ok(results) = results {
            for new_result in results {
                if !self.existing_results.iter().any(|r| r == &new_result) {
                    self.existing_results.push(new_result);
                }
            }

            self.responses.insert(peer);

            if self.responses.len() >= self.required {
                QueryStep::Success(mem::take(&mut self.existing_results))
            } else {
                QueryStep::Continue
            }
        } else {
            // handle error case using the CurrentConsensus method
            self.current.process(peer, results)
        }
    }
}

/// Returns the deduplicated union of `required` number of responses
///
/// Unlike [`UnionResponses`], it works with single values, not `Vec`s.
/// TODO: Should we make `UnionResponses` a wrapper around this one?
pub struct UnionResponsesSingle<R> {
    responses: HashSet<PeerId>,
    existing_results: Vec<R>,
    current: CurrentConsensus<Vec<R>>,
    required: usize,
}

impl<R> UnionResponsesSingle<R> {
    pub fn new(required: usize) -> Self {
        Self {
            responses: HashSet::new(),
            existing_results: vec![],
            current: CurrentConsensus::new(required),
            required,
        }
    }
}

impl<R: Debug + Eq + Clone> QueryStrategy<R, Vec<R>> for UnionResponsesSingle<R> {
    fn process(&mut self, peer: PeerId, result: api::MemberResult<R>) -> QueryStep<Vec<R>> {
        match result {
            Ok(new_result) => {
                if !self.existing_results.iter().any(|r| r == &new_result) {
                    self.existing_results.push(new_result);
                }

                self.responses.insert(peer);

                if self.responses.len() >= self.required {
                    QueryStep::Success(mem::take(&mut self.existing_results))
                } else {
                    QueryStep::Continue
                }
            }
            Err(e) => {
                // handle error case using the CurrentConsensus method
                self.current.process(peer, Err(e))
            }
        }
    }
}

/// Returns when `required` responses are equal, retrying after every `required`
/// responses
// FIXME: should be replaced by queries for specific epochs in case we cannot
// get enough responses FIXME: for any single epoch
pub struct EventuallyConsistent<R> {
    responses: BTreeSet<PeerId>,
    current: CurrentConsensus<R>,
    required: usize,
}

impl<R> EventuallyConsistent<R> {
    pub fn new(required: usize) -> Self {
        Self {
            responses: BTreeSet::new(),
            current: CurrentConsensus::new(required),
            required,
        }
    }
}

impl<R: Eq + Clone + Debug> QueryStrategy<R> for EventuallyConsistent<R> {
    fn process(&mut self, peer: PeerId, result: api::MemberResult<R>) -> QueryStep<R> {
        self.responses.insert(peer);

        match self.current.process(peer, result) {
            QueryStep::Continue if self.responses.len() >= self.required => {
                let result = QueryStep::RetryMembers(self.responses.clone());
                self.responses.clear();
                result
            }
            result => result,
        }
    }
}

/// Returns when `required` responses are equal
pub struct CurrentConsensus<R> {
    /// Previously received responses/results
    ///
    /// Since we don't expect a lot of different responses,
    /// it's easier to store them in `Vec` and do a linear search
    /// than required `R: Ord` or `R: Hash`.
    pub existing_results: Vec<(R, HashSet<PeerId>)>,
    pub errors: BTreeMap<PeerId, MemberError>,
    required: usize,
}

impl<R> CurrentConsensus<R> {
    pub fn new(required: usize) -> Self {
        Self {
            existing_results: vec![],
            errors: BTreeMap::new(),
            required,
        }
    }
}

impl<R: Eq + Clone + Debug> QueryStrategy<R> for CurrentConsensus<R> {
    fn process(&mut self, peer: PeerId, result: api::MemberResult<R>) -> QueryStep<R> {
        match result {
            Ok(result) => {
                if let Some((prev_result, peers)) = self
                    .existing_results
                    .iter_mut()
                    .find(|(prev_result, _)| prev_result == &result)
                {
                    if peers.contains(&peer) {
                        debug!(prev = ?prev_result, new = ?result, peer = %peer, "Ignoring duplicate response from peer");
                    } else {
                        peers.insert(peer);
                    }
                } else {
                    self.existing_results.push((result, HashSet::from([peer])));
                }
            }
            Err(error) => {
                self.errors.insert(peer, error);
            }
        }

        for (result, peers) in &self.existing_results {
            if peers.len() >= self.required {
                return QueryStep::Success(result.clone());
            }
        }

        if self.errors.len() >= self.required {
            return QueryStep::Failure {
                general: None,
                members: mem::take(&mut self.errors),
            };
        }

        QueryStep::Continue
    }
}

/// Query strategy that returns when all peers responded or a deadline passed
pub struct AllOrDeadline<R> {
    deadline: SystemTime,
    num_peers: usize,
    responses: BTreeMap<PeerId, R>,
}

impl<R> AllOrDeadline<R> {
    pub fn new(num_peers: usize, deadline: SystemTime) -> Self {
        Self {
            deadline,
            num_peers,
            responses: BTreeMap::default(),
        }
    }
}

impl<R> QueryStrategy<R, BTreeMap<PeerId, R>> for AllOrDeadline<R> {
    fn process(
        &mut self,
        peer_id: PeerId,
        response: api::MemberResult<R>,
    ) -> QueryStep<BTreeMap<PeerId, R>> {
        assert!(!self.responses.contains_key(&peer_id));
        let step = match response {
            Ok(o) => {
                self.responses.insert(peer_id, o);

                if self.responses.len() == self.num_peers {
                    return QueryStep::Success(mem::take(&mut self.responses));
                }
                QueryStep::Continue
            }
            // we rely on retries and timeouts to detect a deadline passing
            Err(_e) => QueryStep::RetryMembers(BTreeSet::from([peer_id])),
        };

        if self.deadline <= now() {
            return QueryStep::Success(mem::take(&mut self.responses));
        }

        step
    }
}

/// Query for supported api versions from all the guardians (with a deadline)
/// and calculate the best versions to use for each component (core + modules).
pub struct DiscoverApiVersionSet {
    inner: AllOrDeadline<SupportedApiVersionsSummary>,
    client_versions: SupportedApiVersionsSummary,
}

impl DiscoverApiVersionSet {
    pub fn new(
        num_peers: usize,
        deadline: SystemTime,
        client_versions: SupportedApiVersionsSummary,
    ) -> Self {
        Self {
            inner: AllOrDeadline::new(num_peers, deadline),
            client_versions,
        }
    }
}

fn discover_common_core_api_version(
    client_versions: &SupportedCoreApiVersions,
    peer_versions: BTreeMap<PeerId, SupportedCoreApiVersions>,
) -> Option<ApiVersion> {
    let mut best_major = None;
    let mut best_major_peer_num = 0;

    for client_api_version in &client_versions.api {
        let peers_compatible_num = peer_versions
            .values()
            .filter(|supported_versions| {
                (supported_versions.core_consensus == client_versions.core_consensus)
                    .then(|| {
                        supported_versions
                            .api
                            .get_by_major(client_api_version.major)
                    })
                    .flatten()
                    .map(|peer_version| client_api_version.minor <= peer_version.minor)
                    .unwrap_or(false)
            })
            .count();

        if best_major_peer_num < peers_compatible_num {
            best_major = Some(client_api_version);
            best_major_peer_num = peers_compatible_num;
        }
    }

    best_major
}

#[test]
fn discover_common_core_api_version_sanity() {
    use fedimint_core::module::MultiApiVersion;

    let core_consensus = 0.into();
    let client_versions = SupportedCoreApiVersions {
        core_consensus,
        api: MultiApiVersion::try_from_iter([
            ApiVersion { major: 2, minor: 3 },
            ApiVersion { major: 3, minor: 1 },
        ])
        .unwrap(),
    };

    assert!(discover_common_core_api_version(&client_versions, BTreeMap::from([])).is_none());
    assert_eq!(
        discover_common_core_api_version(
            &client_versions,
            BTreeMap::from([(
                PeerId(0),
                SupportedCoreApiVersions {
                    core_consensus: 0.into(),
                    api: MultiApiVersion::try_from_iter([ApiVersion { major: 2, minor: 4 }])
                        .unwrap(),
                }
            )])
        ),
        Some(ApiVersion { major: 2, minor: 3 })
    );
    assert_eq!(
        discover_common_core_api_version(
            &client_versions,
            BTreeMap::from([(
                PeerId(0),
                SupportedCoreApiVersions {
                    core_consensus: 1.into(), // wrong consensus version
                    api: MultiApiVersion::try_from_iter([ApiVersion { major: 2, minor: 4 }])
                        .unwrap(),
                }
            )])
        ),
        None
    );
    assert_eq!(
        discover_common_core_api_version(
            &client_versions,
            BTreeMap::from([
                (
                    PeerId(0),
                    SupportedCoreApiVersions {
                        core_consensus,
                        api: MultiApiVersion::try_from_iter([ApiVersion { major: 2, minor: 2 }])
                            .unwrap(),
                    }
                ),
                (
                    PeerId(1),
                    SupportedCoreApiVersions {
                        core_consensus,
                        api: MultiApiVersion::try_from_iter([ApiVersion { major: 2, minor: 1 }])
                            .unwrap(),
                    }
                ),
                (
                    PeerId(1),
                    SupportedCoreApiVersions {
                        core_consensus,
                        api: MultiApiVersion::try_from_iter([ApiVersion { major: 3, minor: 1 }])
                            .unwrap(),
                    }
                )
            ])
        ),
        Some(ApiVersion { major: 3, minor: 1 })
    );
}

fn discover_common_module_api_version(
    client_versions: &SupportedModuleApiVersions,
    peer_versions: BTreeMap<PeerId, SupportedModuleApiVersions>,
) -> Option<ApiVersion> {
    let mut best_major = None;
    let mut best_major_peer_num = 0;

    for client_api_version in &client_versions.api {
        let peers_compatible_num = peer_versions
            .values()
            .filter(|supported_versions| {
                (supported_versions.core_consensus == client_versions.core_consensus
                    && supported_versions.module_consensus == client_versions.module_consensus)
                    .then(|| {
                        supported_versions
                            .api
                            .get_by_major(client_api_version.major)
                    })
                    .flatten()
                    .map(|peer_version| client_api_version.minor <= peer_version.minor)
                    .unwrap_or(false)
            })
            .count();

        if best_major_peer_num < peers_compatible_num {
            best_major = Some(client_api_version);
            best_major_peer_num = peers_compatible_num;
        }
    }

    best_major
}

fn discover_common_api_versions_set(
    client_versions: &SupportedApiVersionsSummary,
    peer_versions: BTreeMap<PeerId, SupportedApiVersionsSummary>,
) -> anyhow::Result<ApiVersionSet> {
    Ok(ApiVersionSet {
        core: discover_common_core_api_version(
            &client_versions.core,
            peer_versions
                .iter()
                .map(|(peer_id, peer_supported_api_versions)| {
                    (*peer_id, peer_supported_api_versions.core.clone())
                })
                .collect(),
        )
        .ok_or_else(|| format_err!("Could not find a common core API version"))?,
        modules: client_versions
            .modules
            .iter()
            .filter_map(
                |(module_instance_id, client_supported_module_api_versions)| {
                    let discover_common_module_api_version = discover_common_module_api_version(
                        client_supported_module_api_versions,
                        peer_versions
                            .iter()
                            .filter_map(|(peer_id, peer_supported_api_versions_summary)| {
                                peer_supported_api_versions_summary
                                    .modules
                                    .get(module_instance_id)
                                    .map(|versions| (*peer_id, versions.clone()))
                            })
                            .collect(),
                    );
                    discover_common_module_api_version.map(|v| (*module_instance_id, v))
                },
            )
            .collect(),
    })
}

impl QueryStrategy<SupportedApiVersionsSummary, ApiVersionSet> for DiscoverApiVersionSet {
    fn request_timeout(&self) -> Option<Duration> {
        Some(
            self.inner
                .deadline
                .duration_since(fedimint_core::time::now())
                .unwrap_or(Duration::ZERO),
        )
    }

    fn process(
        &mut self,
        peer: PeerId,
        result: api::MemberResult<SupportedApiVersionsSummary>,
    ) -> QueryStep<ApiVersionSet> {
        match self.inner.process(peer, result) {
            QueryStep::Success(o) => {
                match discover_common_api_versions_set(&self.client_versions, o) {
                    Ok(o) => QueryStep::Success(o),
                    Err(e) => QueryStep::Failure {
                        general: Some(e),
                        members: BTreeMap::new(),
                    },
                }
            }
            QueryStep::RetryMembers(v) => QueryStep::RetryMembers(v),
            QueryStep::FailMembers(v) => QueryStep::FailMembers(v),
            QueryStep::Continue => QueryStep::Continue,
            QueryStep::Failure { general, members } => QueryStep::Failure { general, members },
        }
    }
}

pub trait QueryStrategy<IR, OR = IR> {
    /// Should requests for this strategy have specific timeouts?
    fn request_timeout(&self) -> Option<Duration> {
        None
    }
    fn process(&mut self, peer_id: PeerId, response: api::MemberResult<IR>) -> QueryStep<OR>;
}

/// Results from the strategy handling a response from a peer
///
/// Note that the implementation driving the [`QueryStrategy`] returning
/// [`QueryStep`] is responsible from remembering and collecting errors
/// for each peer.
#[derive(Debug)]
pub enum QueryStep<R> {
    /// Retry request to this peer
    RetryMembers(BTreeSet<PeerId>),
    /// Fail these members and remember their errors
    FailMembers(BTreeMap<PeerId, MemberError>),
    /// Do nothing yet, keep waiting for requests
    Continue,
    /// Return the successful result
    Success(R),
    /// Fail the whole request and remember errors from given members
    /// Note: member errors are to be added to any errors previously returned
    /// with `FailMembers`
    Failure {
        general: Option<anyhow::Error>,
        members: BTreeMap<PeerId, MemberError>,
    },
}


