logo [../../static.files/rust-logo-151179464ae7ed46.svg]../../fedimint_core/index.html
? [../../help.html]
Change settings [../../static.files/wheel-5ec35bf9ca753509.svg]../../settings.html

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
235
236
237
238
239
240
241
242
243
244
245
246
247
248
249
250
251
252
253
254
255
256
257
258
259
260
261
262
263
264
265
266
267
268
269
270
271
272
273
274
275
276
277
278
279
280
281
282
283
284
285
286
287
288
289
290
291
292
293
294
295
296
297
298
299
300
301
302
303
304
305
306
307
308
309
310
311
312
313
314
315
316
317
318
319
320
321
322
323
324
325
326
327
328
329
330
331
332
333
334
335
336
337
338
339
340
341
342
343
344
345
346
347
348
349
350
351
352
353
354
355
356
357
358
359
360
361
362
363
364
365
366
367
368
369
370
371
372
373
374
375
376
377
378
379
380
381
382
383
384
385
386
387
388
389
390
391
392
393
394
395
396
397
398
399
400
401
402
403
404
405
406
407
408
409
410
411
412
413
414
415
416
417
418
419
420
421
422
423
424
425
426
427
428
429
430
431


use std::collections::{BTreeMap, BTreeSet};

use bitcoin_hashes::sha256::Hash as Sha256;
use fedimint_core::core::DynModuleConsensusItem as ModuleConsensusItem;
use fedimint_core::encoding::{Decodable, DecodeError, Encodable, UnzipConsensus};
use fedimint_core::module::registry::ModuleDecoderRegistry;
use fedimint_core::module::SerdeModuleEncoding;
use fedimint_core::{PeerId, TransactionId};
use itertools::Itertools;
use serde::{Deserialize, Serialize};
use threshold_crypto::{PublicKey, PublicKeySet, Signature, SignatureShare};

use crate::timing;
use crate::transaction::Transaction;

/// All the items that may be produced during a consensus epoch
#[derive(Debug, Clone, Eq, PartialEq, Hash, UnzipConsensus, Encodable, Decodable)]
pub enum ConsensusItem {
    /// Fed shutdown occurs once a threshold want to upgrade
    ConsensusUpgrade(ConsensusUpgrade),
    /// Threshold sign the configs for verification via the API
    ClientConfigSignatureShare(SerdeSignatureShare),
    /// Threshold sign the epoch history for verification via the API
    EpochOutcomeSignatureShare(SerdeSignatureShare),
    /// Fedimint tx that contains module inputs and outputs that are net
    /// equal
    Transaction(Transaction),
    /// Any data that modules require consensus on
    Module(ModuleConsensusItem),
}

/// May eventually contains consensus info about the upgrade
#[derive(Debug, Clone, Eq, PartialEq, Hash, Encodable, Decodable)]
pub struct ConsensusUpgrade;

pub type SerdeConsensusItem = SerdeModuleEncoding<ConsensusItem>;

#[derive(Debug, Clone, Eq, PartialEq, Hash, Serialize, Deserialize)]
pub struct SerdeSignatureShare(pub SignatureShare);

#[derive(Debug, Clone, Eq, PartialEq, Hash, Serialize, Deserialize)]
pub struct SerdeSignature(pub Signature);

#[derive(Debug, Clone, Eq, PartialEq, Hash, Encodable, Decodable)]
pub struct SignedEpochOutcome {
    pub outcome: EpochOutcome,
    pub hash: Sha256,
    pub signature: Option<SerdeSignature>,
}

pub type SerdeEpochHistory = SerdeModuleEncoding<SignedEpochOutcome>;

/// Combines signature shares from peers, ignoring bad signatures to avoid a DoS
/// attack.  If not enough valid shares, returns the peers that were valid.
pub fn combine_sigs<M: AsRef<[u8]>>(
    pks: &PublicKeySet,
    shares: &BTreeMap<PeerId, SerdeSignatureShare>,
    msg: &M,
) -> Result<SerdeSignature, BTreeSet<PeerId>> {
    // Remove bad sigs
    let mut valid_peers = BTreeSet::new();
    let valid_shares = shares.iter().filter_map(|(peer, share)| {
        if pks.public_key_share(peer.to_usize()).verify(&share.0, msg) {
            valid_peers.insert(*peer);
            Some((peer.to_usize(), &share.0))
        } else {
            None
        }
    });

    match pks.combine_signatures(valid_shares) {
        Ok(sig) => Ok(SerdeSignature(sig)),
        Err(_) => Err(valid_peers),
    }
}

#[derive(Debug, Clone, Eq, PartialEq, Hash, Encodable, Decodable)]
pub struct EpochOutcome {
    pub epoch: u64,
    pub last_hash: Option<Sha256>,
    /// All the consensus items along with the `PeerId` of the
    /// peer that contributed them.
    /// Some of the consensus items here might be invalid,
    /// (eg. transaction double-spending) but they were still
    /// submitted and considered as accepted.
    // TODO: It would be better to encode this as `Vec<(ConsensusItem, Vec<PeerId>)>`
    // to avoid duplicates (and make iterating over it nicer too in a lot of uses).
    pub items: Vec<(PeerId, Vec<ConsensusItem>)>,

    /// Transactions from `items` that turned out to be invalid.
    pub rejected_txs: BTreeSet<TransactionId>,
}

impl SignedEpochOutcome {
    pub fn new(
        epoch: u64,
        contributions: BTreeMap<PeerId, Vec<ConsensusItem>>,
        rejected_txs: BTreeSet<TransactionId>,
        prev_epoch: Option<&SignedEpochOutcome>,
    ) -> Self {
        let items = contributions
            .into_iter()
            .sorted_by_key(|(peer, _)| *peer)
            .collect();
        let outcome = EpochOutcome {
            last_hash: prev_epoch.map(|epoch| epoch.hash),
            items,
            epoch,
            rejected_txs,
        };

        SignedEpochOutcome {
            hash: outcome.consensus_hash(),
            outcome,
            signature: None,
        }
    }

    pub fn add_sig_to_prev(
        &self,
        pks: &PublicKeySet,
        mut prev_epoch: SignedEpochOutcome,
    ) -> Result<SignedEpochOutcome, EpochVerifyError> {
        let _timing /* logs on drop */ = timing::TimeReporter::new("add sig to prev");
        let sigs: BTreeMap<_, _> = self
            .outcome
            .items
            .iter()
            .flat_map(|(peer, items)| items.iter().map(|i| (*peer, i)))
            .filter_map(|(peer, item)| match item {
                ConsensusItem::EpochOutcomeSignatureShare(sig) => Some((peer, sig.clone())),
                _ => None,
            })
            .collect();

        prev_epoch.signature = Some(combine_sigs(pks, &sigs, &prev_epoch.hash)?);
        Ok(prev_epoch)
    }

    pub fn verify_sig(&self, pk: &PublicKey) -> Result<(), EpochVerifyError> {
        if let Some(sig) = &self.signature {
            let _timing /* logs on drop */ = timing::TimeReporter::new("verify epoch outcome signature");
            if !pk.verify(&sig.0, self.hash) {
                return Err(EpochVerifyError::InvalidSignature);
            }
        } else {
            return Err(EpochVerifyError::MissingSignature);
        }

        Ok(())
    }

    pub fn verify_hash(
        &self,
        prev_epoch: &Option<SignedEpochOutcome>,
    ) -> Result<(), EpochVerifyError> {
        let _timing /* logs on drop */ = timing::TimeReporter::new("verify epoch outcome hash");
        if self.outcome.epoch > 0 {
            match prev_epoch {
                None => return Err(EpochVerifyError::MissingPreviousEpoch),
                Some(prev_epoch) => {
                    if Some(prev_epoch.outcome.consensus_hash()) != self.outcome.last_hash {
                        return Err(EpochVerifyError::InvalidPreviousEpochHash);
                    }
                }
            }
        }

        if self.hash == self.outcome.consensus_hash() {
            Ok(())
        } else {
            Err(EpochVerifyError::InvalidEpochHash)
        }
    }
}

#[derive(Debug, PartialEq, Eq)]
pub enum EpochVerifyError {
    MissingSignature,
    InvalidSignature,
    MissingPreviousEpoch,
    InvalidEpochHash,
    InvalidPreviousEpochHash,
    NotEnoughValidSigShares(BTreeSet<PeerId>),
}

impl From<BTreeSet<PeerId>> for EpochVerifyError {
    fn from(valid_peers: BTreeSet<PeerId>) -> Self {
        EpochVerifyError::NotEnoughValidSigShares(valid_peers)
    }
}

impl Encodable for SerdeSignature {
    fn consensus_encode<W: std::io::Write>(&self, writer: &mut W) -> Result<usize, std::io::Error> {
        self.0.to_bytes().consensus_encode(writer)
    }
}

impl Decodable for SerdeSignature {
    fn consensus_decode<D: std::io::Read>(
        d: &mut D,
        _modules: &ModuleDecoderRegistry,
    ) -> Result<Self, DecodeError> {
        let mut bytes = [0u8; 96];
        d.read_exact(&mut bytes).map_err(DecodeError::from_err)?;
        Ok(SerdeSignature(Signature::from_bytes(bytes).unwrap()))
    }
}

impl Encodable for SerdeSignatureShare {
    fn consensus_encode<W: std::io::Write>(&self, writer: &mut W) -> Result<usize, std::io::Error> {
        self.0.to_bytes().consensus_encode(writer)
    }
}

impl Decodable for SerdeSignatureShare {
    fn consensus_decode<D: std::io::Read>(
        d: &mut D,
        _modules: &ModuleDecoderRegistry,
    ) -> Result<Self, DecodeError> {
        let mut bytes = [0u8; 96];
        d.read_exact(&mut bytes).map_err(DecodeError::from_err)?;
        Ok(SerdeSignatureShare(
            SignatureShare::from_bytes(bytes).unwrap(),
        ))
    }
}

#[cfg(test)]
mod tests {
    use std::collections::{BTreeMap, BTreeSet};

    use bitcoin::hashes::Hash;
    use bitcoin_hashes::sha256;
    use fedimint_core::encoding::Encodable;
    use fedimint_core::epoch::combine_sigs;
    use fedimint_core::PeerId;
    use rand::rngs::OsRng;
    use threshold_crypto::{SecretKey, SecretKeySet};

    use crate::epoch::{
        ConsensusItem, EpochOutcome, EpochVerifyError, SerdeSignature, SerdeSignatureShare, Sha256,
        SignedEpochOutcome,
    };

    fn signed_history(
        epoch: u16,
        prev_epoch: &Option<SignedEpochOutcome>,
        sk: &SecretKey,
    ) -> SignedEpochOutcome {
        let missing_sig = history(epoch, prev_epoch, None);
        let signature = sk.sign(missing_sig.outcome.consensus_hash::<sha256::Hash>());
        history(epoch, prev_epoch, Some(SerdeSignature(signature)))
    }

    fn history(
        epoch: u16,
        prev_epoch: &Option<SignedEpochOutcome>,
        signature: Option<SerdeSignature>,
    ) -> SignedEpochOutcome {
        let items = vec![(PeerId::from(epoch), vec![])];
        let outcome = EpochOutcome {
            last_hash: prev_epoch.clone().map(|epoch| epoch.hash),
            items,
            epoch: epoch as u64,
            // seems like in these tests we don't care about this one
            rejected_txs: BTreeSet::default(),
        };

        SignedEpochOutcome {
            hash: outcome.consensus_hash(),
            outcome,
            signature,
        }
    }

    #[test]
    fn combines_single_share() {
        let mut rng = OsRng;
        let sk_set = SecretKeySet::random(0, &mut rng);
        let pk_set = sk_set.public_keys();
        let msg = "test message";

        let shares = BTreeMap::from([(
            PeerId::from(0),
            SerdeSignatureShare(sk_set.secret_key_share(0).sign(msg)),
        )]);

        assert!(combine_sigs(&pk_set, &shares, &msg.to_string()).is_ok());
    }

    #[test]
    fn combines_shares() {
        let mut rng = OsRng;
        let sk_set = SecretKeySet::random(1, &mut rng);
        let pk_set = sk_set.public_keys();
        let msg = "test message";

        let mut shares = BTreeMap::from([
            (
                PeerId::from(0),
                SerdeSignatureShare(sk_set.secret_key_share(0).sign(msg)),
            ),
            (
                PeerId::from(1),
                SerdeSignatureShare(sk_set.secret_key_share(1).sign(msg)),
            ),
        ]);

        assert!(combine_sigs(&pk_set, &shares, &msg.to_string()).is_ok());

        shares.remove(&PeerId::from(0));
        assert_eq!(
            combine_sigs(&pk_set, &shares, &msg.to_string()),
            Err(BTreeSet::from([PeerId::from(1)]))
        );
    }

    #[test]
    fn adds_sig_to_prev_epoch() {
        let mut rng = OsRng;
        let sk_set = SecretKeySet::random(2, &mut rng);
        let pk_set = sk_set.public_keys();

        let epoch0 = history(0, &None, None);
        let mut epoch1 = history(1, &Some(epoch0.clone()), None);

        let peers = [PeerId::from(0), PeerId::from(1), PeerId::from(2)];
        let sigs: Vec<(PeerId, Vec<ConsensusItem>)> = peers
            .iter()
            .map(|&peer| {
                let sig = sk_set.secret_key_share(peer.to_usize()).sign(epoch0.hash);
                (
                    peer,
                    vec![ConsensusItem::EpochOutcomeSignatureShare(
                        SerdeSignatureShare(sig),
                    )],
                )
            })
            .collect();

        epoch1.outcome = EpochOutcome {
            epoch: 1,
            last_hash: None,
            items: sigs[0..1].to_vec(),
            rejected_txs: BTreeSet::default(),
        };
        let contributing = BTreeSet::from([PeerId::from(0)]);
        let result = epoch1.add_sig_to_prev(&pk_set, epoch0.clone()).unwrap_err();
        assert_eq!(
            result,
            EpochVerifyError::NotEnoughValidSigShares(contributing)
        );

        epoch1.outcome = EpochOutcome {
            epoch: 1,
            last_hash: None,
            items: sigs,
            rejected_txs: BTreeSet::default(),
        };
        let epoch0 = epoch1.add_sig_to_prev(&pk_set, epoch0).unwrap();
        assert_eq!(epoch0.verify_sig(&pk_set.public_key()), Ok(()));
    }

    #[test]
    fn verifies_hash() {
        let sk: SecretKey = SecretKey::random();
        let _pk = sk.public_key();
        let wrong_hash: Sha256 = Hash::hash(b"wrong");
        let sig = SerdeSignature(sk.sign(wrong_hash));

        let epoch0 = history(0, &None, Some(sig));
        let epoch = SignedEpochOutcome {
            outcome: epoch0.outcome,
            hash: wrong_hash,
            signature: epoch0.signature,
        };

        assert_eq!(
            epoch.verify_hash(&None),
            Err(EpochVerifyError::InvalidEpochHash)
        );
    }

    #[test]
    fn verifies_merkle_tree() {
        let sk: SecretKey = SecretKey::random();
        let _pk = sk.public_key();

        let epoch0 = signed_history(0, &None, &sk);
        let epoch1 = signed_history(1, &Some(epoch0.clone()), &sk);
        let epoch2 = signed_history(2, &Some(epoch1.clone()), &sk);

        assert_eq!(epoch0.verify_hash(&None), Ok(()));
        assert_eq!(epoch1.verify_hash(&Some(epoch0)), Ok(()));
        assert_eq!(epoch2.verify_hash(&Some(epoch1.clone())), Ok(()));

        assert_eq!(
            epoch1.verify_hash(&None),
            Err(EpochVerifyError::MissingPreviousEpoch)
        );
        assert_eq!(
            epoch1.verify_hash(&Some(epoch2)),
            Err(EpochVerifyError::InvalidPreviousEpochHash)
        );
    }

    #[test]
    fn verifies_sigs() {
        let sk: SecretKey = SecretKey::random();
        let pk = sk.public_key();

        let epoch0 = signed_history(0, &None, &sk);
        let epoch1 = signed_history(1, &Some(epoch0.clone()), &sk);

        assert_eq!(epoch0.verify_sig(&pk), Ok(()));
        assert_eq!(epoch1.verify_sig(&pk), Ok(()));

        let epoch0_wrong = history(0, &None, epoch1.signature);
        let epoch1_wrong = history(1, &Some(epoch0.clone()), epoch0.signature);

        assert_eq!(
            epoch0_wrong.verify_sig(&pk),
            Err(EpochVerifyError::InvalidSignature)
        );
        assert_eq!(
            epoch1_wrong.verify_sig(&pk),
            Err(EpochVerifyError::InvalidSignature)
        );
    }
}


