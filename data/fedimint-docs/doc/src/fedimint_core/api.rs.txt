logo [../../static.files/rust-logo-151179464ae7ed46.svg]../../fedimint_core/index.html
? [../../help.html]
Change settings [../../static.files/wheel-5ec35bf9ca753509.svg]../../settings.html

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
235
236
237
238
239
240
241
242
243
244
245
246
247
248
249
250
251
252
253
254
255
256
257
258
259
260
261
262
263
264
265
266
267
268
269
270
271
272
273
274
275
276
277
278
279
280
281
282
283
284
285
286
287
288
289
290
291
292
293
294
295
296
297
298
299
300
301
302
303
304
305
306
307
308
309
310
311
312
313
314
315
316
317
318
319
320
321
322
323
324
325
326
327
328
329
330
331
332
333
334
335
336
337
338
339
340
341
342
343
344
345
346
347
348
349
350
351
352
353
354
355
356
357
358
359
360
361
362
363
364
365
366
367
368
369
370
371
372
373
374
375
376
377
378
379
380
381
382
383
384
385
386
387
388
389
390
391
392
393
394
395
396
397
398
399
400
401
402
403
404
405
406
407
408
409
410
411
412
413
414
415
416
417
418
419
420
421
422
423
424
425
426
427
428
429
430
431
432
433
434
435
436
437
438
439
440
441
442
443
444
445
446
447
448
449
450
451
452
453
454
455
456
457
458
459
460
461
462
463
464
465
466
467
468
469
470
471
472
473
474
475
476
477
478
479
480
481
482
483
484
485
486
487
488
489
490
491
492
493
494
495
496
497
498
499
500
501
502
503
504
505
506
507
508
509
510
511
512
513
514
515
516
517
518
519
520
521
522
523
524
525
526
527
528
529
530
531
532
533
534
535
536
537
538
539
540
541
542
543
544
545
546
547
548
549
550
551
552
553
554
555
556
557
558
559
560
561
562
563
564
565
566
567
568
569
570
571
572
573
574
575
576
577
578
579
580
581
582
583
584
585
586
587
588
589
590
591
592
593
594
595
596
597
598
599
600
601
602
603
604
605
606
607
608
609
610
611
612
613
614
615
616
617
618
619
620
621
622
623
624
625
626
627
628
629
630
631
632
633
634
635
636
637
638
639
640
641
642
643
644
645
646
647
648
649
650
651
652
653
654
655
656
657
658
659
660
661
662
663
664
665
666
667
668
669
670
671
672
673
674
675
676
677
678
679
680
681
682
683
684
685
686
687
688
689
690
691
692
693
694
695
696
697
698
699
700
701
702
703
704
705
706
707
708
709
710
711
712
713
714
715
716
717
718
719
720
721
722
723
724
725
726
727
728
729
730
731
732
733
734
735
736
737
738
739
740
741
742
743
744
745
746
747
748
749
750
751
752
753
754
755
756
757
758
759
760
761
762
763
764
765
766
767
768
769
770
771
772
773
774
775
776
777
778
779
780
781
782
783
784
785
786
787
788
789
790
791
792
793
794
795
796
797
798
799
800
801
802
803
804
805
806
807
808
809
810
811
812
813
814
815
816
817
818
819
820
821
822
823
824
825
826
827
828
829
830
831
832
833
834
835
836
837
838
839
840
841
842
843
844
845
846
847
848
849
850
851
852
853
854
855
856
857
858
859
860
861
862
863
864
865
866
867
868
869
870
871
872
873
874
875
876
877
878
879
880
881
882
883
884
885
886
887
888
889
890
891
892
893
894
895
896
897
898
899
900
901
902
903
904
905
906
907
908
909
910
911
912
913
914
915
916
917
918
919
920
921
922
923
924
925
926
927
928
929
930
931
932
933
934
935
936
937
938
939
940
941
942
943
944
945
946
947
948
949
950
951
952
953
954
955
956
957
958
959
960
961
962
963
964
965
966
967
968
969
970
971
972
973
974
975
976
977
978
979
980
981
982
983
984
985
986
987
988
989
990
991
992
993
994
995
996
997
998
999
1000
1001
1002
1003
1004
1005
1006
1007
1008
1009
1010
1011
1012
1013
1014
1015
1016
1017
1018
1019
1020
1021
1022
1023
1024
1025
1026
1027
1028
1029
1030
1031
1032
1033
1034
1035
1036
1037
1038
1039
1040
1041
1042
1043
1044
1045
1046
1047
1048
1049
1050
1051
1052
1053
1054
1055
1056
1057
1058
1059
1060
1061
1062
1063
1064
1065
1066
1067
1068
1069
1070
1071
1072
1073
1074
1075
1076
1077
1078
1079
1080
1081
1082
1083
1084
1085
1086
1087
1088
1089
1090
1091
1092
1093
1094
1095
1096
1097
1098
1099
1100
1101
1102
1103
1104
1105
1106
1107
1108
1109
1110
1111
1112
1113
1114
1115
1116
1117
1118
1119
1120
1121
1122
1123
1124
1125
1126
1127
1128
1129
1130
1131
1132
1133
1134
1135
1136
1137
1138
1139
1140
1141
1142
1143
1144
1145
1146
1147
1148
1149
1150
1151
1152
1153
1154
1155
1156
1157
1158
1159
1160
1161
1162
1163
1164
1165
1166
1167
1168
1169
1170
1171
1172
1173
1174
1175
1176
1177
1178
1179
1180
1181
1182
1183
1184
1185
1186
1187
1188
1189
1190
1191
1192
1193
1194
1195
1196
1197
1198
1199
1200
1201
1202
1203
1204
1205
1206
1207
1208
1209
1210
1211
1212
1213
1214
1215
1216
1217
1218
1219
1220
1221
1222
1223
1224
1225
1226
1227
1228
1229
1230
1231
1232
1233
1234
1235
1236
1237
1238
1239
1240
1241
1242
1243
1244
1245
1246
1247
1248
1249
1250
1251
1252
1253
1254
1255
1256
1257
1258
1259
1260
1261
1262
1263
1264
1265
1266
1267
1268
1269
1270
1271
1272
1273
1274
1275
1276
1277
1278
1279
1280
1281
1282
1283
1284
1285
1286
1287
1288
1289
1290
1291


use std::borrow::Cow;
use std::collections::{BTreeMap, BTreeSet, HashMap};
use std::fmt::{self, Debug, Display, Formatter};
use std::io::{Cursor, Read};
use std::ops::Add;
use std::pin::Pin;
use std::str::FromStr;
use std::sync::Arc;
use std::time::{Duration, SystemTime};
use std::{cmp, result};

use anyhow::{anyhow, ensure};
use bech32::Variant::Bech32m;
use bech32::{FromBase32, ToBase32};
use bitcoin::secp256k1;
use bitcoin_hashes::sha256;
use fedimint_core::config::{ClientConfig, ClientConfigResponse, FederationId};
use fedimint_core::core::ModuleInstanceId;
use fedimint_core::encoding::Encodable;
use fedimint_core::fmt_utils::AbbreviateDebug;
use fedimint_core::module::registry::ModuleDecoderRegistry;
use fedimint_core::task::{MaybeSend, MaybeSync, RwLock, RwLockWriteGuard};
use fedimint_core::time::now;
use fedimint_core::{
    apply, async_trait_maybe_send, dyn_newtype_define, NumPeers, OutPoint, PeerId, TransactionId,
};
use fedimint_derive::Decodable;
use fedimint_logging::LOG_NET_API;
use futures::stream::FuturesUnordered;
use futures::{Future, StreamExt};
use jsonrpsee_core::client::ClientT;
use jsonrpsee_core::Error as JsonRpcError;
#[cfg(target_family = "wasm")]
use jsonrpsee_wasm_client::{Client as WsClient, WasmClientBuilder as WsClientBuilder};
#[cfg(not(target_family = "wasm"))]
use jsonrpsee_ws_client::{WsClient, WsClientBuilder};
use serde::{Deserialize, Serialize};
use serde_json::Value;
use thiserror::Error;
use threshold_crypto::{PublicKey, PK_SIZE};
use tracing::{debug, error, instrument, trace};
use url::Url;

use crate::backup::ClientBackupSnapshot;
use crate::core::backup::SignedBackupRequest;
use crate::core::{Decoder, OutputOutcome};
use crate::epoch::{SerdeEpochHistory, SignedEpochOutcome};
use crate::module::{ApiRequestErased, ApiVersion, SupportedApiVersionsSummary};
use crate::outcome::TransactionStatus;
use crate::query::{
    CurrentConsensus, DiscoverApiVersionSet, EventuallyConsistent, QueryStep, QueryStrategy,
    UnionResponsesSingle, VerifiableResponse,
};
use crate::task;
use crate::transaction::{SerdeTransaction, Transaction};

pub type MemberResult<T> = result::Result<T, MemberError>;

pub type JsonRpcResult<T> = result::Result<T, jsonrpsee_core::Error>;
pub type FederationResult<T> = result::Result<T, FederationError>;

/// An API request error when calling a single federation member
#[derive(Debug, Error)]
pub enum MemberError {
    #[error("Response deserialization error: {0}")]
    ResponseDeserialization(anyhow::Error),
    #[error("Invalid peer id: {peer_id}")]
    InvalidPeerId { peer_id: PeerId },
    #[error("Rpc error: {0}")]
    Rpc(#[from] JsonRpcError),
    #[error("Invalid response: {0}")]
    InvalidResponse(String),
}

impl MemberError {
    pub fn is_retryable(&self) -> bool {
        match self {
            MemberError::ResponseDeserialization(_) => false,
            MemberError::InvalidPeerId { peer_id: _ } => false,
            MemberError::Rpc(rpc_e) => match rpc_e {
                // TODO: Does this cover all retryable cases?
                JsonRpcError::Transport(_) => true,
                JsonRpcError::MaxSlotsExceeded => true,
                JsonRpcError::RequestTimeout => true,
                JsonRpcError::Call(e) => e.code() == 404,
                _ => false,
            },
            MemberError::InvalidResponse(_) => false,
        }
    }
}

/// An API request error when calling an entire federation
#[derive(Debug, Error)]
pub struct FederationError {
    general: Option<anyhow::Error>,
    members: BTreeMap<PeerId, MemberError>,
}

impl fmt::Display for FederationError {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        f.write_str("Federation rpc error {")?;
        if let Some(general) = self.general.as_ref() {
            f.write_fmt(format_args!("general => {general})"))?;
            if !self.members.is_empty() {
                f.write_str(", ")?;
            }
        }
        for (i, (peer, e)) in self.members.iter().enumerate() {
            f.write_fmt(format_args!("{peer} => {e})"))?;
            if i == self.members.len() - 1 {
                f.write_str(", ")?;
            }
        }
        f.write_str("}")?;
        Ok(())
    }
}

impl FederationError {
    pub fn is_retryable(&self) -> bool {
        self.members.iter().any(|(_, e)| e.is_retryable())
    }
}

type OutputOutcomeResult<O> = result::Result<O, OutputOutcomeError>;

#[derive(Debug, Error)]
pub enum OutputOutcomeError {
    #[error("Response deserialization error: {0}")]
    ResponseDeserialization(anyhow::Error),
    #[error("Federation error: {0}")]
    Federation(#[from] FederationError),
    #[error("Core error: {0}")]
    Core(#[from] anyhow::Error),
    #[error("Transaction rejected: {0}")]
    Rejected(String),
    #[error("Invalid output index {out_idx}, larger than {outputs_num} in the transaction")]
    InvalidVout { out_idx: u64, outputs_num: usize },
    #[error("Timeout reached after waiting {}s", .0.as_secs())]
    Timeout(Duration),
}

/// An API (module or global) that can query a federation
#[apply(async_trait_maybe_send!)]
pub trait IFederationApi: Debug + MaybeSend + MaybeSync {
    /// List of all federation members for the purpose of iterating each member
    /// in the federation.
    ///
    /// The underlying implementation is responsible for knowing how many
    /// and `PeerId`s of each. The caller of this interface most probably
    /// have some idea as well, but passing this set across every
    /// API call to the federation would be inconvenient.
    fn all_members(&self) -> &BTreeSet<PeerId>;

    fn with_module(&self, id: ModuleInstanceId) -> DynModuleApi;

    /// Make request to a specific federation member by `peer_id`
    async fn request_raw(
        &self,
        peer_id: PeerId,
        method: &str,
        params: &[Value],
    ) -> result::Result<Value, jsonrpsee_core::Error>;
}

/// Set of api versions for each component (core + modules)
///
/// E.g. result of federated common api versions discovery.
#[derive(Debug, Clone, Serialize, Deserialize, Encodable, Decodable)]
pub struct ApiVersionSet {
    pub core: ApiVersion,
    pub modules: BTreeMap<ModuleInstanceId, ApiVersion>,
}

/// An extension trait allowing to making federation-wide API call on top
/// [`IFederationApi`].
#[apply(async_trait_maybe_send!)]
pub trait FederationApiExt: IFederationApi {
    /// Make an aggregate request to federation, using `strategy` to logically
    /// merge the responses.
    async fn request_with_strategy<MemberRet: serde::de::DeserializeOwned, FedRet: Debug>(
        &self,
        mut strategy: impl QueryStrategy<MemberRet, FedRet> + MaybeSend,
        method: String,
        params: ApiRequestErased,
    ) -> FederationResult<FedRet> {
        let timeout = strategy.request_timeout();

        #[cfg(not(target_family = "wasm"))]
        let mut futures = FuturesUnordered::<Pin<Box<dyn Future<Output = _> + Send>>>::new();
        #[cfg(target_family = "wasm")]
        let mut futures = FuturesUnordered::<Pin<Box<dyn Future<Output = _>>>>::new();

        let peers = self.all_members();

        for peer_id in peers {
            futures.push(Box::pin(async {
                let request = async {
                    self.request_raw(*peer_id, &method, &[params.to_json()])
                        .await
                        .map(AbbreviateDebug)
                };

                let result = if let Some(timeout) = timeout {
                    match fedimint_core::task::timeout(timeout, request).await {
                        Ok(result) => result,
                        Err(_timeout) => Err(JsonRpcError::RequestTimeout),
                    }
                } else {
                    request.await
                };

                PeerResponse {
                    peer: *peer_id,
                    result,
                }
            }));
        }

        let mut member_delay_ms = BTreeMap::new();
        let mut member_errors = BTreeMap::new();

        // Delegates the response handling to the `QueryStrategy` with an exponential
        // back-off with every new set of requests
        let max_delay_ms = 1000;
        loop {
            let response = futures.next().await;
            trace!(?response, method, params = ?AbbreviateDebug(params.to_json()), "Received member response");
            match response {
                Some(PeerResponse { peer, result }) => {
                    let result: MemberResult<MemberRet> =
                        result.map_err(MemberError::Rpc).and_then(|o| {
                            serde_json::from_value::<MemberRet>(o.0)
                                .map_err(|e| MemberError::ResponseDeserialization(e.into()))
                        });

                    let strategy_step = strategy.process(peer, result);
                    trace!(
                        method,
                        ?params,
                        ?strategy_step,
                        "Taking strategy step to the response after member response"
                    );
                    match strategy_step {
                        QueryStep::RetryMembers(peers) => {
                            for retry_peer in peers {
                                member_errors.remove(&retry_peer);

                                let mut delay_ms =
                                    member_delay_ms.get(&retry_peer).copied().unwrap_or(10);
                                delay_ms = cmp::min(max_delay_ms, delay_ms * 2);
                                member_delay_ms.insert(retry_peer, delay_ms);

                                futures.push(Box::pin({
                                    let method = &method;
                                    let params = &params;
                                    async move {
                                        // Note: we need to sleep inside the retrying future,
                                        // so that `futures` is being polled continuously
                                        task::sleep(Duration::from_millis(delay_ms)).await;
                                        PeerResponse {
                                            peer: retry_peer,
                                            result: self
                                                .request_raw(
                                                    retry_peer,
                                                    method,
                                                    &[params.to_json()],
                                                )
                                                .await
                                                .map(AbbreviateDebug),
                                        }
                                    }
                                }));
                            }
                        }
                        QueryStep::FailMembers(failed) => {
                            for (failed_peer, error) in failed {
                                member_errors.insert(failed_peer, error);
                            }
                        }
                        QueryStep::Continue => {}
                        QueryStep::Failure { general, members } => {
                            for (failed_peer, error) in members {
                                member_errors.insert(failed_peer, error);
                            }
                            return Err(FederationError {
                                general,
                                members: member_errors,
                            });
                        }
                        QueryStep::Success(response) => return Ok(response),
                    }
                }
                None => {
                    return Err(FederationError {
                        general: None,
                        members: BTreeMap::new(),
                    })
                }
            }
        }
    }

    async fn request_current_consensus<Ret>(
        &self,
        method: String,
        params: ApiRequestErased,
    ) -> FederationResult<Ret>
    where
        Ret: serde::de::DeserializeOwned + Eq + Debug + Clone + MaybeSend,
    {
        self.request_with_strategy(
            CurrentConsensus::new(self.all_members().one_honest()),
            method,
            params,
        )
        .await
    }

    async fn request_eventually_consistent<Ret>(
        &self,
        method: String,
        params: ApiRequestErased,
    ) -> FederationResult<Ret>
    where
        Ret: serde::de::DeserializeOwned + Eq + Debug + Clone + MaybeSend,
    {
        self.request_with_strategy(
            EventuallyConsistent::new(self.all_members().one_honest()),
            method,
            params,
        )
        .await
    }
}

#[apply(async_trait_maybe_send!)]
impl<T: ?Sized> FederationApiExt for T where T: IFederationApi {}

/// Trait marker for the module (non-global) endpoints
pub trait IModuleFederationApi: IFederationApi {}

dyn_newtype_define! {
    #[derive(Clone)]
    pub DynModuleApi(Arc<IModuleFederationApi>)
}

/// Trait marker for the global (non-module) endpoints
pub trait IGlobalFederationApi: IFederationApi {}

dyn_newtype_define! {
    #[derive(Clone)]
    pub DynGlobalApi(Arc<IGlobalFederationApi>)
}

impl AsRef<dyn IGlobalFederationApi + 'static> for DynGlobalApi {
    fn as_ref(&self) -> &(dyn IGlobalFederationApi + 'static) {
        self.inner.as_ref()
    }
}

/// The API for the global (non-module) endpoints
#[apply(async_trait_maybe_send!)]
pub trait GlobalFederationApi {
    async fn submit_transaction(&self, tx: Transaction) -> FederationResult<TransactionId>;
    async fn fetch_tx_outcome(
        &self,
        txid: &TransactionId,
    ) -> FederationResult<Option<TransactionStatus>>;
    async fn await_tx_outcome(&self, txid: &TransactionId) -> FederationResult<TransactionStatus>;

    async fn fetch_epoch_history(
        &self,
        epoch: u64,
        epoch_pk: PublicKey,
        decoders: &ModuleDecoderRegistry,
    ) -> FederationResult<SignedEpochOutcome>;

    async fn fetch_epoch_count(&self) -> FederationResult<u64>;

    async fn fetch_output_outcome<R>(
        &self,
        out_point: OutPoint,
        module_decoder: &Decoder,
    ) -> OutputOutcomeResult<Option<R>>
    where
        R: OutputOutcome;

    async fn await_output_outcome<R>(
        &self,
        outpoint: OutPoint,
        timeout: Duration,
        module_decoder: &Decoder,
    ) -> OutputOutcomeResult<R>
    where
        R: OutputOutcome;

    /// Fetch client configuration info only if verified against a federation id
    async fn download_client_config(
        &self,
        info: &WsClientConnectInfo,
    ) -> FederationResult<ClientConfig>;

    /// Fetches the server consensus hash if enough peers agree on it
    async fn consensus_config_hash(&self) -> FederationResult<sha256::Hash>;

    async fn upload_backup(&self, request: &SignedBackupRequest) -> FederationResult<()>;

    async fn download_backup(
        &self,
        id: &secp256k1::XOnlyPublicKey,
    ) -> FederationResult<Vec<ClientBackupSnapshot>>;

    /// Query peers and calculate optimal common api versions to use.
    async fn discover_api_version_set(
        &self,
        client_versions: &SupportedApiVersionsSummary,
    ) -> FederationResult<ApiVersionSet>;
}

fn map_tx_outcome_outpoint<R>(
    tx_outcome: TransactionStatus,
    out_point: OutPoint,
    module_decoder: &Decoder,
) -> OutputOutcomeResult<R>
where
    R: OutputOutcome + MaybeSend,
{
    match tx_outcome {
        TransactionStatus::Rejected(e) => Err(OutputOutcomeError::Rejected(e)),
        TransactionStatus::Accepted { outputs, .. } => {
            let outputs_len = outputs.len();
            outputs
                .into_iter()
                .nth(out_point.out_idx as usize) // avoid clone as would be necessary with .get(…)
                .ok_or(OutputOutcomeError::InvalidVout {
                    outputs_num: outputs_len,
                    out_idx: out_point.out_idx,
                })
                .and_then(|output| {


                    let dyn_outcome = output
                        .try_into_inner_known_module_kind(module_decoder)
                        .map_err(|e| OutputOutcomeError::ResponseDeserialization(e.into()))?;

                    let source_instance = dyn_outcome.module_instance_id();
                    dyn_outcome.as_any().downcast_ref().cloned().ok_or_else(|| {
                        let target_type = std::any::type_name::<R>();
                        OutputOutcomeError::ResponseDeserialization(anyhow!("Could not downcast output outcome with instance id {source_instance} to {target_type}"))
                    })
                })
        }
    }
}

#[apply(async_trait_maybe_send!)]
impl<T: ?Sized> GlobalFederationApi for T
where
    T: IGlobalFederationApi + MaybeSend + MaybeSync + 'static,
{
    /// Submit a transaction for inclusion
    async fn submit_transaction(&self, tx: Transaction) -> FederationResult<TransactionId> {
        self.request_current_consensus(
            "transaction".to_owned(),
            ApiRequestErased::new(&SerdeTransaction::from(&tx)),
        )
        .await
    }

    /// Fetch the outcome of an entire transaction
    async fn fetch_tx_outcome(
        &self,
        tx: &TransactionId,
    ) -> FederationResult<Option<TransactionStatus>> {
        self.request_current_consensus("fetch_transaction".to_owned(), ApiRequestErased::new(tx))
            .await
    }

    /// Await the outcome of an entire transaction
    async fn await_tx_outcome(&self, tx: &TransactionId) -> FederationResult<TransactionStatus> {
        self.request_current_consensus("wait_transaction".to_owned(), ApiRequestErased::new(tx))
            .await
    }

    async fn fetch_epoch_history(
        &self,
        epoch: u64,
        epoch_pk: PublicKey,
        decoders: &ModuleDecoderRegistry,
    ) -> FederationResult<SignedEpochOutcome> {
        // TODO: make this function avoid clone
        let decoders = decoders.clone();

        struct ValidHistoryWrapper {
            decoders: ModuleDecoderRegistry,
            strategy: VerifiableResponse<SignedEpochOutcome>,
        }

        impl QueryStrategy<SerdeEpochHistory, SignedEpochOutcome> for ValidHistoryWrapper {
            fn process(
                &mut self,
                peer: PeerId,
                result: MemberResult<SerdeEpochHistory>,
            ) -> QueryStep<SignedEpochOutcome> {
                let response = result.and_then(|hist| {
                    hist.try_into_inner(&self.decoders)
                        .map_err(|e| MemberError::Rpc(jsonrpsee_core::Error::Custom(e.to_string())))
                });
                match self.strategy.process(peer, response) {
                    QueryStep::RetryMembers(r) => QueryStep::RetryMembers(r),
                    QueryStep::FailMembers(failed) => QueryStep::FailMembers(failed),
                    QueryStep::Continue => QueryStep::Continue,
                    QueryStep::Success(res) => QueryStep::Success(res),
                    QueryStep::Failure { general, members } => {
                        QueryStep::Failure { general, members }
                    }
                }
            }
        }

        let qs = ValidHistoryWrapper {
            decoders,
            strategy: VerifiableResponse::new(
                self.all_members().one_honest(),
                true,
                move |epoch: &SignedEpochOutcome| epoch.verify_sig(&epoch_pk).is_ok(),
            ),
        };

        self.request_with_strategy::<SerdeEpochHistory, _>(
            qs,
            "fetch_epoch_history".to_owned(),
            ApiRequestErased::new(epoch),
        )
        .await
    }

    async fn fetch_epoch_count(&self) -> FederationResult<u64> {
        self.request_eventually_consistent(
            "fetch_epoch_count".to_owned(),
            ApiRequestErased::default(),
        )
        .await
    }

    async fn fetch_output_outcome<R>(
        &self,
        out_point: OutPoint,
        module_decoder: &Decoder,
    ) -> OutputOutcomeResult<Option<R>>
    where
        R: OutputOutcome,
    {
        Ok(self
            .fetch_tx_outcome(&out_point.txid)
            .await?
            .map(move |tx_outcome| map_tx_outcome_outpoint(tx_outcome, out_point, module_decoder))
            .transpose()?)
    }

    // TODO should become part of the API
    async fn await_output_outcome<R>(
        &self,
        outpoint: OutPoint,
        timeout: Duration,
        module_decoder: &Decoder,
    ) -> OutputOutcomeResult<R>
    where
        R: OutputOutcome,
    {
        fedimint_core::task::timeout(timeout, async move {
            let tx_outcome = self.await_tx_outcome(&outpoint.txid).await?;
            map_tx_outcome_outpoint(tx_outcome, outpoint, module_decoder)
        })
        .await
        .map_err(|_| OutputOutcomeError::Timeout(timeout))?
    }

    async fn download_client_config(
        &self,
        info: &WsClientConnectInfo,
    ) -> FederationResult<ClientConfig> {
        let id = info.id;
        let qs = VerifiableResponse::new(
            self.all_members().total(),
            false,
            move |config: &ClientConfigResponse| {
                let hash = config.client_config.consensus_hash();
                id.0.verify(&config.signature.0, hash)
            },
        );

        self.request_with_strategy(
            qs,
            "config".to_owned(),
            ApiRequestErased::new(info.to_string()),
        )
        .await
        .map(|cfg: ClientConfigResponse| cfg.client_config)
    }

    async fn consensus_config_hash(&self) -> FederationResult<sha256::Hash> {
        self.request_current_consensus("config_hash".to_owned(), ApiRequestErased::default())
            .await
    }

    async fn upload_backup(&self, request: &SignedBackupRequest) -> FederationResult<()> {
        self.request_with_strategy(
            CurrentConsensus::new(self.all_members().threshold()),
            "backup".to_owned(),
            ApiRequestErased::new(request),
        )
        .await
    }

    async fn download_backup(
        &self,
        id: &secp256k1::XOnlyPublicKey,
    ) -> FederationResult<Vec<ClientBackupSnapshot>> {
        Ok(self
            .request_with_strategy(
                UnionResponsesSingle::<Option<ClientBackupSnapshot>>::new(
                    self.all_members().threshold(),
                ),
                "recover".to_owned(),
                ApiRequestErased::new(id),
            )
            .await?
            .into_iter()
            .flatten()
            .collect())
    }

    async fn discover_api_version_set(
        &self,
        client_versions: &SupportedApiVersionsSummary,
    ) -> FederationResult<ApiVersionSet> {
        let timeout = Duration::from_secs(60);
        self.request_with_strategy(
            DiscoverApiVersionSet::new(
                self.all_members().len(),
                now().add(timeout),
                client_versions.clone(),
            ),
            "version".to_owned(),
            ApiRequestErased::default(),
        )
        .await
    }
}

/// Mint API client that will try to run queries against all `members` expecting
/// equal results from at least `min_eq_results` of them. Members that return
/// differing results are returned as a member faults list.
#[derive(Debug, Clone)]
pub struct WsFederationApi<C = WsClient> {
    peers: BTreeSet<PeerId>,
    members: Arc<Vec<FederationMember<C>>>,
    module_id: Option<ModuleInstanceId>,
}

#[derive(Debug)]
struct FederationMember<C> {
    url: Url,
    peer_id: PeerId,
    client: RwLock<Option<C>>,
}

/// Information required for client to construct [`WsFederationApi`] instance
///
/// Can be used to download the configs and bootstrap a client
#[derive(Clone, Debug, Eq, PartialEq, Encodable)]
pub struct WsClientConnectInfo {
    /// Url to reach an API that we can download configs from
    pub url: Url,
    /// Config download token (might only be used a certain number of times)
    pub download_token: ClientConfigDownloadToken,
    /// Authentication id for the federation
    pub id: FederationId,
}

/// Size of a download token
const CONFIG_DOWNLOAD_TOKEN_BYTES: usize = 12;

/// Allows a client to download the config
#[derive(Debug, Clone, Eq, PartialEq, Serialize, Deserialize, Encodable, Decodable)]
pub struct ClientConfigDownloadToken(pub [u8; CONFIG_DOWNLOAD_TOKEN_BYTES]);

/// We can represent client connect info as a bech32 string for compactness and
/// error-checking
///
/// Human readable part (HRP) includes the version
/// ```txt
/// [ hrp (4 bytes) ] [ id (48 bytes) ] ([ url len (2 bytes) ] [ url bytes (url len bytes) ])+
/// ```
const BECH32_HRP: &str = "fed1";

impl FromStr for WsClientConnectInfo {
    type Err = anyhow::Error;

    fn from_str(encoded: &str) -> Result<Self, Self::Err> {
        let (hrp, data, variant) = bech32::decode(encoded)?;

        ensure!(hrp == BECH32_HRP, "Invalid HRP in bech32 encoding");
        ensure!(variant == Bech32m, "Expected Bech32m encoding");

        let bytes: Vec<u8> = Vec::<u8>::from_base32(&data)?;
        let mut cursor = Cursor::new(bytes);
        let mut id_bytes = [0; PK_SIZE];
        cursor.read_exact(&mut id_bytes)?;

        let mut url_len = [0; 2];
        cursor.read_exact(&mut url_len)?;
        let url_len = u16::from_be_bytes(url_len).into();
        let mut url_bytes = vec![0; url_len];
        cursor.read_exact(&mut url_bytes)?;
        let mut download_token = [0; CONFIG_DOWNLOAD_TOKEN_BYTES];
        cursor.read_exact(&mut download_token)?;

        let url = std::str::from_utf8(&url_bytes)?;

        Ok(Self {
            url: url.parse()?,
            download_token: ClientConfigDownloadToken(download_token),
            id: FederationId(PublicKey::from_bytes(id_bytes)?),
        })
    }
}

/// Parses the connect info from a bech32 string
impl Display for WsClientConnectInfo {
    fn fmt(&self, formatter: &mut Formatter<'_>) -> fmt::Result {
        let mut data = vec![];
        data.extend(self.id.0.to_bytes());
        let url_bytes = self.url.as_str().as_bytes();
        data.extend((url_bytes.len() as u16).to_be_bytes());
        data.extend(url_bytes);
        data.extend(&self.download_token.0);
        let encode =
            bech32::encode(BECH32_HRP, data.to_base32(), Bech32m).map_err(|_| fmt::Error)?;

        formatter.write_str(&encode)
    }
}

impl Serialize for WsClientConnectInfo {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        String::serialize(&self.to_string(), serializer)
    }
}

impl<'de> Deserialize<'de> for WsClientConnectInfo {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let string = Cow::<str>::deserialize(deserializer)?;
        Self::from_str(&string).map_err(serde::de::Error::custom)
    }
}

impl<C: JsonRpcClient + Debug + 'static> IGlobalFederationApi for WsFederationApi<C> {}

impl<C: JsonRpcClient + Debug + 'static> IModuleFederationApi for WsFederationApi<C> {}

/// Implementation of API calls over websockets
///
/// Can function as either the global or module API
#[apply(async_trait_maybe_send!)]
impl<C: JsonRpcClient + Debug + 'static> IFederationApi for WsFederationApi<C> {
    fn all_members(&self) -> &BTreeSet<PeerId> {
        &self.peers
    }

    fn with_module(&self, id: ModuleInstanceId) -> DynModuleApi {
        WsFederationApi {
            peers: self.peers.clone(),
            members: self.members.clone(),
            module_id: Some(id),
        }
        .into()
    }

    async fn request_raw(
        &self,
        peer_id: PeerId,
        method: &str,
        params: &[Value],
    ) -> JsonRpcResult<Value> {
        let member = self
            .members
            .iter()
            .find(|m| m.peer_id == peer_id)
            .ok_or_else(|| JsonRpcError::Custom(format!("Invalid peer_id: {peer_id}")))?;

        let method = match self.module_id {
            None => method.to_string(),
            Some(id) => format!("module_{id}_{method}"),
        };
        member.request(&method, params).await
    }
}

#[apply(async_trait_maybe_send!)]
pub trait JsonRpcClient: ClientT + Sized + MaybeSend + MaybeSync {
    async fn connect(url: &Url) -> result::Result<Self, JsonRpcError>;
    fn is_connected(&self) -> bool;
}

#[apply(async_trait_maybe_send!)]
impl JsonRpcClient for WsClient {
    async fn connect(url: &Url) -> result::Result<Self, JsonRpcError> {
        #[cfg(not(target_family = "wasm"))]
        return WsClientBuilder::default()
            .use_webpki_rustls()
            .build(url_to_string_with_default_port(url)) // Hack for default ports, see fn docs
            .await;

        #[cfg(target_family = "wasm")]
        WsClientBuilder::default()
            .build(url_to_string_with_default_port(url)) // Hack for default ports, see fn docs
            .await
    }

    fn is_connected(&self) -> bool {
        self.is_connected()
    }
}

impl WsFederationApi<WsClient> {
    /// Creates a new API client
    pub fn new(members: Vec<(PeerId, Url)>) -> Self {
        Self::new_with_client(members)
    }

    /// Creates a new API client from a client config
    pub fn from_config(config: &ClientConfig) -> Self {
        Self::new(
            config
                .api_endpoints
                .iter()
                .map(|(id, peer)| (*id, peer.url.clone()))
                .collect(),
        )
    }

    /// Creates a new API client from a connect info, assumes they are in peer
    /// id order
    pub fn from_connect_info(info: &[WsClientConnectInfo]) -> Self {
        Self::new(
            info.iter()
                .enumerate()
                .map(|(id, connect)| (PeerId::from(id as u16), connect.url.clone()))
                .collect(),
        )
    }
}

impl<C> WsFederationApi<C> {
    pub fn peers(&self) -> Vec<PeerId> {
        self.members.iter().map(|member| member.peer_id).collect()
    }

    /// Creates a new API client
    pub fn new_with_client(members: Vec<(PeerId, Url)>) -> Self {
        WsFederationApi {
            peers: members.iter().map(|m| m.0).collect(),
            members: Arc::new(
                members
                    .into_iter()
                    .map(|(peer_id, url)| {
                        assert!(
                            url.port_or_known_default().is_some(),
                            "API client requires a port"
                        );
                        assert!(url.host().is_some(), "API client requires a target host");

                        FederationMember {
                            peer_id,
                            url,
                            client: RwLock::new(None),
                        }
                    })
                    .collect(),
            ),
            module_id: None,
        }
    }
}

#[derive(Debug)]
pub struct PeerResponse<R> {
    pub peer: PeerId,
    pub result: JsonRpcResult<R>,
}

impl<C: JsonRpcClient> FederationMember<C> {
    #[instrument(level = "trace", fields(peer = %self.peer_id, %method), skip_all)]
    pub async fn request(&self, method: &str, params: &[Value]) -> JsonRpcResult<Value> {
        let rclient = self.client.read().await;
        match &*rclient {
            Some(client) if client.is_connected() => {
                return client.request::<_, _>(method, params).await;
            }
            _ => {}
        };

        debug!("web socket not connected, reconnecting");

        drop(rclient);
        let mut wclient = self.client.write().await;
        Ok(match &*wclient {
            Some(client) if client.is_connected() => {
                // other task has already connected it
                let rclient = RwLockWriteGuard::downgrade(wclient);
                rclient
                    .as_ref()
                    .unwrap()
                    .request::<_, _>(method, params)
                    .await?
            }
            _ => {
                // write lock is acquired before creating a new client
                // so only one task will try to create a new client
                match C::connect(&self.url).await {
                    Ok(client) => {
                        *wclient = Some(client);
                        // drop the write lock before making the request
                        let rclient = RwLockWriteGuard::downgrade(wclient);
                        rclient
                            .as_ref()
                            .unwrap()
                            .request::<_, _>(method, params)
                            .await?
                    }
                    Err(err) => {
                        error!(
                            target: LOG_NET_API,
                            %err, "unable to connect to server");
                        return Err(err)?;
                    }
                }
            }
        })
    }
}

/// `jsonrpsee` converts the `Url` to a `&str` internally and then parses it as
/// an `Uri`. Unfortunately `Url` swallows ports that it considers default ports
/// (e.g. 80 and 443 for HTTP(S)) which makes the `Uri` parsing fail in these
/// cases. This function works around this limitation in a limited way (not
/// fully standard compliant, but work for our use case).
///
/// See <https://github.com/paritytech/jsonrpsee/issues/554#issue-1048646896>
fn url_to_string_with_default_port(url: &Url) -> String {
    format!(
        "{}://{}:{}{}",
        url.scheme(),
        url.host().expect("Asserted on construction"),
        url.port_or_known_default()
            .expect("Asserted on construction"),
        url.path()
    )
}

impl<C: JsonRpcClient> WsFederationApi<C> {}

/// The status of a server, including how it views its peers
#[derive(Debug, Clone, Default, Serialize, Deserialize, PartialEq, Eq)]
pub struct ConsensusStatus {
    /// The last contribution that this server has made to the consensus, it's
    /// equivalent to [`PeerConsensusStatus::last_contribution`] and
    /// [`ConsensusContribution::value`]
    pub last_contribution: u64,
    pub status_by_peer: HashMap<PeerId, PeerConsensusStatus>,
    pub peers_online: u64,
    pub peers_offline: u64,
    /// This should always be 0 if everything is okay, so a monitoring tool
    /// should generate an alert if this is not the case.
    pub peers_flagged: u64,
}

#[derive(Debug, Clone, Copy, Default, PartialEq, Eq, Serialize, Deserialize)]
pub struct PeerConsensusStatus {
    pub last_contribution: Option<u64>,
    pub last_contribution_timestamp_seconds: Option<u64>,
    pub connection_status: PeerConnectionStatus,
    /// Indicates that this peer needs attention from the operator. For instance
    /// it may be suffering too many disconnections or it hasn't contributed for
    /// the consensus in a long time
    pub flagged: bool,
}

#[derive(Debug, Clone, Copy, Default, PartialEq, Eq, Serialize, Deserialize)]
pub enum PeerConnectionStatus {
    #[default]
    Disconnected,
    Connected,
}

/// Tracks the consensus contribution for a peer
#[derive(Debug, Clone, Copy)]
pub struct ConsensusContribution {
    /// Using HBBFT this is the epoch count. In general it should be an
    /// increasing number
    pub value: u64,
    /// When the contribution was received
    pub time: SystemTime,
}

/// The state of the server returned via APIs
#[derive(Debug, Clone, Default, Serialize, Deserialize, Eq, PartialEq)]
pub enum ServerStatus {
    /// Server needs a password to read configs
    #[default]
    AwaitingPassword,
    /// Waiting for peers to share the config gen params
    SharingConfigGenParams,
    /// Ready to run config gen once all peers are ready
    ReadyForConfigGen,
    /// We failed running config gen
    ConfigGenFailed,
    /// Config is generated, peers should verify the config
    VerifyingConfigs,
    /// We have verified all our peer configs
    VerifiedConfigs,
    /// Restarted from a planned upgrade (requires action to start)
    Upgrading,
    /// Consensus is running
    ConsensusRunning,
}

#[derive(Debug, Clone, Deserialize, Serialize, PartialEq, Eq)]
pub struct StatusResponse {
    pub server: ServerStatus,
    pub consensus: Option<ConsensusStatus>,
}

#[cfg(test)]
mod tests {
    use std::collections::HashSet;
    use std::fmt;
    use std::str::FromStr;
    use std::sync::atomic::{AtomicBool, AtomicUsize, Ordering};
    use std::sync::Mutex;
    use std::time::Duration;

    use anyhow::anyhow;
    use jsonrpsee_core::client::BatchResponse;
    use jsonrpsee_core::params::BatchRequestBuilder;
    use jsonrpsee_core::traits::ToRpcParams;
    use once_cell::sync::Lazy;
    use rand::rngs::OsRng;
    use rand::Rng;
    use serde::de::DeserializeOwned;
    use tracing::error;

    use super::*;

    type Result<T = ()> = std::result::Result<T, JsonRpcError>;

    #[apply(async_trait_maybe_send!)]
    trait SimpleClient: Sized {
        async fn connect() -> Result<Self>;
        fn is_connected(&self) -> bool {
            true
        }
        // reply with json
        async fn request(&self, method: &str) -> Result<String>;
    }

    struct Client<C: SimpleClient>(C);

    #[apply(async_trait_maybe_send!)]
    impl<C: SimpleClient + MaybeSend + MaybeSync> JsonRpcClient for Client<C> {
        fn is_connected(&self) -> bool {
            self.0.is_connected()
        }

        async fn connect(_url: &Url) -> Result<Self> {
            Ok(Self(C::connect().await?))
        }
    }

    #[apply(async_trait_maybe_send!)]
    impl<C: SimpleClient + MaybeSend + MaybeSync> ClientT for Client<C> {
        async fn request<R, P>(&self, method: &str, _params: P) -> Result<R>
        where
            R: jsonrpsee_core::DeserializeOwned,
            P: ToRpcParams + MaybeSend,
        {
            let json = self.0.request(method).await?;
            Ok(serde_json::from_str(&json).unwrap())
        }

        async fn notification<P>(&self, _method: &str, _params: P) -> Result<()>
        where
            P: ToRpcParams + MaybeSend,
        {
            unimplemented!()
        }

        async fn batch_request<'a, R>(
            &self,
            _batch: BatchRequestBuilder<'a>,
        ) -> std::result::Result<BatchResponse<'a, R>, jsonrpsee_core::Error>
        where
            R: DeserializeOwned + fmt::Debug + 'a,
        {
            unimplemented!()
        }
    }

    fn federation_member<C: SimpleClient + MaybeSend + MaybeSync>() -> FederationMember<Client<C>> {
        FederationMember {
            url: Url::from_str("http://127.0.0.1").expect("Could not parse"),
            peer_id: PeerId::from(0),
            client: RwLock::new(None),
        }
    }

    #[test_log::test(tokio::test)]
    async fn test_connect() {
        static CONNECTION_COUNT: AtomicUsize = AtomicUsize::new(0);
        static CONNECTED: AtomicBool = AtomicBool::new(true);
        struct Client;

        #[apply(async_trait_maybe_send!)]
        impl SimpleClient for Client {
            async fn connect() -> Result<Self> {
                CONNECTION_COUNT.fetch_add(1, Ordering::SeqCst);
                Ok(Client)
            }

            fn is_connected(&self) -> bool {
                CONNECTED.load(Ordering::SeqCst)
            }

            async fn request(&self, _method: &str) -> Result<String> {
                Ok("null".to_string())
            }
        }

        let fed = federation_member::<Client>();
        assert_eq!(
            CONNECTION_COUNT.load(Ordering::SeqCst),
            0,
            "should not connect before first request"
        );

        fed.request("", &[]).await.unwrap();
        assert_eq!(
            CONNECTION_COUNT.load(Ordering::SeqCst),
            1,
            "should connect once after first request"
        );

        fed.request("", &[]).await.unwrap();
        assert_eq!(
            CONNECTION_COUNT.load(Ordering::SeqCst),
            1,
            "should not connect again before disconnect"
        );

        // disconnect
        CONNECTED.store(false, Ordering::SeqCst);

        fed.request("", &[]).await.unwrap();
        assert_eq!(
            CONNECTION_COUNT.load(Ordering::SeqCst),
            2,
            "should connect again after disconnect"
        );
    }

    #[test_log::test(tokio::test)]
    async fn concurrent_requests() {
        static CONNECTION_COUNT: AtomicUsize = AtomicUsize::new(0);
        static FAIL: Lazy<Mutex<HashSet<usize>>> = Lazy::new(|| Mutex::new(HashSet::new()));

        struct Client(usize);

        #[apply(async_trait_maybe_send!)]
        impl SimpleClient for Client {
            async fn connect() -> Result<Self> {
                error!(target: LOG_NET_API, "connect");
                let id = CONNECTION_COUNT.fetch_add(1, Ordering::SeqCst);
                // slow down
                task::sleep(Duration::from_millis(100)).await;
                if FAIL.lock().unwrap().contains(&id) {
                    Err(jsonrpsee_core::Error::Transport(anyhow!(
                        "intentional error"
                    )))
                } else {
                    Ok(Client(id))
                }
            }

            fn is_connected(&self) -> bool {
                !FAIL.lock().unwrap().contains(&self.0)
            }

            async fn request(&self, _method: &str) -> Result<String> {
                if self.is_connected() {
                    Ok("null".to_string())
                } else {
                    Err(jsonrpsee_core::Error::Transport(anyhow!(
                        "client is disconnected"
                    )))
                }
            }
        }

        let fed = federation_member::<Client>();

        FAIL.lock().unwrap().insert(0);

        assert!(
            fed.request("", &[]).await.is_err(),
            "connect for client 0 should fail"
        );

        // connect for client 1 should succeed
        fed.request("", &[]).await.unwrap();

        assert_eq!(
            CONNECTION_COUNT.load(Ordering::SeqCst),
            2,
            "should connect again after error in first connect"
        );

        // force a new connection by disconnecting client 1
        FAIL.lock().unwrap().insert(1);

        // only connect once even for two concurrent requests
        let (reqa, reqb) = tokio::join!(fed.request("", &[]), fed.request("", &[]));
        reqa.expect("both request should be successful");
        reqb.expect("both request should be successful");

        assert_eq!(
            CONNECTION_COUNT.load(Ordering::SeqCst),
            3,
            "should connect once even for two concurrent requests",
        );

        // force a new connection by disconnecting client 2
        FAIL.lock().unwrap().insert(2);

        // client 3 should fail
        // client 4 should succeed
        FAIL.lock().unwrap().insert(3);

        // only connect once even for two concurrent requests
        let (reqa, reqb) = tokio::join!(fed.request("", &[]), fed.request("", &[]));

        assert_eq!(
            CONNECTION_COUNT.load(Ordering::SeqCst),
            5,
            "should connect again if first concurrent request fails",
        );

        assert!(
            reqa.is_err() ^ reqb.is_err(),
            "exactly one of two request should succeed"
        );
    }

    #[test]
    fn converts_connect_string() {
        let connect = WsClientConnectInfo {
            url: "ws://test1".parse().unwrap(),
            id: FederationId::dummy(),
            download_token: ClientConfigDownloadToken(OsRng::default().gen()),
        };

        let bech32 = connect.to_string();
        let connect_parsed = WsClientConnectInfo::from_str(&bech32).expect("parses");
        assert_eq!(connect, connect_parsed);

        let json = serde_json::to_string(&connect).unwrap();
        let connect_as_string: String = serde_json::from_str(&json).unwrap();
        assert_eq!(connect_as_string, bech32);
        let connect_parsed_json: WsClientConnectInfo = serde_json::from_str(&json).unwrap();
        assert_eq!(connect_parsed_json, connect_parsed);
    }
}


