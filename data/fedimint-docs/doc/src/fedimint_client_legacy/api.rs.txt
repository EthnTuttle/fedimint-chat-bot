logo [../../static.files/rust-logo-151179464ae7ed46.svg]../../fedimint_client_legacy/index.html
? [../../help.html]
Change settings [../../static.files/wheel-5ec35bf9ca753509.svg]../../settings.html

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175


pub mod fake;

use bitcoin::Address;
use bitcoin_hashes::sha256::Hash as Sha256Hash;
use fedimint_core::api::{FederationApiExt, FederationResult, IFederationApi};
use fedimint_core::core::{
    LEGACY_HARDCODED_INSTANCE_ID_LN, LEGACY_HARDCODED_INSTANCE_ID_MINT,
    LEGACY_HARDCODED_INSTANCE_ID_WALLET,
};
use fedimint_core::module::ApiRequestErased;
use fedimint_core::query::{
    CurrentConsensus, EventuallyConsistent, UnionResponses, UnionResponsesSingle,
};
use fedimint_core::task::{MaybeSend, MaybeSync};
use fedimint_core::{apply, async_trait_maybe_send, NumPeers};
use fedimint_mint_client::common::db::ECashUserBackupSnapshot;

use crate::modules::ln::contracts::incoming::IncomingContractOffer;
use crate::modules::ln::contracts::ContractId;
use crate::modules::ln::{ContractAccount, LightningGateway};
use crate::modules::wallet::PegOutFees;

#[apply(async_trait_maybe_send!)]
pub trait LnFederationApi {
    async fn fetch_contract(&self, contract: ContractId) -> FederationResult<ContractAccount>;
    async fn fetch_offer(
        &self,
        payment_hash: Sha256Hash,
    ) -> FederationResult<IncomingContractOffer>;
    async fn fetch_gateways(&self) -> FederationResult<Vec<LightningGateway>>;
    async fn register_gateway(&self, gateway: &LightningGateway) -> FederationResult<()>;
    async fn offer_exists(&self, payment_hash: Sha256Hash) -> FederationResult<bool>;
}

#[apply(async_trait_maybe_send!)]
impl<T: ?Sized> LnFederationApi for T
where
    T: IFederationApi + MaybeSend + MaybeSync + 'static,
{
    async fn fetch_contract(&self, contract: ContractId) -> FederationResult<ContractAccount> {
        self.with_module(LEGACY_HARDCODED_INSTANCE_ID_LN)
            .request_current_consensus("wait_account".to_string(), ApiRequestErased::new(contract))
            .await
    }
    async fn fetch_offer(
        &self,
        payment_hash: Sha256Hash,
    ) -> FederationResult<IncomingContractOffer> {
        self.with_module(LEGACY_HARDCODED_INSTANCE_ID_LN)
            .request_current_consensus(
                "wait_offer".to_string(),
                ApiRequestErased::new(payment_hash),
            )
            .await
    }

    async fn fetch_gateways(&self) -> FederationResult<Vec<LightningGateway>> {
        self.with_module(LEGACY_HARDCODED_INSTANCE_ID_LN)
            .request_with_strategy(
                UnionResponses::new(self.all_members().threshold()),
                "list_gateways".to_string(),
                ApiRequestErased::default(),
            )
            .await
    }

    async fn register_gateway(&self, gateway: &LightningGateway) -> FederationResult<()> {
        self.with_module(LEGACY_HARDCODED_INSTANCE_ID_LN)
            .request_with_strategy(
                CurrentConsensus::new(self.all_members().threshold()),
                "register_gateway".to_string(),
                ApiRequestErased::new(gateway),
            )
            .await
    }

    async fn offer_exists(&self, payment_hash: Sha256Hash) -> FederationResult<bool> {
        Ok(self
            .with_module(LEGACY_HARDCODED_INSTANCE_ID_LN)
            .request_current_consensus::<Option<IncomingContractOffer>>(
                "offer".to_string(),
                ApiRequestErased::new(payment_hash),
            )
            .await?
            .is_some())
    }
}

#[apply(async_trait_maybe_send!)]
pub trait MintFederationApi {
    async fn upload_ecash_backup(
        &self,
        request: &fedimint_mint_client::SignedBackupRequest,
    ) -> FederationResult<()>;
    async fn download_ecash_backup(
        &self,
        id: &secp256k1::XOnlyPublicKey,
    ) -> FederationResult<Vec<ECashUserBackupSnapshot>>;
}

#[apply(async_trait_maybe_send!)]
impl<T: ?Sized> MintFederationApi for T
where
    T: IFederationApi + MaybeSend + MaybeSync + 'static,
{
    async fn upload_ecash_backup(
        &self,
        request: &fedimint_mint_client::SignedBackupRequest,
    ) -> FederationResult<()> {
        self.with_module(LEGACY_HARDCODED_INSTANCE_ID_MINT)
            .request_with_strategy(
                CurrentConsensus::new(self.all_members().threshold()),
                "backup".to_string(),
                ApiRequestErased::new(request),
            )
            .await
    }
    async fn download_ecash_backup(
        &self,
        id: &secp256k1::XOnlyPublicKey,
    ) -> FederationResult<Vec<ECashUserBackupSnapshot>> {
        Ok(self
            .with_module(LEGACY_HARDCODED_INSTANCE_ID_MINT)
            .request_with_strategy(
                UnionResponsesSingle::<Option<ECashUserBackupSnapshot>>::new(
                    self.all_members().threshold(),
                ),
                "recover".to_string(),
                ApiRequestErased::new(id),
            )
            .await?
            .into_iter()
            .flatten()
            .collect())
    }
}

#[apply(async_trait_maybe_send!)]
pub trait WalletFederationApi {
    async fn fetch_consensus_block_height(&self) -> FederationResult<u64>;
    async fn fetch_peg_out_fees(
        &self,
        address: &Address,
        amount: bitcoin::Amount,
    ) -> FederationResult<Option<PegOutFees>>;
}

#[apply(async_trait_maybe_send!)]
impl<T: ?Sized> WalletFederationApi for T
where
    T: IFederationApi + MaybeSend + MaybeSync + 'static,
{
    async fn fetch_consensus_block_height(&self) -> FederationResult<u64> {
        self.with_module(LEGACY_HARDCODED_INSTANCE_ID_WALLET)
            .request_with_strategy(
                EventuallyConsistent::new(self.all_members().one_honest()),
                "block_height".to_string(),
                ApiRequestErased::default(),
            )
            .await
    }

    async fn fetch_peg_out_fees(
        &self,
        address: &Address,
        amount: bitcoin::Amount,
    ) -> FederationResult<Option<PegOutFees>> {
        self.with_module(LEGACY_HARDCODED_INSTANCE_ID_WALLET)
            .request_eventually_consistent(
                "peg_out_fees".to_string(),
                ApiRequestErased::new((address, amount.to_sat())),
            )
            .await
    }
}


