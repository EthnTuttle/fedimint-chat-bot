logo [../../../static.files/rust-logo-151179464ae7ed46.svg]../../../fedimint_client_legacy/index.html
? [../../../help.html]
Change settings [../../../static.files/wheel-5ec35bf9ca753509.svg]../../../settings.html

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37


use fedimint_core::encoding::{Decodable, Encodable};
use fedimint_core::Amount;
use serde::Serialize;

use crate::modules::ln::contracts::outgoing::OutgoingContract;
use crate::modules::ln::contracts::{IdentifiableContract, Preimage};
use crate::modules::ln::LightningInput;

#[derive(Debug, Encodable, Decodable, Serialize)]
pub struct OutgoingContractData {
    pub recovery_key: bitcoin::KeyPair,
    pub contract_account: OutgoingContractAccount,
}

#[derive(Debug, Clone, Encodable, Decodable, Serialize)]
pub struct OutgoingContractAccount {
    pub amount: Amount,
    pub contract: OutgoingContract,
}

impl OutgoingContractAccount {
    pub fn claim(&self, preimage: Preimage) -> LightningInput {
        LightningInput {
            contract_id: self.contract.contract_id(),
            amount: self.amount,
            witness: Some(preimage),
        }
    }

    pub fn refund(&self) -> LightningInput {
        LightningInput {
            contract_id: self.contract.contract_id(),
            amount: self.amount,
            witness: None,
        }
    }
}


