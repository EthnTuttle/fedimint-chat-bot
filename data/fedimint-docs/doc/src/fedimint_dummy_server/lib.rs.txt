logo [../../static.files/rust-logo-151179464ae7ed46.svg]../../fedimint_dummy_server/index.html
? [../../help.html]
Change settings [../../static.files/wheel-5ec35bf9ca753509.svg]../../settings.html

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
235
236
237
238
239
240
241
242
243
244
245
246
247
248
249
250
251
252
253
254
255
256
257
258
259
260
261
262
263
264
265
266
267
268
269
270
271
272
273
274
275
276
277
278
279
280
281
282
283
284
285
286
287
288
289
290
291
292
293
294
295
296
297
298
299
300
301
302
303
304
305
306
307
308
309
310
311
312
313
314
315
316
317
318
319
320
321
322
323
324
325
326
327
328
329
330
331
332
333
334
335
336
337
338
339
340
341
342
343
344
345
346
347
348
349
350
351
352
353
354
355
356
357
358
359
360
361
362
363
364
365
366
367
368
369
370
371
372
373
374
375
376
377
378
379
380
381
382
383
384
385
386
387
388
389
390
391
392
393
394
395
396
397
398
399
400
401
402
403
404
405
406
407
408
409
410
411
412
413
414
415
416
417
418
419
420
421
422
423
424
425
426
427
428
429
430
431
432
433
434
435
436
437
438
439
440
441
442
443
444
445
446
447
448
449
450
451
452
453
454
455
456
457
458
459
460
461
462
463
464
465
466
467
468
469
470
471
472
473
474
475
476
477
478
479
480
481
482
483
484
485
486
487


use std::collections::BTreeMap;
use std::string::ToString;

use anyhow::bail;
use async_trait::async_trait;
use fedimint_core::config::{
    ConfigGenModuleParams, DkgResult, ServerModuleConfig, ServerModuleConsensusConfig,
    TypedServerModuleConfig, TypedServerModuleConsensusConfig,
};
use fedimint_core::db::{Database, DatabaseVersion, MigrationMap, ModuleDatabaseTransaction};
use fedimint_core::epoch::{SerdeSignature, SerdeSignatureShare};
use fedimint_core::module::audit::Audit;
use fedimint_core::module::{
    api_endpoint, ApiEndpoint, ConsensusProposal, CoreConsensusVersion, ExtendsCommonModuleGen,
    InputMeta, IntoModuleError, ModuleConsensusVersion, ModuleError, PeerHandle, ServerModuleGen,
    SupportedModuleApiVersions, TransactionItemAmount,
};
use fedimint_core::server::DynServerModule;
use fedimint_core::task::TaskGroup;
use fedimint_core::{
    push_db_pair_items, Amount, ConsensusDecision, NumPeers, OutPoint, PeerId, ServerModule,
};
use fedimint_dummy_common::config::{
    DummyClientConfig, DummyConfig, DummyConfigConsensus, DummyConfigLocal, DummyConfigPrivate,
    DummyGenParams,
};
use fedimint_dummy_common::{
    fed_public_key, DummyCommonGen, DummyConsensusItem, DummyError, DummyInput, DummyModuleTypes,
    DummyOutput, DummyOutputOutcome, CONSENSUS_VERSION,
};
use fedimint_server::config::distributedgen::PeerHandleOps;
use futures::{FutureExt, StreamExt};
use rand::rngs::OsRng;
use strum::IntoEnumIterator;
use threshold_crypto::serde_impl::SerdeSecret;
use threshold_crypto::{PublicKeySet, SecretKeySet};
use tokio::sync::Notify;

use crate::db::{
    migrate_to_v1, DbKeyPrefix, DummyFundsKeyV1, DummyFundsPrefixV1, DummyOutcomeKey,
    DummyOutcomePrefix, DummySignatureKey, DummySignaturePrefix, DummySignatureShareKey,
    DummySignatureSharePrefix, DummySignatureShareStringPrefix,
};

mod db;

/// Generates the module
#[derive(Debug, Clone)]
pub struct DummyGen;

// TODO: Boilerplate-code
impl ExtendsCommonModuleGen for DummyGen {
    type Common = DummyCommonGen;
}

/// Implementation of server module non-consensus functions
#[async_trait]
impl ServerModuleGen for DummyGen {
    type Params = DummyGenParams;
    const DATABASE_VERSION: DatabaseVersion = DatabaseVersion(1);

    /// Returns the version of this module
    fn versions(&self, _core: CoreConsensusVersion) -> &[ModuleConsensusVersion] {
        &[CONSENSUS_VERSION]
    }

    fn supported_api_versions(&self) -> SupportedModuleApiVersions {
        SupportedModuleApiVersions::from_raw(0, 0, &[(0, 0)])
    }

    /// Initialize the module
    async fn init(
        &self,
        cfg: ServerModuleConfig,
        _db: Database,
        _task_group: &mut TaskGroup,
    ) -> anyhow::Result<DynServerModule> {
        Ok(Dummy::new(cfg.to_typed()?).into())
    }

    /// DB migrations to move from old to newer versions
    fn get_database_migrations(&self) -> MigrationMap {
        let mut migrations = MigrationMap::new();
        migrations.insert(DatabaseVersion(0), move |dbtx| migrate_to_v1(dbtx).boxed());
        migrations
    }

    /// Generates configs for all peers in a trusted manner for testing
    fn trusted_dealer_gen(
        &self,
        peers: &[PeerId],
        params: &ConfigGenModuleParams,
    ) -> BTreeMap<PeerId, ServerModuleConfig> {
        let params = self.parse_params(params).unwrap();
        // Create trusted set of threshold keys
        let sks = SecretKeySet::random(peers.degree(), &mut OsRng);
        let pks: PublicKeySet = sks.public_keys();
        // Generate a config for each peer
        peers
            .iter()
            .map(|&peer| {
                let private_key_share = SerdeSecret(sks.secret_key_share(peer.to_usize()));
                let config = DummyConfig {
                    local: DummyConfigLocal {
                        example: params.local.0.clone(),
                    },
                    private: DummyConfigPrivate { private_key_share },
                    consensus: DummyConfigConsensus {
                        public_key_set: pks.clone(),
                        tx_fee: params.consensus.tx_fee,
                    },
                };
                (peer, config.to_erased())
            })
            .collect()
    }

    /// Generates configs for all peers in an untrusted manner
    async fn distributed_gen(
        &self,
        peers: &PeerHandle,
        params: &ConfigGenModuleParams,
    ) -> DkgResult<ServerModuleConfig> {
        let params = self.parse_params(params).unwrap();
        // Runs distributed key generation
        // Could create multiple keys, here we use '()' to create one
        let g1 = peers.run_dkg_g1(()).await?;
        let keys = g1[&()].threshold_crypto();

        Ok(DummyConfig {
            local: DummyConfigLocal {
                example: params.local.0.clone(),
            },
            private: DummyConfigPrivate {
                private_key_share: keys.secret_key_share,
            },
            consensus: DummyConfigConsensus {
                public_key_set: keys.public_key_set,
                tx_fee: params.consensus.tx_fee,
            },
        }
        .to_erased())
    }

    /// Converts the consensus config into the client config
    fn get_client_config(
        &self,
        config: &ServerModuleConsensusConfig,
    ) -> anyhow::Result<DummyClientConfig> {
        let config = DummyConfigConsensus::from_erased(config)?;
        Ok(DummyClientConfig {
            tx_fee: config.tx_fee,
            fed_public_key: config.public_key_set.public_key(),
        })
    }

    /// Validates the private/public key of configs
    fn validate_config(&self, identity: &PeerId, config: ServerModuleConfig) -> anyhow::Result<()> {
        let config = config.to_typed::<DummyConfig>()?;
        let our_id = identity.to_usize();
        let our_share = config.consensus.public_key_set.public_key_share(our_id);

        // Check our private key matches our public key share
        if config.private.private_key_share.public_key_share() != our_share {
            bail!("Private key doesn't match public key share");
        }
        Ok(())
    }

    /// Dumps all database items for debugging
    async fn dump_database(
        &self,
        dbtx: &mut ModuleDatabaseTransaction<'_>,
        prefix_names: Vec<String>,
    ) -> Box<dyn Iterator<Item = (String, Box<dyn erased_serde::Serialize + Send>)> + '_> {
        // TODO: Boilerplate-code
        let mut items: BTreeMap<String, Box<dyn erased_serde::Serialize + Send>> = BTreeMap::new();
        let filtered_prefixes = DbKeyPrefix::iter().filter(|f| {
            prefix_names.is_empty() || prefix_names.contains(&f.to_string().to_lowercase())
        });

        for table in filtered_prefixes {
            match table {
                DbKeyPrefix::Funds => {
                    push_db_pair_items!(
                        dbtx,
                        DummyFundsPrefixV1,
                        DummyFundsKeyV1,
                        Amount,
                        items,
                        "Dummy Funds"
                    );
                }
                DbKeyPrefix::Outcome => {
                    push_db_pair_items!(
                        dbtx,
                        DummyOutcomePrefix,
                        DummyOutcomeKey,
                        DummyOutputOutcome,
                        items,
                        "Dummy Outputs"
                    );
                }
                DbKeyPrefix::SignatureShare => {
                    push_db_pair_items!(
                        dbtx,
                        DummySignatureSharePrefix,
                        DummySignatureShareKey,
                        SerdeSignatureShare,
                        items,
                        "Dummy Signature Shares"
                    );
                }
                DbKeyPrefix::Signature => {
                    push_db_pair_items!(
                        dbtx,
                        DummySignaturePrefix,
                        DummySignatureKey,
                        Option<SerdeSignature>,
                        items,
                        "Dummy Signatures"
                    );
                }
            }
        }

        Box::new(items.into_iter())
    }
}

/// Dummy module
#[derive(Debug)]
pub struct Dummy {
    pub cfg: DummyConfig,
    /// Notifies us to propose an epoch
    pub sign_notify: Notify,
}

/// Implementation of consensus for the server module
#[async_trait]
impl ServerModule for Dummy {
    /// Define the consensus types
    type Common = DummyModuleTypes;
    type Gen = DummyGen;
    type VerificationCache = DummyVerificationCache;

    async fn await_consensus_proposal(&self, dbtx: &mut ModuleDatabaseTransaction<'_>) {
        // Wait until we have a proposal
        if !self.consensus_proposal(dbtx).await.forces_new_epoch() {
            self.sign_notify.notified().await;
        }
    }

    async fn consensus_proposal(
        &self,
        dbtx: &mut ModuleDatabaseTransaction<'_>,
    ) -> ConsensusProposal<DummyConsensusItem> {
        // Sign and send the print requests to consensus
        let sign_requests: Vec<_> = dbtx
            .find_by_prefix(&DummySignaturePrefix)
            .await
            .collect()
            .await;

        let consensus_items = sign_requests
            .into_iter()
            .filter(|(_, sig)| sig.is_none())
            .map(|(DummySignatureKey(message), _)| {
                let sig = self.cfg.private.private_key_share.sign(&message);
                DummyConsensusItem::Sign(message, SerdeSignatureShare(sig))
            });
        ConsensusProposal::new_auto_trigger(consensus_items.collect())
    }

    async fn process_consensus_item<'a, 'b>(
        &'a self,
        dbtx: &mut ModuleDatabaseTransaction<'b>,
        consensus_item: DummyConsensusItem,
        peer_id: PeerId,
    ) -> anyhow::Result<ConsensusDecision> {
        let DummyConsensusItem::Sign(request, share) = consensus_item;

        if dbtx
            .get_value(&DummySignatureShareKey(request.clone(), peer_id))
            .await
            .is_some()
        {
            // We already received a valid signature share
            return Ok(ConsensusDecision::Discard);
        }

        if !self
            .cfg
            .consensus
            .public_key_set
            .public_key_share(peer_id.to_usize())
            .verify(&share.0, request.clone())
        {
            bail!("Signature share is invalid");
        }

        dbtx.insert_new_entry(&DummySignatureShareKey(request.clone(), peer_id), &share)
            .await;

        // Collect all valid signature shares previously received
        let signature_shares = dbtx
            .find_by_prefix(&DummySignatureShareStringPrefix(request.clone()))
            .await
            .collect::<Vec<_>>()
            .await;

        if signature_shares.len() <= self.cfg.consensus.public_key_set.threshold() {
            return Ok(ConsensusDecision::Accept);
        }

        let threshold_signature = self
            .cfg
            .consensus
            .public_key_set
            .combine_signatures(
                signature_shares
                    .iter()
                    .map(|(peer_id, share)| (peer_id.1.to_usize(), &share.0)),
            )
            .expect("We have verified all signature shares before");

        dbtx.remove_by_prefix(&DummySignatureShareStringPrefix(request.clone()))
            .await;

        dbtx.insert_entry(
            &DummySignatureKey(request.to_string()),
            &Some(SerdeSignature(threshold_signature)),
        )
        .await;

        Ok(ConsensusDecision::Accept)
    }

    fn build_verification_cache<'a>(
        &'a self,
        _inputs: impl Iterator<Item = &'a DummyInput> + Send,
    ) -> Self::VerificationCache {
        DummyVerificationCache
    }

    async fn validate_input<'a, 'b>(
        &self,
        dbtx: &mut ModuleDatabaseTransaction<'b>,
        _verification_cache: &Self::VerificationCache,
        input: &'a DummyInput,
    ) -> Result<InputMeta, ModuleError> {
        let current_funds = dbtx.get_value(&DummyFundsKeyV1(input.account)).await;
        let enough_funds = input.amount <= current_funds.unwrap_or(Amount::ZERO);

        // verify user has enough funds or is using the fed account
        if enough_funds || fed_public_key() == input.account {
            return Ok(InputMeta {
                amount: TransactionItemAmount {
                    amount: input.amount,
                    fee: self.cfg.consensus.tx_fee,
                },
                // IMPORTANT: include the pubkey to validate the user signed this tx
                pub_keys: vec![input.account],
            });
        }

        Err(DummyError::NotEnoughFunds).into_module_error_other()
    }

    async fn apply_input<'a, 'b, 'c>(
        &'a self,
        dbtx: &mut ModuleDatabaseTransaction<'c>,
        input: &'b DummyInput,
        cache: &Self::VerificationCache,
    ) -> Result<InputMeta, ModuleError> {
        // TODO: Boiler-plate code
        let meta = self.validate_input(dbtx, cache, input).await?;

        let current_funds = dbtx.get_value(&DummyFundsKeyV1(input.account)).await;
        // Subtract funds from normal user, or print funds for the fed
        let updated_funds = if fed_public_key() == input.account {
            current_funds.unwrap_or(Amount::ZERO) + input.amount
        } else {
            current_funds.unwrap_or(Amount::ZERO) - input.amount
        };
        dbtx.insert_entry(&DummyFundsKeyV1(input.account), &updated_funds)
            .await;

        Ok(meta)
    }

    async fn validate_output(
        &self,
        _dbtx: &mut ModuleDatabaseTransaction<'_>,
        output: &DummyOutput,
    ) -> Result<TransactionItemAmount, ModuleError> {
        Ok(TransactionItemAmount {
            amount: output.amount,
            fee: self.cfg.consensus.tx_fee,
        })
    }

    async fn apply_output<'a, 'b>(
        &'a self,
        dbtx: &mut ModuleDatabaseTransaction<'b>,
        output: &'a DummyOutput,
        out_point: OutPoint,
    ) -> Result<TransactionItemAmount, ModuleError> {
        // TODO: Boiler-plate code
        let meta = self.validate_output(dbtx, output).await?;

        // Add output funds to the user's account
        let current_funds = dbtx.get_value(&DummyFundsKeyV1(output.account)).await;
        let updated_funds = current_funds.unwrap_or(Amount::ZERO) + output.amount;
        dbtx.insert_entry(&DummyFundsKeyV1(output.account), &updated_funds)
            .await;

        // Update the output outcome the user can query
        let outcome = DummyOutputOutcome(updated_funds, output.account);
        dbtx.insert_entry(&DummyOutcomeKey(out_point), &outcome)
            .await;

        Ok(meta)
    }

    async fn output_status(
        &self,
        dbtx: &mut ModuleDatabaseTransaction<'_>,
        out_point: OutPoint,
    ) -> Option<DummyOutputOutcome> {
        // check whether or not the output has been processed
        dbtx.get_value(&DummyOutcomeKey(out_point)).await
    }

    async fn audit(&self, dbtx: &mut ModuleDatabaseTransaction<'_>, audit: &mut Audit) {
        audit
            .add_items(dbtx, &DummyFundsPrefixV1, |k, v| match k {
                // the fed's test account is considered an asset (positive)
                // should be the bitcoin we own in a real module
                DummyFundsKeyV1(key) if key == fed_public_key() => v.msats as i64,
                // a user's funds are a federation's liability (negative)
                DummyFundsKeyV1(_) => -(v.msats as i64),
            })
            .await;
    }

    fn api_endpoints(&self) -> Vec<ApiEndpoint<Self>> {
        vec![
            api_endpoint! {
                // API allows users ask the fed to threshold-sign a message
                "sign_message",
                async |module: &Dummy, context, message: String| -> () {
                    // TODO: Should not write to DB in module APIs
                    let mut dbtx = context.dbtx();
                    dbtx.insert_entry(&DummySignatureKey(message), &None).await;
                    module.sign_notify.notify_one();
                    Ok(())
                }
            },
            api_endpoint! {
                // API waits for the signature to exist
                "wait_signed",
                async |_module: &Dummy, context, message: String| -> SerdeSignature {
                    let future = context.wait_value_matches(DummySignatureKey(message), |sig| sig.is_some());
                    let sig = future.await;
                    Ok(sig.expect("checked is some"))
                }
            },
        ]
    }
}

/// An in-memory cache we could use for faster validation
#[derive(Debug, Clone)]
pub struct DummyVerificationCache;

impl fedimint_core::server::VerificationCache for DummyVerificationCache {}

impl Dummy {
    /// Create new module instance
    pub fn new(cfg: DummyConfig) -> Dummy {
        Dummy {
            cfg,
            sign_notify: Notify::new(),
        }
    }
}


