logo [../../static.files/rust-logo-151179464ae7ed46.svg]../../devimint/index.html
? [../../help.html]
Change settings [../../static.files/wheel-5ec35bf9ca753509.svg]../../settings.html

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
235
236
237
238
239
240
241
242
243
244
245
246
247
248
249
250
251
252
253
254
255
256
257
258
259
260
261
262
263
264
265
266
267
268
269
270
271
272
273
274
275
276
277
278
279
280
281
282
283
284


use std::collections::BTreeMap;

use anyhow::{anyhow, Context};
use bitcoincore_rpc::bitcoin::Network;
use fedimint_aead::random_salt;
use fedimint_core::bitcoinrpc::BitcoinRpcConfig;
use fedimint_core::core::LEGACY_HARDCODED_INSTANCE_ID_WALLET;
use fedimint_core::db::mem_impl::MemDatabase;
use fedimint_core::util::write_new;
use fedimint_core::{Amount, PeerId};
use fedimint_server::config::io::{write_server_config, PLAINTEXT_PASSWORD, SALT_FILE};
use fedimint_server::config::ServerConfig;
use fedimint_testing::federation::local_config_gen_params;
use fedimint_wallet_client::config::WalletClientConfig;
use fedimintd::attach_default_module_gen_params;
use fedimintd::fedimintd::Fedimintd as FedimintBuilder;
use tokio::fs;

use super::*; // TODO: remove this

pub struct Federation {
    // client is only for internal use, use cli commands instead
    client: Arc<UserClient>,
    members: BTreeMap<usize, Fedimintd>,
    vars: BTreeMap<usize, vars::Fedimintd>,
    bitcoind: Bitcoind,
}

impl Federation {
    pub async fn new(
        process_mgr: &ProcessManager,
        bitcoind: Bitcoind,
        vars: BTreeMap<usize, vars::Fedimintd>,
    ) -> Result<Self> {
        let mut members = BTreeMap::new();
        for (peer, var) in &vars {
            members.insert(
                *peer,
                Fedimintd::new(process_mgr, bitcoind.clone(), *peer, var).await?,
            );
        }

        let workdir: PathBuf = env::var("FM_DATA_DIR")?.parse()?;
        let cfg_path = workdir.join("client.json");
        let mut cfg: UserClientConfig = load_from_file(&cfg_path)?;
        let decoders = module_decode_stubs();
        cfg.0 = cfg.0.redecode_raw(&decoders)?;
        let db = Database::new(MemDatabase::new(), module_decode_stubs());
        let module_gens = ClientModuleGenRegistry::from(vec![
            DynClientModuleGen::from(WalletClientGen::default()),
            DynClientModuleGen::from(MintClientGen),
            DynClientModuleGen::from(LightningClientGen),
        ]);
        let client = UserClient::new(cfg, decoders, module_gens, db, Default::default()).await;
        Ok(Self {
            members,
            vars,
            bitcoind,
            client: Arc::new(client),
        })
    }

    pub async fn start_server(&mut self, process_mgr: &ProcessManager, peer: usize) -> Result<()> {
        if self.members.contains_key(&peer) {
            return Err(anyhow!("fedimintd-{} already running", peer));
        }
        self.members.insert(
            peer,
            Fedimintd::new(process_mgr, self.bitcoind.clone(), peer, &self.vars[&peer]).await?,
        );
        Ok(())
    }

    pub async fn kill_server(&mut self, peer_id: usize) -> Result<()> {
        let Some((_, fedimintd)) = self.members.remove_entry(&peer_id) else {
            return Err(anyhow!("fedimintd-{} does not exist", peer_id));
        };
        fedimintd.kill().await?;
        Ok(())
    }

    pub async fn cmd(&self) -> Command {
        let cfg_dir = env::var("FM_DATA_DIR").unwrap();
        cmd!("fedimint-cli", "--data-dir={cfg_dir}")
    }

    pub async fn pegin(&self, amt: u64) -> Result<()> {
        let deposit = cmd!(self, "deposit-address").out_json().await?;
        let deposit_address = deposit["address"].as_str().unwrap();
        let deposit_operation_id = deposit["operation_id"].as_str().unwrap();

        self.bitcoind
            .send_to(deposit_address.to_owned(), amt)
            .await?;
        self.bitcoind.mine_blocks(100).await?;

        cmd!(self, "await-deposit", deposit_operation_id)
            .run()
            .await?;
        Ok(())
    }

    pub async fn pegin_gateway(&self, amt: u64, gw_cln: &Gatewayd) -> Result<()> {
        let fed_id = self.federation_id().await;
        let pegin_addr = cmd!(gw_cln, "address", "--federation-id={fed_id}")
            .out_json()
            .await?
            .as_str()
            .context("address must be a string")?
            .to_owned();
        self.bitcoind.send_to(pegin_addr, amt).await?;
        self.bitcoind.mine_blocks(21).await?;
        poll("gateway pegin", || async {
            let gateway_balance = cmd!(gw_cln, "balance", "--federation-id={fed_id}")
                .out_json()
                .await?
                .as_u64()
                .unwrap();

            Ok(gateway_balance == (amt * 1000))
        })
        .await?;
        Ok(())
    }

    pub async fn federation_id(&self) -> String {
        self.client.config().0.federation_id.to_string()
    }

    pub async fn await_block_sync(&self) -> Result<()> {
        let wallet_cfg: &WalletClientConfig = self
            .client
            .config_ref()
            .0
            .get_module(LEGACY_HARDCODED_INSTANCE_ID_WALLET)?;
        let finality_delay = wallet_cfg.finality_delay;
        let btc_height = self.bitcoind.client().get_blockchain_info()?.blocks;
        let expected = btc_height - (finality_delay as u64);
        cmd!(self, "dev", "wait-block-height", expected)
            .run()
            .await?;
        Ok(())
    }

    pub async fn await_gateways_registered(&self) -> Result<()> {
        poll("gateways registered", || async {
            Ok(cmd!(self, "list-gateways")
                .out_json()
                .await?
                .as_array()
                .map_or(false, |x| x.len() == 2))
        })
        .await?;
        Ok(())
    }

    pub async fn await_all_peers(&self) -> Result<()> {
        cmd!(
            self,
            "dev",
            "api",
            "module_{LEGACY_HARDCODED_INSTANCE_ID_WALLET}_block_height"
        )
        .run()
        .await?;
        Ok(())
    }

    pub async fn use_gateway(&self, gw: &Gatewayd) -> Result<()> {
        let gateway_id = gw.gateway_id().await?;
        cmd!(self, "switch-gateway", gateway_id.clone())
            .run()
            .await?;
        info!(
            "Using {name} gateway",
            name = gw.ln.as_ref().unwrap().name()
        );
        Ok(())
    }

    pub async fn generate_epochs(&self, epochs: usize) -> Result<()> {
        for _ in 0..epochs {
            self.bitcoind.mine_blocks(10).await?;
            self.await_block_sync().await?;
        }
        Ok(())
    }

    pub async fn client_balance(&self) -> Result<u64> {
        Ok(cmd!(self, "info").out_json().await?["total_msat"]
            .as_u64()
            .unwrap())
    }
}

#[derive(Clone)]
pub struct Fedimintd {
    _bitcoind: Bitcoind,
    process: ProcessHandle,
}

impl Fedimintd {
    pub async fn new(
        process_mgr: &ProcessManager,
        bitcoind: Bitcoind,
        peer_id: usize,
        env: &vars::Fedimintd,
    ) -> Result<Self> {
        info!("fedimintd-{peer_id} started");
        let process = process_mgr
            .spawn_daemon(
                &format!("fedimintd-{peer_id}"),
                cmd!("fedimintd").envs(env.vars()),
            )
            .await?;

        Ok(Self {
            _bitcoind: bitcoind,
            process,
        })
    }

    pub async fn kill(self) -> Result<()> {
        self.process.kill().await?;
        Ok(())
    }
}

/// Base port for devimint
const BASE_PORT: u16 = 8173 + 10000;

pub async fn run_config_gen(
    process_mgr: &ProcessManager,
    servers: usize,
    write_password: bool,
) -> Result<BTreeMap<usize, vars::Fedimintd>> {
    // TODO: Use proper builder
    let mut fed = FedimintBuilder::new()?.with_default_modules();
    attach_default_module_gen_params(
        BitcoinRpcConfig::from_env_vars()?,
        &mut fed.server_gen_params,
        Amount::from_sats(100_000_000),
        Network::Regtest,
        10,
    );

    let peers: Vec<_> = (0..servers).map(|id| PeerId::from(id as u16)).collect();
    let params = local_config_gen_params(&peers, BASE_PORT, fed.server_gen_params.clone())?;
    let configs = ServerConfig::trusted_dealer_gen(&params, fed.server_gens.clone());
    let mut fedimintd_envs = BTreeMap::new();
    for (peer, cfg) in configs {
        let bind_metrics_api = format!("127.0.0.1:{}", 3510 + peer.to_usize());
        let envs = vars::Fedimintd::init(&process_mgr.globals, &cfg, bind_metrics_api).await?;
        let password = cfg.private.api_auth.0.clone();
        let data_dir = envs.FM_DATA_DIR.clone();
        fedimintd_envs.insert(peer.to_usize(), envs);
        write_new(data_dir.join(SALT_FILE), random_salt())?;
        write_server_config(&cfg, data_dir.clone(), &password, &fed.server_gens)?;
        if write_password {
            write_new(data_dir.join(PLAINTEXT_PASSWORD), &password)?;
        }
    }

    let out_dir = &fedimintd_envs[&0].FM_DATA_DIR;
    let cfg_dir = &process_mgr.globals.FM_DATA_DIR;
    let out_dir = utf8(out_dir);
    let cfg_dir = utf8(cfg_dir);
    // copy configs to config directory
    fs::rename(
        format!("{out_dir}/client-connect"),
        format!("{cfg_dir}/client-connect"),
    )
    .await?;
    fs::rename(
        format!("{out_dir}/client.json"),
        format!("{cfg_dir}/client.json"),
    )
    .await?;
    info!("copied client configs");

    info!("DKG complete");

    Ok(fedimintd_envs)
}


