logo [../../static.files/rust-logo-151179464ae7ed46.svg]../../fedimint_wasm_tests/index.html
? [../../help.html]
Change settings [../../static.files/wheel-5ec35bf9ca753509.svg]../../settings.html

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152


use anyhow::Result;
use fedimint_client::secret::PlainRootSecretStrategy;
use fedimint_core::api::{GlobalFederationApi, WsClientConnectInfo, WsFederationApi};
use fedimint_core::db::mem_impl::MemDatabase;
use fedimint_ln_client::LightningClientGen;
use fedimint_mint_client::MintClientGen;
use fedimint_wallet_client::WalletClientGen;

async fn client(connect_info: &WsClientConnectInfo) -> Result<fedimint_client::Client> {
    let client = WsFederationApi::from_connect_info(&[connect_info.clone()]);
    let cfg = client.download_client_config(connect_info).await?;
    let mut builder = fedimint_client::ClientBuilder::default();
    builder.with_module(LightningClientGen);
    builder.with_module(MintClientGen);
    builder.with_module(WalletClientGen::default());
    builder.with_primary_module(1);
    builder.with_config(cfg);
    builder.with_database(MemDatabase::default());
    builder.build_stopped::<PlainRootSecretStrategy>().await
}

mod faucet {
    pub async fn connect_string() -> anyhow::Result<String> {
        let resp = gloo_net::http::Request::get("http://localhost:15243/connect-string")
            .send()
            .await?;
        Ok(resp.text().await?)
    }

    pub async fn pay_invoice(invoice: &str) -> anyhow::Result<()> {
        let resp = gloo_net::http::Request::post("http://localhost:15243/pay")
            .body(invoice)
            .send()
            .await?;
        if resp.ok() {
            Ok(())
        } else {
            anyhow::bail!(resp.text().await?);
        }
    }

    pub async fn generate_invoice(amt: u64) -> anyhow::Result<String> {
        let resp = gloo_net::http::Request::post("http://localhost:15243/invoice")
            .body(amt)
            .send()
            .await?;
        if resp.ok() {
            Ok(resp.text().await?)
        } else {
            anyhow::bail!(resp.text().await?);
        }
    }
}

wasm_bindgen_test::wasm_bindgen_test_configure!(run_in_browser);
mod tests {
    use fedimint_core::task::TaskGroup;
    use fedimint_core::Amount;
    use fedimint_ln_client::{LightningClientExt, LnPayState, LnReceiveState, PayType};
    use futures::StreamExt;
    use wasm_bindgen_test::wasm_bindgen_test;

    use super::*;

    #[wasm_bindgen_test]
    async fn build_client() -> Result<()> {
        let _client = client(&faucet::connect_string().await?.parse()?).await?;
        Ok(())
    }

    #[wasm_bindgen_test]
    async fn receive() -> Result<()> {
        let client = client(&faucet::connect_string().await?.parse()?).await?;
        let mut tg = TaskGroup::new();
        client.start_executor(&mut tg).await;
        let gws = client.fetch_registered_gateways().await?;
        let lnd_gw = gws
            .into_iter()
            .find(|x| x.api.to_string() == "http://127.0.0.1:28175/")
            .expect("no gateway with api http://127.0.0.1:28175");

        client.set_active_gateway(&lnd_gw.gateway_id).await?;
        let (opid, invoice) = client
            .create_bolt11_invoice(Amount::from_sats(21), "test".to_string(), None)
            .await?;
        faucet::pay_invoice(&invoice.to_string()).await?;

        let mut updates = client.subscribe_ln_receive(opid).await?.into_stream();
        while let Some(update) = updates.next().await {
            match update {
                LnReceiveState::Claimed => return Ok(()),
                LnReceiveState::Canceled { reason } => {
                    return Err(reason.into());
                }
                _ => {}
            }
        }
        Err(anyhow::anyhow!("Lightning receive failed"))
    }

    #[wasm_bindgen_test]
    async fn receive_and_pay() -> Result<()> {
        let client = client(&faucet::connect_string().await?.parse()?).await?;
        let mut tg = TaskGroup::new();
        client.start_executor(&mut tg).await;
        let gws = client.fetch_registered_gateways().await?;
        let lnd_gw = gws
            .into_iter()
            .find(|x| x.api.to_string() == "http://127.0.0.1:28175/")
            .expect("no gateway with api http://127.0.0.1:28175");

        client.set_active_gateway(&lnd_gw.gateway_id).await?;
        let (opid, invoice) = client
            .create_bolt11_invoice(Amount::from_sats(21), "test".to_string(), None)
            .await?;
        faucet::pay_invoice(&invoice.to_string()).await?;

        let mut updates = client.subscribe_ln_receive(opid).await?.into_stream();

        loop {
            match updates.next().await {
                Some(LnReceiveState::Claimed) => break,
                Some(LnReceiveState::Canceled { reason }) => {
                    return Err(reason.into());
                }
                None => return Err(anyhow::anyhow!("Lightning receive failed")),
                _ => {}
            }
        }

        let bolt11 = faucet::generate_invoice(11).await?;
        let (pay_types, _contract_id) = client.pay_bolt11_invoice(bolt11.parse()?).await?;
        let PayType::Lightning(operation_id) = pay_types else { unreachable!("paying invoice over lightning"); };

        let mut updates = client.subscribe_ln_pay(operation_id).await?.into_stream();

        loop {
            match updates.next().await {
                Some(LnPayState::Success { preimage: _ }) => {
                    break;
                }
                Some(LnPayState::Refunded { gateway_error }) => {
                    return Err(anyhow::anyhow!("refunded {gateway_error}"));
                }
                None => return Err(anyhow::anyhow!("Lightning send failed")),
                _ => {}
            }
        }

        Ok(())
    }
}


