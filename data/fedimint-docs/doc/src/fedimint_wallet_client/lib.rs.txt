logo [../../static.files/rust-logo-151179464ae7ed46.svg]../../fedimint_wallet_client/index.html
? [../../help.html]
Change settings [../../static.files/wheel-5ec35bf9ca753509.svg]../../settings.html

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
235
236
237
238
239
240
241
242
243
244
245
246
247
248
249
250
251
252
253
254
255
256
257
258
259
260
261
262
263
264
265
266
267
268
269
270
271
272
273
274
275
276
277
278
279
280
281
282
283
284
285
286
287
288
289
290
291
292
293
294
295
296
297
298
299
300
301
302
303
304
305
306
307
308
309
310
311
312
313
314
315
316
317
318
319
320
321
322
323
324
325
326
327
328
329
330
331
332
333
334
335
336
337
338
339
340
341
342
343
344
345
346
347
348
349
350
351
352
353
354
355
356
357
358
359
360
361
362
363
364
365
366
367
368
369
370
371
372
373
374
375
376
377
378
379
380
381
382
383
384
385
386
387
388
389
390
391
392
393
394
395
396
397
398
399
400
401
402
403
404
405
406
407
408
409
410
411
412
413
414
415
416
417
418
419
420
421
422
423
424
425
426
427
428
429
430
431
432
433
434
435
436
437
438
439
440
441
442
443
444
445
446
447
448
449
450
451
452
453
454
455
456
457
458
459
460
461
462
463
464
465
466
467
468
469
470
471
472
473
474
475
476
477
478
479
480
481
482
483
484
485
486
487
488
489
490
491
492
493
494
495
496
497
498
499
500
501
502
503
504
505
506
507
508
509
510
511
512
513
514
515
516
517
518
519
520
521
522
523
524
525
526
527
528
529
530
531
532
533
534
535
536
537
538
539
540
541
542
543
544
545
546
547
548
549
550
551
552
553
554
555
556
557
558
559
560
561
562
563
564
565
566
567
568
569
570
571
572
573
574
575
576
577
578
579
580
581
582
583
584
585
586
587
588
589
590
591
592
593
594
595
596
597
598
599
600
601
602
603
604
605
606
607
608
609


pub mod api;

mod deposit;
mod withdraw;

use std::sync::Arc;
use std::time::SystemTime;

use anyhow::{anyhow, bail, ensure};
use async_stream::stream;
use bitcoin::{Address, Network};
use fedimint_bitcoind::{create_bitcoind, DynBitcoindRpc};
use fedimint_client::derivable_secret::DerivableSecret;
use fedimint_client::module::gen::ClientModuleGen;
use fedimint_client::module::{ClientModule, IClientModule};
use fedimint_client::oplog::UpdateStreamOrOutcome;
use fedimint_client::sm::util::MapStateTransitions;
use fedimint_client::sm::{Context, DynState, ModuleNotifier, OperationId, State, StateTransition};
use fedimint_client::transaction::{ClientOutput, TransactionBuilder};
use fedimint_client::{sm_enum_variant_translation, Client, DynGlobalClientContext};
use fedimint_core::api::{DynGlobalApi, DynModuleApi};
use fedimint_core::bitcoinrpc::BitcoinRpcConfig;
use fedimint_core::core::{Decoder, IntoDynInstance, ModuleInstanceId};
use fedimint_core::db::{AutocommitError, Database};
use fedimint_core::encoding::{Decodable, Encodable};
use fedimint_core::module::{
    ApiVersion, CommonModuleGen, ExtendsCommonModuleGen, ModuleCommon, MultiApiVersion,
    TransactionItemAmount,
};
use fedimint_core::task::TaskGroup;
use fedimint_core::{apply, async_trait_maybe_send, Amount, OutPoint};
use fedimint_wallet_common::config::WalletClientConfig;
use fedimint_wallet_common::tweakable::Tweakable;
pub use fedimint_wallet_common::*;
use futures::{Stream, StreamExt};
use miniscript::ToPublicKey;
use rand::{thread_rng, Rng};
use secp256k1::{All, KeyPair, Secp256k1};
use serde::{Deserialize, Serialize};

use crate::api::WalletFederationApi;
use crate::deposit::{CreatedDepositState, DepositStateMachine, DepositStates};
use crate::withdraw::{CreatedWithdrawState, WithdrawStateMachine, WithdrawStates};

#[apply(async_trait_maybe_send!)]
pub trait WalletClientExt {
    async fn get_deposit_address(
        &self,
        valid_until: SystemTime,
    ) -> anyhow::Result<(OperationId, Address)>;

    async fn subscribe_deposit_updates(
        &self,
        operation_id: OperationId,
    ) -> anyhow::Result<UpdateStreamOrOutcome<DepositState>>;

    /// Fetches the fees that would need to be paid to make the withdraw request
    /// using [`WalletClientExt::withdraw`] work *right now*.
    ///
    /// Note that we do not receive a guarantee that these fees will be valid in
    /// the future, thus even the next second using these fees *may* fail.
    /// The caller should be prepared to retry with a new fee estimate.
    async fn get_withdraw_fee(
        &self,
        address: bitcoin::Address,
        amount: bitcoin::Amount,
    ) -> anyhow::Result<PegOutFees>;

    /// Attempt to withdraw a given `amount` of Bitcoin to a destination
    /// `address`. The caller has to supply the fee rate to be used which can be
    /// fetched using [`WalletClientExt::get_withdraw_fee`] and should be
    /// acknowledged by the user since it can be unexpectedly high.
    async fn withdraw(
        &self,
        address: bitcoin::Address,
        amount: bitcoin::Amount,
        fee: PegOutFees,
    ) -> anyhow::Result<OperationId>;

    async fn subscribe_withdraw_updates(
        &self,
        operation_id: OperationId,
    ) -> anyhow::Result<UpdateStreamOrOutcome<WithdrawState>>;
}

#[derive(Debug, Clone, Serialize, Deserialize, Eq, PartialEq)]
pub enum DepositState {
    WaitingForTransaction,
    WaitingForConfirmation,
    Confirmed,
    // TODO: add amount
    Claimed,
    Failed(String),
}

#[derive(Debug, Clone, Serialize, Deserialize, Eq, PartialEq)]
pub enum WithdrawState {
    Created,
    Succeeded(bitcoin::Txid),
    Failed(String),
    // TODO: track refund
    // Refunded,
    // RefundFailed(String),
}

#[apply(async_trait_maybe_send!)]
impl WalletClientExt for Client {
    async fn get_deposit_address(
        &self,
        valid_until: SystemTime,
    ) -> anyhow::Result<(OperationId, Address)> {
        let (wallet_client, instance) =
            self.get_first_module::<WalletClientModule>(&WalletCommonGen::KIND);

        let (operation_id, address) = self
            .db()
            .autocommit(
                |dbtx| {
                    Box::pin(async move {
                        let (operation_id, sm, address) =
                            wallet_client.get_deposit_address(valid_until);
                        // Begin watching the script address
                        wallet_client
                            .rpc
                            .watch_script_history(&address.script_pubkey())
                            .await?;

                        self.add_state_machines(dbtx, vec![DynState::from_typed(instance.id, sm)])
                            .await?;
                        self.operation_log()
                            .add_operation_log_entry(
                                dbtx,
                                operation_id,
                                WalletCommonGen::KIND.as_str(),
                                WalletOperationMeta::Deposit {
                                    address: address.clone(),
                                    expires_at: valid_until,
                                },
                            )
                            .await;

                        Ok((operation_id, address))
                    })
                },
                Some(100),
            )
            .await
            .map_err(|e| match e {
                AutocommitError::CommitFailed {
                    last_error,
                    attempts,
                } => last_error.context(format!("Failed to commit after {attempts} attempts")),
                AutocommitError::ClosureError { error, .. } => error,
            })?;

        Ok((operation_id, address))
    }

    async fn subscribe_deposit_updates(
        &self,
        operation_id: OperationId,
    ) -> anyhow::Result<UpdateStreamOrOutcome<DepositState>> {
        let (wallet_client, _) =
            self.get_first_module::<WalletClientModule>(&WalletCommonGen::KIND);

        let operation_log_entry = self
            .operation_log()
            .get_operation(operation_id)
            .await
            .ok_or(anyhow!("Operation not found"))?;

        if operation_log_entry.operation_type() != WalletCommonGen::KIND.as_str() {
            bail!("Operation is not a wallet operation");
        }

        let operation_meta = operation_log_entry.meta::<WalletOperationMeta>();

        if !matches!(operation_meta, WalletOperationMeta::Deposit { .. }) {
            bail!("Operation is not a deposit operation");
        }

        let mut operation_stream = wallet_client.notifier.subscribe(operation_id).await;
        let tx_subscriber = self.transaction_updates(operation_id).await;

        Ok(
            operation_log_entry.outcome_or_updates(self.db(), operation_id, || {
                stream! {
                    match next_deposit_state(&mut operation_stream).await {
                        Some(DepositStates::Created(_)) => {
                            yield DepositState::WaitingForTransaction;
                        },
                        Some(DepositStates::TimedOut(_)) => {
                            yield DepositState::Failed("Deposit timed out".to_string());
                            return;
                        }
                        Some(s) => {
                            panic!("Unexpected state {s:?}")
                        },
                        None => return,
                    }

                    match next_deposit_state(&mut operation_stream).await {
                        Some(DepositStates::WaitingForConfirmations(_)) => {
                            yield DepositState::WaitingForConfirmation;
                        },
                        Some(s) => {
                            panic!("Unexpected state {s:?}")
                        },
                        None => return,
                    }

                    let claiming = match next_deposit_state(&mut operation_stream).await {
                        Some(DepositStates::Claiming(claiming)) => claiming,
                        Some(s) => {
                            panic!("Unexpected state {s:?}")
                        },
                        None => return,
                    };
                    yield DepositState::Confirmed;

                    if let Err(e) = tx_subscriber.await_tx_accepted(claiming.transaction_id).await {
                        yield DepositState::Failed(format!("Failed to claim: {e:?}"));
                        return;
                    }

                    if let Some(out_point) = claiming.change.as_ref() {
                        self.await_primary_module_output(operation_id, *out_point)
                            .await
                            .expect("Cannot fail if tx was accepted and federation is honest");
                    }
                    yield DepositState::Claimed;
                }
            }),
        )
    }

    async fn get_withdraw_fee(
        &self,
        address: Address,
        amount: bitcoin::Amount,
    ) -> anyhow::Result<PegOutFees> {
        let (wallet_client, _) =
            self.get_first_module::<WalletClientModule>(&WalletCommonGen::KIND);

        wallet_client.get_withdraw_fees(address, amount).await
    }

    async fn withdraw(
        &self,
        address: Address,
        amount: bitcoin::Amount,
        fee: PegOutFees,
    ) -> anyhow::Result<OperationId> {
        let (wallet_client, instance) =
            self.get_first_module::<WalletClientModule>(&WalletCommonGen::KIND);

        let operation_id = OperationId(thread_rng().gen());

        let withdraw_output = wallet_client
            .create_withdraw_output(operation_id, address.clone(), amount, fee.clone())
            .await?;
        let tx_builder =
            TransactionBuilder::new().with_output(withdraw_output.into_dyn(instance.id));

        self.finalize_and_submit_transaction(
            operation_id,
            WalletCommonGen::KIND.as_str(),
            move |_, change| WalletOperationMeta::Withdraw {
                address: address.clone(),
                amount,
                fee: fee.clone(),
                change,
            },
            tx_builder,
        )
        .await?;

        Ok(operation_id)
    }

    async fn subscribe_withdraw_updates(
        &self,
        operation_id: OperationId,
    ) -> anyhow::Result<UpdateStreamOrOutcome<WithdrawState>> {
        let (wallet_client, _) =
            self.get_first_module::<WalletClientModule>(&WalletCommonGen::KIND);

        let operation = self
            .operation_log()
            .get_operation(operation_id)
            .await
            .ok_or(anyhow!("Operation not found"))?;

        if operation.operation_type() != WalletCommonGen::KIND.as_str() {
            bail!("Operation is not a wallet operation");
        }

        let operation_meta = operation.meta::<WalletOperationMeta>();

        let WalletOperationMeta::Withdraw { change, .. } = operation_meta else {
            bail!("Operation is not a withdraw operation");
        };

        let mut operation_stream = wallet_client.notifier.subscribe(operation_id).await;

        Ok(
            operation.outcome_or_updates(self.db(), operation_id, move || {
                stream! {
                    match next_withdraw_state(&mut operation_stream).await {
                        Some(WithdrawStates::Created(_)) => {
                            yield WithdrawState::Created;
                        },
                        Some(s) => {
                            panic!("Unexpected state {s:?}")
                        },
                        None => return,
                    }

                    // TODO: get rid of awaiting change here, there has to be a better way to make tests deterministic
                    if let Some(change_out_point) = change {
                        // Swallowing potential errors since the transaction failing  is handled by
                        // output outcome fetching already
                        let _ = self
                            .await_primary_module_output(operation_id, change_out_point)
                            .await;
                    }

                    match next_withdraw_state(&mut operation_stream).await {
                        Some(WithdrawStates::Aborted(inner)) => {
                            yield WithdrawState::Failed(inner.error);
                        },
                        Some(WithdrawStates::Success(inner)) => {
                            yield WithdrawState::Succeeded(inner.txid);
                        },
                        Some(s) => {
                            panic!("Unexpected state {s:?}")
                        },
                        None => {},
                    }
                }
            }),
        )
    }
}

async fn next_deposit_state<S>(stream: &mut S) -> Option<DepositStates>
where
    S: Stream<Item = WalletClientStates> + Unpin,
{
    loop {
        if let WalletClientStates::Deposit(ds) = stream.next().await? {
            return Some(ds.state);
        }
        tokio::task::yield_now().await;
    }
}

async fn next_withdraw_state<S>(stream: &mut S) -> Option<WithdrawStates>
where
    S: Stream<Item = WalletClientStates> + Unpin,
{
    loop {
        if let WalletClientStates::Withdraw(ds) = stream.next().await? {
            return Some(ds.state);
        }
        tokio::task::yield_now().await;
    }
}

#[derive(Debug, Clone, Default)]
// TODO: should probably move to DB
pub struct WalletClientGen(pub Option<BitcoinRpcConfig>);

impl WalletClientGen {
    pub fn new(rpc: BitcoinRpcConfig) -> Self {
        Self(Some(rpc))
    }
}

impl ExtendsCommonModuleGen for WalletClientGen {
    type Common = WalletCommonGen;
}

#[apply(async_trait_maybe_send!)]
impl ClientModuleGen for WalletClientGen {
    type Module = WalletClientModule;

    fn supported_api_versions(&self) -> MultiApiVersion {
        MultiApiVersion::try_from_iter([ApiVersion { major: 0, minor: 0 }])
            .expect("no version conflicts")
    }

    async fn init(
        &self,
        cfg: WalletClientConfig,
        _db: Database,
        _api_version: ApiVersion,
        _module_root_secret: DerivableSecret,
        notifier: ModuleNotifier<DynGlobalClientContext, <Self::Module as ClientModule>::States>,
        _api: DynGlobalApi,
        module_api: DynModuleApi,
    ) -> anyhow::Result<Self::Module> {
        let rpc_config = self.0.clone().unwrap_or(cfg.default_bitcoin_rpc.clone());
        Ok(WalletClientModule {
            cfg,
            module_api,
            notifier,
            rpc: create_bitcoind(&rpc_config, TaskGroup::new().make_handle())?,
        })
    }
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub enum WalletOperationMeta {
    Deposit {
        address: bitcoin::Address,
        expires_at: SystemTime,
    },
    Withdraw {
        address: bitcoin::Address,
        #[serde(with = "bitcoin::util::amount::serde::as_sat")]
        amount: bitcoin::Amount,
        fee: PegOutFees,
        change: Option<OutPoint>,
    },
}

#[derive(Debug)]
pub struct WalletClientModule {
    cfg: WalletClientConfig,
    module_api: DynModuleApi,
    notifier: ModuleNotifier<DynGlobalClientContext, WalletClientStates>,
    rpc: DynBitcoindRpc,
}

impl ClientModule for WalletClientModule {
    type Common = WalletModuleTypes;
    type ModuleStateMachineContext = WalletClientContext;
    type States = WalletClientStates;

    fn context(&self) -> Self::ModuleStateMachineContext {
        WalletClientContext {
            rpc: self.rpc.clone(),
            wallet_descriptor: self.cfg.peg_in_descriptor.clone(),
            wallet_decoder: self.decoder(),
            secp: Default::default(),
        }
    }

    fn input_amount(&self, input: &<Self::Common as ModuleCommon>::Input) -> TransactionItemAmount {
        TransactionItemAmount {
            amount: Amount::from_sats(input.0.tx_output().value),
            fee: self.cfg.fee_consensus.peg_in_abs,
        }
    }

    fn output_amount(
        &self,
        output: &<Self::Common as ModuleCommon>::Output,
    ) -> TransactionItemAmount {
        TransactionItemAmount {
            amount: output.amount().into(),
            fee: self.cfg.fee_consensus.peg_out_abs,
        }
    }
}

#[derive(Debug, Clone)]
pub struct WalletClientContext {
    rpc: DynBitcoindRpc,
    wallet_descriptor: PegInDescriptor,
    wallet_decoder: Decoder,
    secp: Secp256k1<All>,
}

impl Context for WalletClientContext {}

impl WalletClientModule {
    pub fn get_network(&self) -> Network {
        self.cfg.network
    }

    pub fn get_deposit_address(
        &self,
        valid_until: SystemTime,
    ) -> (OperationId, WalletClientStates, Address) {
        // TODO: derive from root secret
        // TODO: don't use global secp context
        let tweak_key = KeyPair::new(secp256k1::SECP256K1, &mut thread_rng());
        let x_only_pk = tweak_key.public_key().to_x_only_pubkey();
        let operation_id = OperationId(x_only_pk.serialize());

        let address = self
            .cfg
            .peg_in_descriptor
            .tweak(&x_only_pk, secp256k1::SECP256K1)
            .address(self.cfg.network)
            .unwrap();

        let deposit_sm = WalletClientStates::Deposit(DepositStateMachine {
            operation_id,
            state: DepositStates::Created(CreatedDepositState {
                tweak_key,
                timeout_at: valid_until,
            }),
        });

        (operation_id, deposit_sm, address)
    }

    pub async fn get_withdraw_fees(
        &self,
        address: bitcoin::Address,
        amount: bitcoin::Amount,
    ) -> anyhow::Result<PegOutFees> {
        check_address(&address, self.cfg.network)?;

        self.module_api
            .fetch_peg_out_fees(&address, amount)
            .await?
            .ok_or(anyhow!("Federation didn't return peg-out fees"))
    }

    pub async fn create_withdraw_output(
        &self,
        operation_id: OperationId,
        address: bitcoin::Address,
        amount: bitcoin::Amount,
        fees: PegOutFees,
    ) -> anyhow::Result<ClientOutput<WalletOutput, WalletClientStates>> {
        check_address(&address, self.cfg.network)?;

        let output = WalletOutput::PegOut(PegOut {
            recipient: address,
            amount,
            fees,
        });

        let sm_gen = move |txid, out_idx| {
            vec![WalletClientStates::Withdraw(WithdrawStateMachine {
                operation_id,
                state: WithdrawStates::Created(CreatedWithdrawState {
                    fm_outpoint: OutPoint { txid, out_idx },
                }),
            })]
        };

        Ok(ClientOutput::<WalletOutput, WalletClientStates> {
            output,
            state_machines: Arc::new(sm_gen),
        })
    }
}

fn check_address(address: &Address, network: Network) -> anyhow::Result<()> {
    ensure!(
        address.is_valid_for_network(network),
        "Address isn't compatible with the federation's network: {network:?}"
    );

    Ok(())
}

#[derive(Debug, Clone, Eq, PartialEq, Decodable, Encodable)]
pub enum WalletClientStates {
    Deposit(DepositStateMachine),
    Withdraw(WithdrawStateMachine),
}

impl IntoDynInstance for WalletClientStates {
    type DynType = DynState<DynGlobalClientContext>;

    fn into_dyn(self, instance_id: ModuleInstanceId) -> Self::DynType {
        DynState::from_typed(instance_id, self)
    }
}

impl State for WalletClientStates {
    type ModuleContext = WalletClientContext;
    type GlobalContext = DynGlobalClientContext;

    fn transitions(
        &self,
        context: &Self::ModuleContext,
        global_context: &DynGlobalClientContext,
    ) -> Vec<StateTransition<Self>> {
        match self {
            WalletClientStates::Deposit(sm) => {
                sm_enum_variant_translation!(
                    sm.transitions(context, global_context),
                    WalletClientStates::Deposit
                )
            }
            WalletClientStates::Withdraw(sm) => {
                sm_enum_variant_translation!(
                    sm.transitions(context, global_context),
                    WalletClientStates::Withdraw
                )
            }
        }
    }

    fn operation_id(&self) -> OperationId {
        match self {
            WalletClientStates::Deposit(sm) => sm.operation_id(),
            WalletClientStates::Withdraw(sm) => sm.operation_id(),
        }
    }
}


