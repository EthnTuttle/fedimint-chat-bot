☰
logo [../static.files/rust-logo-151179464ae7ed46.svg]
../fedimint_bitcoind/index.html




logo [../static.files/rust-logo-151179464ae7ed46.svg]
../fedimint_bitcoind/index.html


IBITCOINDRPC


REQUIRED METHODS

 * get_block_hash
 * get_block_height
 * get_fee_rate
 * get_network
 * get_tx_block_height
 * get_txout_proof
 * submit_transaction
 * watch_script_history


IMPLEMENTORS


IN FEDIMINT_BITCOIND [index.html]

? [../help.html]
Change settings [../static.files/wheel-5ec35bf9ca753509.svg]../settings.html


TRAIT FEDIMINT_BITCOIND [index.html]::IBITCOINDRPCCopy item path [../static.files/clipboard-7571035ce49a181d.svg]

source [../src/fedimint_bitcoind/lib.rs.html#85-138] · [−]

pub trait IBitcoindRpc: Debughttps://doc.rust-lang.org/1.67.0/core/fmt/trait.Debug.html {
    fn get_network<'life0, 'async_trait>(
        &'life0 self
    ) -> Pinhttps://doc.rust-lang.org/1.67.0/core/pin/struct.Pin.html<Boxhttps://doc.rust-lang.org/1.67.0/alloc/boxed/struct.Box.html<dyn Futurehttps://doc.rust-lang.org/1.67.0/core/future/future/trait.Future.html<Output = Resulttype.Result.html<Network>> + Sendhttps://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html + 'async_trait>>
    where
        Self: 'async_trait,
        'life0: 'async_trait;
    fn get_block_height<'life0, 'async_trait>(
        &'life0 self
    ) -> Pinhttps://doc.rust-lang.org/1.67.0/core/pin/struct.Pin.html<Boxhttps://doc.rust-lang.org/1.67.0/alloc/boxed/struct.Box.html<dyn Futurehttps://doc.rust-lang.org/1.67.0/core/future/future/trait.Future.html<Output = Resulttype.Result.html<u64https://doc.rust-lang.org/1.67.0/std/primitive.u64.html>> + Sendhttps://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html + 'async_trait>>
    where
        Self: 'async_trait,
        'life0: 'async_trait;
    fn get_block_hash<'life0, 'async_trait>(
        &'life0 self,
        height: u64https://doc.rust-lang.org/1.67.0/std/primitive.u64.html
    ) -> Pinhttps://doc.rust-lang.org/1.67.0/core/pin/struct.Pin.html<Boxhttps://doc.rust-lang.org/1.67.0/alloc/boxed/struct.Box.html<dyn Futurehttps://doc.rust-lang.org/1.67.0/core/future/future/trait.Future.html<Output = Resulttype.Result.html<BlockHash>> + Sendhttps://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html + 'async_trait>>
    where
        Self: 'async_trait,
        'life0: 'async_trait;
    fn get_fee_rate<'life0, 'async_trait>(
        &'life0 self,
        confirmation_target: u16https://doc.rust-lang.org/1.67.0/std/primitive.u16.html
    ) -> Pinhttps://doc.rust-lang.org/1.67.0/core/pin/struct.Pin.html<Boxhttps://doc.rust-lang.org/1.67.0/alloc/boxed/struct.Box.html<dyn Futurehttps://doc.rust-lang.org/1.67.0/core/future/future/trait.Future.html<Output = Resulttype.Result.html<Optionhttps://doc.rust-lang.org/1.67.0/core/option/enum.Option.html<Feerate>>> + Sendhttps://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html + 'async_trait>>
    where
        Self: 'async_trait,
        'life0: 'async_trait;
    fn submit_transaction<'life0, 'async_trait>(
        &'life0 self,
        transaction: Transaction
    ) -> Pinhttps://doc.rust-lang.org/1.67.0/core/pin/struct.Pin.html<Boxhttps://doc.rust-lang.org/1.67.0/alloc/boxed/struct.Box.html<dyn Futurehttps://doc.rust-lang.org/1.67.0/core/future/future/trait.Future.html<Output = ()https://doc.rust-lang.org/1.67.0/std/primitive.unit.html> + Sendhttps://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html + 'async_trait>>
    where
        Self: 'async_trait,
        'life0: 'async_trait;
    fn get_tx_block_height<'life0, 'life1, 'async_trait>(
        &'life0 self,
        txid: &'life1 Txid
    ) -> Pinhttps://doc.rust-lang.org/1.67.0/core/pin/struct.Pin.html<Boxhttps://doc.rust-lang.org/1.67.0/alloc/boxed/struct.Box.html<dyn Futurehttps://doc.rust-lang.org/1.67.0/core/future/future/trait.Future.html<Output = Resulttype.Result.html<Optionhttps://doc.rust-lang.org/1.67.0/core/option/enum.Option.html<u64https://doc.rust-lang.org/1.67.0/std/primitive.u64.html>>> + Sendhttps://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html + 'async_trait>>
    where
        Self: 'async_trait,
        'life0: 'async_trait,
        'life1: 'async_trait;
    fn watch_script_history<'life0, 'life1, 'async_trait>(
        &'life0 self,
        script: &'life1 Script
    ) -> Pinhttps://doc.rust-lang.org/1.67.0/core/pin/struct.Pin.html<Boxhttps://doc.rust-lang.org/1.67.0/alloc/boxed/struct.Box.html<dyn Futurehttps://doc.rust-lang.org/1.67.0/core/future/future/trait.Future.html<Output = Resulttype.Result.html<Vechttps://doc.rust-lang.org/1.67.0/alloc/vec/struct.Vec.html<Transaction>>> + Sendhttps://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html + 'async_trait>>
    where
        Self: 'async_trait,
        'life0: 'async_trait,
        'life1: 'async_trait;
    fn get_txout_proof<'life0, 'async_trait>(
        &'life0 self,
        txid: Txid
    ) -> Pinhttps://doc.rust-lang.org/1.67.0/core/pin/struct.Pin.html<Boxhttps://doc.rust-lang.org/1.67.0/alloc/boxed/struct.Box.html<dyn Futurehttps://doc.rust-lang.org/1.67.0/core/future/future/trait.Future.html<Output = Resulttype.Result.html<TxOutProof>> + Sendhttps://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html + 'async_trait>>
    where
        Self: 'async_trait,
        'life0: 'async_trait;
}

Expand description

Trait that allows interacting with the Bitcoin blockchain

Functions may panic if the bitcoind node is not reachable.


REQUIRED METHODS§

source [../src/fedimint_bitcoind/lib.rs.html#87]

FN GET_NETWORK<'LIFE0, 'ASYNC_TRAIT>(
    &'LIFE0 SELF
) -> PIN [https://doc.rust-lang.org/1.67.0/core/pin/struct.Pin.html]<BOX
[https://doc.rust-lang.org/1.67.0/alloc/boxed/struct.Box.html]<DYN FUTURE
[https://doc.rust-lang.org/1.67.0/core/future/future/trait.Future.html]<OUTPUT = RESULT [type.Result.html]<NETWORK>> + SEND
[https://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html] + 'ASYNC_TRAIT>>WHERE
    SELF: 'ASYNC_TRAIT,
    'LIFE0: 'ASYNC_TRAIT,

Returns the Bitcoin network the node is connected to

source [../src/fedimint_bitcoind/lib.rs.html#90]

FN GET_BLOCK_HEIGHT<'LIFE0, 'ASYNC_TRAIT>(
    &'LIFE0 SELF
) -> PIN [https://doc.rust-lang.org/1.67.0/core/pin/struct.Pin.html]<BOX
[https://doc.rust-lang.org/1.67.0/alloc/boxed/struct.Box.html]<DYN FUTURE
[https://doc.rust-lang.org/1.67.0/core/future/future/trait.Future.html]<OUTPUT = RESULT [type.Result.html]<U64
[https://doc.rust-lang.org/1.67.0/std/primitive.u64.html]>> + SEND [https://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html]
+ 'ASYNC_TRAIT>>WHERE
    SELF: 'ASYNC_TRAIT,
    'LIFE0: 'ASYNC_TRAIT,

Returns the current block height

source [../src/fedimint_bitcoind/lib.rs.html#103]

FN GET_BLOCK_HASH<'LIFE0, 'ASYNC_TRAIT>(
    &'LIFE0 SELF,
    HEIGHT: U64 [https://doc.rust-lang.org/1.67.0/std/primitive.u64.html]
) -> PIN [https://doc.rust-lang.org/1.67.0/core/pin/struct.Pin.html]<BOX
[https://doc.rust-lang.org/1.67.0/alloc/boxed/struct.Box.html]<DYN FUTURE
[https://doc.rust-lang.org/1.67.0/core/future/future/trait.Future.html]<OUTPUT = RESULT [type.Result.html]<BLOCKHASH>> + SEND
[https://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html] + 'ASYNC_TRAIT>>WHERE
    SELF: 'ASYNC_TRAIT,
    'LIFE0: 'ASYNC_TRAIT,

Returns the block hash at a given height

PANICS

If the node does not know a block for that height. Make sure to only query blocks of a height less or equal to the one returned by
Self::get_block_height.

While there is a corner case that the blockchain shrinks between these two calls (through on average heavier blocks on a fork)
this is prevented by only querying hashes for blocks tailing the chain tip by a certain number of blocks.

source [../src/fedimint_bitcoind/lib.rs.html#109]

FN GET_FEE_RATE<'LIFE0, 'ASYNC_TRAIT>(
    &'LIFE0 SELF,
    CONFIRMATION_TARGET: U16 [https://doc.rust-lang.org/1.67.0/std/primitive.u16.html]
) -> PIN [https://doc.rust-lang.org/1.67.0/core/pin/struct.Pin.html]<BOX
[https://doc.rust-lang.org/1.67.0/alloc/boxed/struct.Box.html]<DYN FUTURE
[https://doc.rust-lang.org/1.67.0/core/future/future/trait.Future.html]<OUTPUT = RESULT [type.Result.html]<OPTION
[https://doc.rust-lang.org/1.67.0/core/option/enum.Option.html]<FEERATE>>> + SEND
[https://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html] + 'ASYNC_TRAIT>>WHERE
    SELF: 'ASYNC_TRAIT,
    'LIFE0: 'ASYNC_TRAIT,

Estimates the fee rate for a given confirmation target. Make sure that all federation members use the same algorithm to avoid
widely diverging results. If the node is not ready yet to return a fee rate estimation this function returns None.

source [../src/fedimint_bitcoind/lib.rs.html#125]

FN SUBMIT_TRANSACTION<'LIFE0, 'ASYNC_TRAIT>(
    &'LIFE0 SELF,
    TRANSACTION: TRANSACTION
) -> PIN [https://doc.rust-lang.org/1.67.0/core/pin/struct.Pin.html]<BOX
[https://doc.rust-lang.org/1.67.0/alloc/boxed/struct.Box.html]<DYN FUTURE
[https://doc.rust-lang.org/1.67.0/core/future/future/trait.Future.html]<OUTPUT = ()
[https://doc.rust-lang.org/1.67.0/std/primitive.unit.html]> + SEND [https://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html]
+ 'ASYNC_TRAIT>>WHERE
    SELF: 'ASYNC_TRAIT,
    'LIFE0: 'ASYNC_TRAIT,

Submits a transaction to the Bitcoin network

This operation does not return anything as it never OK to consider its success as final anyway. The caller should be retrying
broadcast periodically until it confirms the transaction was actually via other means or decides that is no longer relevant.

Also - most backends considers brodcasting a tx that is already included in the blockchain as an error, which breaks idempotency
and requires brittle workarounds just to reliably ignore… just to retry on the higher level anyway.

Implementations of this error should log errors for debugging purposes when it makes sense.

source [../src/fedimint_bitcoind/lib.rs.html#128]

FN GET_TX_BLOCK_HEIGHT<'LIFE0, 'LIFE1, 'ASYNC_TRAIT>(
    &'LIFE0 SELF,
    TXID: &'LIFE1 TXID
) -> PIN [https://doc.rust-lang.org/1.67.0/core/pin/struct.Pin.html]<BOX
[https://doc.rust-lang.org/1.67.0/alloc/boxed/struct.Box.html]<DYN FUTURE
[https://doc.rust-lang.org/1.67.0/core/future/future/trait.Future.html]<OUTPUT = RESULT [type.Result.html]<OPTION
[https://doc.rust-lang.org/1.67.0/core/option/enum.Option.html]<U64 [https://doc.rust-lang.org/1.67.0/std/primitive.u64.html]>>> +
SEND [https://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html] + 'ASYNC_TRAIT>>WHERE
    SELF: 'ASYNC_TRAIT,
    'LIFE0: 'ASYNC_TRAIT,
    'LIFE1: 'ASYNC_TRAIT,

Check if a transaction is included in a block

source [../src/fedimint_bitcoind/lib.rs.html#134]

FN WATCH_SCRIPT_HISTORY<'LIFE0, 'LIFE1, 'ASYNC_TRAIT>(
    &'LIFE0 SELF,
    SCRIPT: &'LIFE1 SCRIPT
) -> PIN [https://doc.rust-lang.org/1.67.0/core/pin/struct.Pin.html]<BOX
[https://doc.rust-lang.org/1.67.0/alloc/boxed/struct.Box.html]<DYN FUTURE
[https://doc.rust-lang.org/1.67.0/core/future/future/trait.Future.html]<OUTPUT = RESULT [type.Result.html]<VEC
[https://doc.rust-lang.org/1.67.0/alloc/vec/struct.Vec.html]<TRANSACTION>>> + SEND
[https://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html] + 'ASYNC_TRAIT>>WHERE
    SELF: 'ASYNC_TRAIT,
    'LIFE0: 'ASYNC_TRAIT,
    'LIFE1: 'ASYNC_TRAIT,

Watches for a script and returns any transactions associated with it

Should be called once prior to transactions being submitted or watching may not occur

source [../src/fedimint_bitcoind/lib.rs.html#137]

FN GET_TXOUT_PROOF<'LIFE0, 'ASYNC_TRAIT>(
    &'LIFE0 SELF,
    TXID: TXID
) -> PIN [https://doc.rust-lang.org/1.67.0/core/pin/struct.Pin.html]<BOX
[https://doc.rust-lang.org/1.67.0/alloc/boxed/struct.Box.html]<DYN FUTURE
[https://doc.rust-lang.org/1.67.0/core/future/future/trait.Future.html]<OUTPUT = RESULT [type.Result.html]<TXOUTPROOF>> + SEND
[https://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html] + 'ASYNC_TRAIT>>WHERE
    SELF: 'ASYNC_TRAIT,
    'LIFE0: 'ASYNC_TRAIT,

Returns a prooft that a tx is included in the bitcoin blockchain


IMPLEMENTORS§

source [../src/fedimint_bitcoind/lib.rs.html#189-231]§


IMPL<C> IBITCOINDRPC [trait.IBitcoindRpc.html] FOR RETRYCLIENT [struct.RetryClient.html]<C>WHERE
    C: IBITCOINDRPC [trait.IBitcoindRpc.html] + SYNC [https://doc.rust-lang.org/1.67.0/core/marker/trait.Sync.html] + SEND
[https://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html],

