☰
logo [../static.files/rust-logo-151179464ae7ed46.svg]
../fedimint_bitcoind/index.html




logo [../static.files/rust-logo-151179464ae7ed46.svg]
../fedimint_bitcoind/index.html


RESULT


IN FEDIMINT_BITCOIND [index.html]

? [../help.html]
Change settings [../static.files/wheel-5ec35bf9ca753509.svg]../settings.html


TYPE DEFINITION FEDIMINT_BITCOIND [index.html]::RESULTCopy item path [../static.files/clipboard-7571035ce49a181d.svg]

source [https://docs.rs/anyhow/1.0.71/src/anyhow/lib.rs.html#453] · [−]

pub type Result<T, E = Errorhttps://docs.rs/anyhow/1.0.71/anyhow/struct.Error.html> = Resulthttps://doc.rust-lang.org/1.67.0/core/result/enum.Result.html<T, E>;

Expand description

Result<T, Error>

This is a reasonable return type to use throughout your application but also for fn main; if you do, failures will be printed
along with any context [https://docs.rs/anyhow/1.0.71/anyhow/trait.Context.html] and a backtrace if one was captured.

anyhow::Result may be used with one or two type parameters.

use anyhow::Result;

fn demo1() -> Result<T> {...}
           // ^ equivalent to std::result::Result<T, anyhow::Error>

fn demo2() -> Result<T, OtherError> {...}
           // ^ equivalent to std::result::Result<T, OtherError>


EXAMPLE

use anyhow::Result;

fn main() -> Result<()> {
    let config = std::fs::read_to_string("cluster.json")?;
    let map: ClusterMap = serde_json::from_str(&config)?;
    println!("cluster info: {:#?}", map);
    Ok(())
}

