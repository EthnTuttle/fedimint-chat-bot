☰
logo [../static.files/rust-logo-151179464ae7ed46.svg]
../fedimint_mint_client/index.html




logo [../static.files/rust-logo-151179464ae7ed46.svg]
../fedimint_mint_client/index.html


MINTCLIENTEXT


REQUIRED METHODS

 * await_restore_finished
 * reissue_external_notes
 * spend_notes
 * subscribe_reissue_external_notes
 * subscribe_spend_notes
 * try_cancel_spend_notes


IMPLEMENTATIONS ON FOREIGN TYPES

 * Client


IMPLEMENTORS


IN FEDIMINT_MINT_CLIENT [index.html]

? [../help.html]
Change settings [../static.files/wheel-5ec35bf9ca753509.svg]../settings.html


TRAIT FEDIMINT_MINT_CLIENT [index.html]::MINTCLIENTEXTCopy item path [../static.files/clipboard-7571035ce49a181d.svg]

source [../src/fedimint_mint_client/lib.rs.html#77-127] · [−]

pub trait MintClientExt {
    fn reissue_external_notes<'life0, 'async_trait, M>(
        &'life0 self,
        notes: TieredMulti<SpendableNotestruct.SpendableNote.html>,
        extra_meta: M
    ) -> Pinhttps://doc.rust-lang.org/1.67.0/core/pin/struct.Pin.html<Boxhttps://doc.rust-lang.org/1.67.0/alloc/boxed/struct.Box.html<dyn Futurehttps://doc.rust-lang.org/1.67.0/core/future/future/trait.Future.html<Output = Resulthttps://docs.rs/anyhow/1.0.71/anyhow/type.Result.html<OperationId>> + Sendhttps://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html + 'async_trait>>
    where
        M: 'async_trait + Serializehttps://docs.rs/serde/1.0.163/serde/ser/trait.Serialize.html + Sendhttps://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html,
        Self: 'async_trait,
        'life0: 'async_trait;
    fn subscribe_reissue_external_notes<'life0, 'async_trait>(
        &'life0 self,
        operation_id: OperationId
    ) -> Pinhttps://doc.rust-lang.org/1.67.0/core/pin/struct.Pin.html<Boxhttps://doc.rust-lang.org/1.67.0/alloc/boxed/struct.Box.html<dyn Futurehttps://doc.rust-lang.org/1.67.0/core/future/future/trait.Future.html<Output = Resulthttps://docs.rs/anyhow/1.0.71/anyhow/type.Result.html<UpdateStreamOrOutcome<'_, ReissueExternalNotesStateenum.ReissueExternalNotesState.html>>> + Sendhttps://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html + 'async_trait>>
    where
        Self: 'async_trait,
        'life0: 'async_trait;
    fn spend_notes<'life0, 'async_trait, M>(
        &'life0 self,
        min_amount: Amount,
        try_cancel_after: Durationhttps://doc.rust-lang.org/1.67.0/core/time/struct.Duration.html,
        extra_meta: M
    ) -> Pinhttps://doc.rust-lang.org/1.67.0/core/pin/struct.Pin.html<Boxhttps://doc.rust-lang.org/1.67.0/alloc/boxed/struct.Box.html<dyn Futurehttps://doc.rust-lang.org/1.67.0/core/future/future/trait.Future.html<Output = Resulthttps://docs.rs/anyhow/1.0.71/anyhow/type.Result.html<(OperationId, TieredMulti<SpendableNotestruct.SpendableNote.html>)>> + Sendhttps://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html + 'async_trait>>
    where
        M: 'async_trait + Serializehttps://docs.rs/serde/1.0.163/serde/ser/trait.Serialize.html + Sendhttps://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html,
        Self: 'async_trait,
        'life0: 'async_trait;
    fn try_cancel_spend_notes<'life0, 'async_trait>(
        &'life0 self,
        operation_id: OperationId
    ) -> Pinhttps://doc.rust-lang.org/1.67.0/core/pin/struct.Pin.html<Boxhttps://doc.rust-lang.org/1.67.0/alloc/boxed/struct.Box.html<dyn Futurehttps://doc.rust-lang.org/1.67.0/core/future/future/trait.Future.html<Output = ()https://doc.rust-lang.org/1.67.0/std/primitive.unit.html> + Sendhttps://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html + 'async_trait>>
    where
        Self: 'async_trait,
        'life0: 'async_trait;
    fn subscribe_spend_notes<'life0, 'async_trait>(
        &'life0 self,
        operation_id: OperationId
    ) -> Pinhttps://doc.rust-lang.org/1.67.0/core/pin/struct.Pin.html<Boxhttps://doc.rust-lang.org/1.67.0/alloc/boxed/struct.Box.html<dyn Futurehttps://doc.rust-lang.org/1.67.0/core/future/future/trait.Future.html<Output = Resulthttps://docs.rs/anyhow/1.0.71/anyhow/type.Result.html<UpdateStreamOrOutcome<'_, SpendOOBStateenum.SpendOOBState.html>>> + Sendhttps://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html + 'async_trait>>
    where
        Self: 'async_trait,
        'life0: 'async_trait;
    fn await_restore_finished<'life0, 'async_trait>(
        &'life0 self
    ) -> Pinhttps://doc.rust-lang.org/1.67.0/core/pin/struct.Pin.html<Boxhttps://doc.rust-lang.org/1.67.0/alloc/boxed/struct.Box.html<dyn Futurehttps://doc.rust-lang.org/1.67.0/core/future/future/trait.Future.html<Output = Resulthttps://docs.rs/anyhow/1.0.71/anyhow/type.Result.html<()https://doc.rust-lang.org/1.67.0/std/primitive.unit.html>> + Sendhttps://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html + 'async_trait>>
    where
        Self: 'async_trait,
        'life0: 'async_trait;
}


REQUIRED METHODS§

source [../src/fedimint_mint_client/lib.rs.html#81-85]

FN REISSUE_EXTERNAL_NOTES<'LIFE0, 'ASYNC_TRAIT, M>(
    &'LIFE0 SELF,
    NOTES: TIEREDMULTI<SPENDABLENOTE [struct.SpendableNote.html]>,
    EXTRA_META: M
) -> PIN [https://doc.rust-lang.org/1.67.0/core/pin/struct.Pin.html]<BOX
[https://doc.rust-lang.org/1.67.0/alloc/boxed/struct.Box.html]<DYN FUTURE
[https://doc.rust-lang.org/1.67.0/core/future/future/trait.Future.html]<OUTPUT = RESULT
[https://docs.rs/anyhow/1.0.71/anyhow/type.Result.html]<OPERATIONID>> + SEND
[https://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html] + 'ASYNC_TRAIT>>WHERE
    M: 'ASYNC_TRAIT + SERIALIZE [https://docs.rs/serde/1.0.163/serde/ser/trait.Serialize.html] + SEND
[https://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html],
    SELF: 'ASYNC_TRAIT,
    'LIFE0: 'ASYNC_TRAIT,

Try to reissue e-cash notes received from a third party to receive them in our wallet. The progress and outcome can be observed
using MintClientExt::subscribe_reissue_external_notes [trait.MintClientExt.html#tymethod.subscribe_reissue_external_notes].

source [../src/fedimint_mint_client/lib.rs.html#89-92]

FN SUBSCRIBE_REISSUE_EXTERNAL_NOTES<'LIFE0, 'ASYNC_TRAIT>(
    &'LIFE0 SELF,
    OPERATION_ID: OPERATIONID
) -> PIN [https://doc.rust-lang.org/1.67.0/core/pin/struct.Pin.html]<BOX
[https://doc.rust-lang.org/1.67.0/alloc/boxed/struct.Box.html]<DYN FUTURE
[https://doc.rust-lang.org/1.67.0/core/future/future/trait.Future.html]<OUTPUT = RESULT
[https://docs.rs/anyhow/1.0.71/anyhow/type.Result.html]<UPDATESTREAMOROUTCOME<'_, REISSUEEXTERNALNOTESSTATE
[enum.ReissueExternalNotesState.html]>>> + SEND [https://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html] +
'ASYNC_TRAIT>>WHERE
    SELF: 'ASYNC_TRAIT,
    'LIFE0: 'ASYNC_TRAIT,

Subscribe to updates on the progress of a reissue operation started with MintClientExt::reissue_external_notes
[trait.MintClientExt.html#tymethod.reissue_external_notes].

source [../src/fedimint_mint_client/lib.rs.html#105-110]

FN SPEND_NOTES<'LIFE0, 'ASYNC_TRAIT, M>(
    &'LIFE0 SELF,
    MIN_AMOUNT: AMOUNT,
    TRY_CANCEL_AFTER: DURATION [https://doc.rust-lang.org/1.67.0/core/time/struct.Duration.html],
    EXTRA_META: M
) -> PIN [https://doc.rust-lang.org/1.67.0/core/pin/struct.Pin.html]<BOX
[https://doc.rust-lang.org/1.67.0/alloc/boxed/struct.Box.html]<DYN FUTURE
[https://doc.rust-lang.org/1.67.0/core/future/future/trait.Future.html]<OUTPUT = RESULT
[https://docs.rs/anyhow/1.0.71/anyhow/type.Result.html]<(OPERATIONID, TIEREDMULTI<SPENDABLENOTE [struct.SpendableNote.html]>)>> +
SEND [https://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html] + 'ASYNC_TRAIT>>WHERE
    M: 'ASYNC_TRAIT + SERIALIZE [https://docs.rs/serde/1.0.163/serde/ser/trait.Serialize.html] + SEND
[https://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html],
    SELF: 'ASYNC_TRAIT,
    'LIFE0: 'ASYNC_TRAIT,

Fetches and removes notes of at least amount min_amount from the wallet to be sent to the recipient out of band. These spends can
be canceled by calling MintClientExt::try_cancel_spend_notes [trait.MintClientExt.html#tymethod.try_cancel_spend_notes] as long as
the recipient hasn’t reissued the e-cash notes themselves yet.

The client will also automatically attempt to cancel the operation after try_cancel_after time has passed. This is a safety
mechanism to avoid users forgetting about failed out-of-band transactions. The timeout should be chosen such that the recipient
(who is potentially offline at the time of receiving the e-cash notes) had a reasonable timeframe to come online and reissue the
notes themselves.

source [../src/fedimint_mint_client/lib.rs.html#116]

FN TRY_CANCEL_SPEND_NOTES<'LIFE0, 'ASYNC_TRAIT>(
    &'LIFE0 SELF,
    OPERATION_ID: OPERATIONID
) -> PIN [https://doc.rust-lang.org/1.67.0/core/pin/struct.Pin.html]<BOX
[https://doc.rust-lang.org/1.67.0/alloc/boxed/struct.Box.html]<DYN FUTURE
[https://doc.rust-lang.org/1.67.0/core/future/future/trait.Future.html]<OUTPUT = ()
[https://doc.rust-lang.org/1.67.0/std/primitive.unit.html]> + SEND [https://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html]
+ 'ASYNC_TRAIT>>WHERE
    SELF: 'ASYNC_TRAIT,
    'LIFE0: 'ASYNC_TRAIT,

Try to cancel a spend operation started with MintClientExt::spend_notes [trait.MintClientExt.html#tymethod.spend_notes]. If the
e-cash notes have already been spent this operation will fail which can be observed using MintClientExt::subscribe_spend_notes
[trait.MintClientExt.html#tymethod.subscribe_spend_notes].

source [../src/fedimint_mint_client/lib.rs.html#120-123]

FN SUBSCRIBE_SPEND_NOTES<'LIFE0, 'ASYNC_TRAIT>(
    &'LIFE0 SELF,
    OPERATION_ID: OPERATIONID
) -> PIN [https://doc.rust-lang.org/1.67.0/core/pin/struct.Pin.html]<BOX
[https://doc.rust-lang.org/1.67.0/alloc/boxed/struct.Box.html]<DYN FUTURE
[https://doc.rust-lang.org/1.67.0/core/future/future/trait.Future.html]<OUTPUT = RESULT
[https://docs.rs/anyhow/1.0.71/anyhow/type.Result.html]<UPDATESTREAMOROUTCOME<'_, SPENDOOBSTATE [enum.SpendOOBState.html]>>> +
SEND [https://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html] + 'ASYNC_TRAIT>>WHERE
    SELF: 'ASYNC_TRAIT,
    'LIFE0: 'ASYNC_TRAIT,

Subscribe to updates on the progress of a raw e-cash spend operation started with MintClientExt::spend_notes
[trait.MintClientExt.html#tymethod.spend_notes].

source [../src/fedimint_mint_client/lib.rs.html#126]

FN AWAIT_RESTORE_FINISHED<'LIFE0, 'ASYNC_TRAIT>(
    &'LIFE0 SELF
) -> PIN [https://doc.rust-lang.org/1.67.0/core/pin/struct.Pin.html]<BOX
[https://doc.rust-lang.org/1.67.0/alloc/boxed/struct.Box.html]<DYN FUTURE
[https://doc.rust-lang.org/1.67.0/core/future/future/trait.Future.html]<OUTPUT = RESULT
[https://docs.rs/anyhow/1.0.71/anyhow/type.Result.html]<() [https://doc.rust-lang.org/1.67.0/std/primitive.unit.html]>> + SEND
[https://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html] + 'ASYNC_TRAIT>>WHERE
    SELF: 'ASYNC_TRAIT,
    'LIFE0: 'ASYNC_TRAIT,

Awaits the backup restoration to complete


IMPLEMENTATIONS ON FOREIGN TYPES§

source [../src/fedimint_mint_client/lib.rs.html#171-380]§


IMPL MINTCLIENTEXT [trait.MintClientExt.html] FOR CLIENT

source [../src/fedimint_mint_client/lib.rs.html#376-379]§

FN AWAIT_RESTORE_FINISHED<'LIFE0, 'ASYNC_TRAIT>(
    &'LIFE0 SELF
) -> PIN [https://doc.rust-lang.org/1.67.0/core/pin/struct.Pin.html]<BOX
[https://doc.rust-lang.org/1.67.0/alloc/boxed/struct.Box.html]<DYN FUTURE
[https://doc.rust-lang.org/1.67.0/core/future/future/trait.Future.html]<OUTPUT = RESULT
[https://docs.rs/anyhow/1.0.71/anyhow/type.Result.html]<() [https://doc.rust-lang.org/1.67.0/std/primitive.unit.html]>> + SEND
[https://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html] + 'ASYNC_TRAIT>>WHERE
    SELF: 'ASYNC_TRAIT,
    'LIFE0: 'ASYNC_TRAIT,

Waits for the mint backup restoration to finish

source [../src/fedimint_mint_client/lib.rs.html#172-218]§

FN REISSUE_EXTERNAL_NOTES<'LIFE0, 'ASYNC_TRAIT, M>(
    &'LIFE0 SELF,
    NOTES: TIEREDMULTI<SPENDABLENOTE [struct.SpendableNote.html]>,
    EXTRA_META: M
) -> PIN [https://doc.rust-lang.org/1.67.0/core/pin/struct.Pin.html]<BOX
[https://doc.rust-lang.org/1.67.0/alloc/boxed/struct.Box.html]<DYN FUTURE
[https://doc.rust-lang.org/1.67.0/core/future/future/trait.Future.html]<OUTPUT = RESULT
[https://docs.rs/anyhow/1.0.71/anyhow/type.Result.html]<OPERATIONID>> + SEND
[https://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html] + 'ASYNC_TRAIT>>WHERE
    M: 'ASYNC_TRAIT + SERIALIZE [https://docs.rs/serde/1.0.163/serde/ser/trait.Serialize.html] + SEND
[https://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html],
    SELF: 'ASYNC_TRAIT,
    'LIFE0: 'ASYNC_TRAIT,

source [../src/fedimint_mint_client/lib.rs.html#220-262]§

FN SUBSCRIBE_REISSUE_EXTERNAL_NOTES<'LIFE0, 'ASYNC_TRAIT>(
    &'LIFE0 SELF,
    OPERATION_ID: OPERATIONID
) -> PIN [https://doc.rust-lang.org/1.67.0/core/pin/struct.Pin.html]<BOX
[https://doc.rust-lang.org/1.67.0/alloc/boxed/struct.Box.html]<DYN FUTURE
[https://doc.rust-lang.org/1.67.0/core/future/future/trait.Future.html]<OUTPUT = RESULT
[https://docs.rs/anyhow/1.0.71/anyhow/type.Result.html]<UPDATESTREAMOROUTCOME<'_, REISSUEEXTERNALNOTESSTATE
[enum.ReissueExternalNotesState.html]>>> + SEND [https://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html] +
'ASYNC_TRAIT>>WHERE
    SELF: 'ASYNC_TRAIT,
    'LIFE0: 'ASYNC_TRAIT,

source [../src/fedimint_mint_client/lib.rs.html#264-320]§

FN SPEND_NOTES<'LIFE0, 'ASYNC_TRAIT, M>(
    &'LIFE0 SELF,
    MIN_AMOUNT: AMOUNT,
    TRY_CANCEL_AFTER: DURATION [https://doc.rust-lang.org/1.67.0/core/time/struct.Duration.html],
    EXTRA_META: M
) -> PIN [https://doc.rust-lang.org/1.67.0/core/pin/struct.Pin.html]<BOX
[https://doc.rust-lang.org/1.67.0/alloc/boxed/struct.Box.html]<DYN FUTURE
[https://doc.rust-lang.org/1.67.0/core/future/future/trait.Future.html]<OUTPUT = RESULT
[https://docs.rs/anyhow/1.0.71/anyhow/type.Result.html]<(OPERATIONID, TIEREDMULTI<SPENDABLENOTE [struct.SpendableNote.html]>)>> +
SEND [https://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html] + 'ASYNC_TRAIT>>WHERE
    M: 'ASYNC_TRAIT + SERIALIZE [https://docs.rs/serde/1.0.163/serde/ser/trait.Serialize.html] + SEND
[https://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html],
    SELF: 'ASYNC_TRAIT,
    'LIFE0: 'ASYNC_TRAIT,

source [../src/fedimint_mint_client/lib.rs.html#322-327]§

FN TRY_CANCEL_SPEND_NOTES<'LIFE0, 'ASYNC_TRAIT>(
    &'LIFE0 SELF,
    OPERATION_ID: OPERATIONID
) -> PIN [https://doc.rust-lang.org/1.67.0/core/pin/struct.Pin.html]<BOX
[https://doc.rust-lang.org/1.67.0/alloc/boxed/struct.Box.html]<DYN FUTURE
[https://doc.rust-lang.org/1.67.0/core/future/future/trait.Future.html]<OUTPUT = ()
[https://doc.rust-lang.org/1.67.0/std/primitive.unit.html]> + SEND [https://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html]
+ 'ASYNC_TRAIT>>WHERE
    SELF: 'ASYNC_TRAIT,
    'LIFE0: 'ASYNC_TRAIT,

source [../src/fedimint_mint_client/lib.rs.html#329-373]§

FN SUBSCRIBE_SPEND_NOTES<'LIFE0, 'ASYNC_TRAIT>(
    &'LIFE0 SELF,
    OPERATION_ID: OPERATIONID
) -> PIN [https://doc.rust-lang.org/1.67.0/core/pin/struct.Pin.html]<BOX
[https://doc.rust-lang.org/1.67.0/alloc/boxed/struct.Box.html]<DYN FUTURE
[https://doc.rust-lang.org/1.67.0/core/future/future/trait.Future.html]<OUTPUT = RESULT
[https://docs.rs/anyhow/1.0.71/anyhow/type.Result.html]<UPDATESTREAMOROUTCOME<'_, SPENDOOBSTATE [enum.SpendOOBState.html]>>> +
SEND [https://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html] + 'ASYNC_TRAIT>>WHERE
    SELF: 'ASYNC_TRAIT,
    'LIFE0: 'ASYNC_TRAIT,


IMPLEMENTORS§


