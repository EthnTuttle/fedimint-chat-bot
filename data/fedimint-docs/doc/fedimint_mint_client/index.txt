☰
logo [../static.files/rust-logo-151179464ae7ed46.svg]
../fedimint_mint_client/index.html




logo [../static.files/rust-logo-151179464ae7ed46.svg]
../fedimint_mint_client/index.html


CRATE FEDIMINT_MINT_CLIENT

 * Version 0.1.0
 * All Items [all.html]

 * Re-exports
 * Modules
 * Structs
 * Enums
 * Constants
 * Traits
 * Functions

? [../help.html]
Change settings [../static.files/wheel-5ec35bf9ca753509.svg]../settings.html


CRATE FEDIMINT_MINT_CLIENTCopy item path [../static.files/clipboard-7571035ce49a181d.svg]

source [../src/fedimint_mint_client/lib.rs.html#2-1410] · [−]


RE-EXPORTS

pub use fedimint_mint_common as common;


MODULES

common [common/index.html]
config [config/index.html]


STRUCTS

BackupRequest [struct.BackupRequest.html]
BlindNonce [struct.BlindNonce.html]
Nonce [struct.Nonce.html] but blinded by the user key
InsufficientBalanceError [struct.InsufficientBalanceError.html]
MintClientContext [struct.MintClientContext.html]
MintClientGen [struct.MintClientGen.html]
MintClientModule [struct.MintClientModule.html]
MintCommonGen [struct.MintCommonGen.html]
MintConsensusItem [struct.MintConsensusItem.html]
Data structures taking into account different amount tiers A consenus item from one of the federation members contributing
partials signatures to blind nonces submitted in it
MintInput [struct.MintInput.html]
MintMeta [struct.MintMeta.html]
MintModuleTypes [struct.MintModuleTypes.html]
MintOutput [struct.MintOutput.html]
MintOutputBlindSignatures [struct.MintOutputBlindSignatures.html]
Result of Federation members confirming MintOutput [struct.MintOutput.html] by contributing partial signatures via
MintConsensusItem [struct.MintConsensusItem.html]
MintOutputOutcome [struct.MintOutputOutcome.html]
MintOutputSignatureShare [struct.MintOutputSignatureShare.html]
Blind signature share from one Federation peer for a single MintOutput [struct.MintOutput.html]
MintShareErrors [struct.MintShareErrors.html]
Represents an array of mint indexes that delivered faulty shares
Nonce [struct.Nonce.html]
Unique ID of a mint note.
Note [struct.Note.html]
An verifiable one time use IOU from the mint.
NoteIndex [struct.NoteIndex.html]
An index used to deterministically derive Note [struct.Note.html]s
SignedBackupRequest [struct.SignedBackupRequest.html]
SpendOOBRefund [struct.SpendOOBRefund.html]
SpendableNote [struct.SpendableNote.html]
A Note [struct.Note.html] with associated secret key that allows to proof ownership (spend it)


ENUMS

CombineError [enum.CombineError.html]
MintClientStateMachines [enum.MintClientStateMachines.html]
MintError [enum.MintError.html]
PeerErrorType [enum.PeerErrorType.html]
ReissueExternalNotesState [enum.ReissueExternalNotesState.html]
The high-level state of a reissue operation started with MintClientExt::reissue_external_notes
[trait.MintClientExt.html#tymethod.reissue_external_notes].
SpendOOBState [enum.SpendOOBState.html]
The high-level state of a raw e-cash spend operation started with MintClientExt::spend_notes
[trait.MintClientExt.html#tymethod.spend_notes].


CONSTANTS

DEFAULT_MAX_NOTES_PER_DENOMINATION [constant.DEFAULT_MAX_NOTES_PER_DENOMINATION.html]
By default, the maximum notes per denomination when change-making for users
KIND [constant.KIND.html]
LOG_TARGET [constant.LOG_TARGET.html]


TRAITS

MintClientExt [trait.MintClientExt.html]


FUNCTIONS

parse_ecash [fn.parse_ecash.html]
select_notes_from_stream [fn.select_notes_from_stream.html]
