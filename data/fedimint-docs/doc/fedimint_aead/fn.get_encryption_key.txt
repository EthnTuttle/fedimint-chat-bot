☰
logo [../static.files/rust-logo-151179464ae7ed46.svg]
../fedimint_aead/index.html




logo [../static.files/rust-logo-151179464ae7ed46.svg]
../fedimint_aead/index.html


IN FEDIMINT_AEAD [index.html]

? [../help.html]
Change settings [../static.files/wheel-5ec35bf9ca753509.svg]../settings.html


FUNCTION FEDIMINT_AEAD [index.html]::GET_ENCRYPTION_KEYCopy item path [../static.files/clipboard-7571035ce49a181d.svg]

source [../src/fedimint_aead/lib.rs.html#90-99] · [−]

pub fn get_encryption_key(password: &strhttps://doc.rust-lang.org/1.67.0/std/primitive.str.html, salt: &strhttps://doc.rust-lang.org/1.67.0/std/primitive.str.html) -> Resulthttps://docs.rs/anyhow/1.0.71/anyhow/type.Result.html<LessSafeKeystruct.LessSafeKey.html>

Expand description

Key used to encrypt and authenticate data stored on the filesystem with a user password.

We encrypt certain configs to prevent attackers from learning the private keys if they gain file access. We authenticate the
configs to prevent attackers from manipulating the encrypted files.

Users can safely back-up config and salt files on other media the attacker accesses if they do not learn the password and the
password has enough entropy to prevent brute-forcing (e.g. 6 random words).

We use the ChaCha20 stream cipher with Poly1305 message authentication standardized in IETF RFC 8439. Argon2 is used for
memory-hard key stretching along with a 128-bit salt that is randomly generated to discourage rainbow attacks.

 * password - Strong user-created password
 * salt - Nonce >8 bytes to discourage rainbow attacks

