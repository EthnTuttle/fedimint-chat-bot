â˜°
logo [../static.files/rust-logo-151179464ae7ed46.svg]
../fedimint_aead/index.html




logo [../static.files/rust-logo-151179464ae7ed46.svg]
../fedimint_aead/index.html


LESSSAFEKEY


METHODS

 * algorithm
 * new
 * open_in_place
 * open_within
 * seal_in_place
 * seal_in_place_append_tag
 * seal_in_place_separate_tag


TRAIT IMPLEMENTATIONS

 * Debug


AUTO TRAIT IMPLEMENTATIONS

 * RefUnwindSafe
 * Send
 * Sync
 * Unpin
 * UnwindSafe


BLANKET IMPLEMENTATIONS

 * Any
 * Borrow<T>
 * BorrowMut<T>
 * From<T>
 * Into<U>
 * Same<T>
 * TryFrom<U>
 * TryInto<U>
 * VZip<V>


IN FEDIMINT_AEAD [index.html]

? [../help.html]
Change settings [../static.files/wheel-5ec35bf9ca753509.svg]../settings.html


STRUCT FEDIMINT_AEAD [index.html]::LESSSAFEKEYCopy item path [../static.files/clipboard-7571035ce49a181d.svg]

source [https://briansmith.org/rustdoc/src/ring/aead.rs.html#451] Â· [âˆ’]

pub struct LessSafeKey { /* private fields */ }

Expand description

Immutable keys for use in situations where OpeningKey/SealingKey and NonceSequence cannot reasonably be used.

Prefer to use OpeningKey/SealingKey and NonceSequence when practical.


IMPLEMENTATIONSÂ§

source [https://briansmith.org/rustdoc/src/ring/aead.rs.html#455]Â§


IMPL LESSSAFEKEY [struct.LessSafeKey.html]

source [https://briansmith.org/rustdoc/src/ring/aead.rs.html#457]

PUB FN NEW(KEY: UNBOUNDKEY [struct.UnboundKey.html]) -> LESSSAFEKEY [struct.LessSafeKey.html]

Constructs a LessSafeKey from an UnboundKey.

source [https://briansmith.org/rustdoc/src/ring/aead.rs.html#465-472]

PUB FN OPEN_IN_PLACE<A, 'IN_OUT>(
Â Â Â Â &SELF,
Â Â Â Â NONCE: NONCE [https://briansmith.org/rustdoc/ring/aead/nonce/struct.Nonce.html],
Â Â Â Â AAD: AAD [struct.Aad.html]<A>,
Â Â Â Â IN_OUT: &'IN_OUT MUT [U8 [https://doc.rust-lang.org/1.67.0/std/primitive.u8.html]]
) -> RESULT [https://doc.rust-lang.org/1.67.0/core/result/enum.Result.html]<&'IN_OUT MUT [U8
[https://doc.rust-lang.org/1.67.0/std/primitive.u8.html]], UNSPECIFIED
[https://briansmith.org/rustdoc/ring/error/struct.Unspecified.html]>WHERE
Â Â Â Â A: ASREF [https://doc.rust-lang.org/1.67.0/core/convert/trait.AsRef.html]<[U8
[https://doc.rust-lang.org/1.67.0/std/primitive.u8.html]]>,

Like OpeningKey::open_in_place() [https://briansmith.org/rustdoc/ring/aead/struct.OpeningKey.html#method.open_in_place], except it
accepts an arbitrary nonce.

nonce must be unique for every use of the key to open data.

source [https://briansmith.org/rustdoc/src/ring/aead.rs.html#481-489]

PUB FN OPEN_WITHIN<A, 'IN_OUT>(
Â Â Â Â &SELF,
Â Â Â Â NONCE: NONCE [https://briansmith.org/rustdoc/ring/aead/nonce/struct.Nonce.html],
Â Â Â Â AAD: AAD [struct.Aad.html]<A>,
Â Â Â Â IN_OUT: &'IN_OUT MUT [U8 [https://doc.rust-lang.org/1.67.0/std/primitive.u8.html]],
Â Â Â Â CIPHERTEXT_AND_TAG: RANGEFROM [https://doc.rust-lang.org/1.67.0/core/ops/range/struct.RangeFrom.html]<USIZE
[https://doc.rust-lang.org/1.67.0/std/primitive.usize.html]>
) -> RESULT [https://doc.rust-lang.org/1.67.0/core/result/enum.Result.html]<&'IN_OUT MUT [U8
[https://doc.rust-lang.org/1.67.0/std/primitive.u8.html]], UNSPECIFIED
[https://briansmith.org/rustdoc/ring/error/struct.Unspecified.html]>WHERE
Â Â Â Â A: ASREF [https://doc.rust-lang.org/1.67.0/core/convert/trait.AsRef.html]<[U8
[https://doc.rust-lang.org/1.67.0/std/primitive.u8.html]]>,

Like OpeningKey::open_within() [https://briansmith.org/rustdoc/ring/aead/struct.OpeningKey.html#method.open_within], except it
accepts an arbitrary nonce.

nonce must be unique for every use of the key to open data.

source [https://briansmith.org/rustdoc/src/ring/aead.rs.html#497-505]

PUB FN SEAL_IN_PLACE<A, INOUT>(
Â Â Â Â &SELF,
Â Â Â Â NONCE: NONCE [https://briansmith.org/rustdoc/ring/aead/nonce/struct.Nonce.html],
Â Â Â Â AAD: AAD [struct.Aad.html]<A>,
Â Â Â Â IN_OUT: &MUT [https://doc.rust-lang.org/1.67.0/std/primitive.reference.html]INOUT
) -> RESULT [https://doc.rust-lang.org/1.67.0/core/result/enum.Result.html]<()
[https://doc.rust-lang.org/1.67.0/std/primitive.unit.html], UNSPECIFIED
[https://briansmith.org/rustdoc/ring/error/struct.Unspecified.html]>WHERE
Â Â Â Â A: ASREF [https://doc.rust-lang.org/1.67.0/core/convert/trait.AsRef.html]<[U8
[https://doc.rust-lang.org/1.67.0/std/primitive.u8.html]]>,
Â Â Â Â INOUT: ASMUT [https://doc.rust-lang.org/1.67.0/core/convert/trait.AsMut.html]<[U8
[https://doc.rust-lang.org/1.67.0/std/primitive.u8.html]]> + FOR<'IN_OUT> EXTEND
[https://doc.rust-lang.org/1.67.0/core/iter/traits/collect/trait.Extend.html]<&'IN_OUT U8
[https://doc.rust-lang.org/1.67.0/std/primitive.u8.html]>,

ðŸ‘ŽDeprecated: Renamed to seal_in_place_append_tag.

Deprecated. Renamed to seal_in_place_append_tag().

source [https://briansmith.org/rustdoc/src/ring/aead.rs.html#515-523]

PUB FN SEAL_IN_PLACE_APPEND_TAG<A, INOUT>(
Â Â Â Â &SELF,
Â Â Â Â NONCE: NONCE [https://briansmith.org/rustdoc/ring/aead/nonce/struct.Nonce.html],
Â Â Â Â AAD: AAD [struct.Aad.html]<A>,
Â Â Â Â IN_OUT: &MUT [https://doc.rust-lang.org/1.67.0/std/primitive.reference.html]INOUT
) -> RESULT [https://doc.rust-lang.org/1.67.0/core/result/enum.Result.html]<()
[https://doc.rust-lang.org/1.67.0/std/primitive.unit.html], UNSPECIFIED
[https://briansmith.org/rustdoc/ring/error/struct.Unspecified.html]>WHERE
Â Â Â Â A: ASREF [https://doc.rust-lang.org/1.67.0/core/convert/trait.AsRef.html]<[U8
[https://doc.rust-lang.org/1.67.0/std/primitive.u8.html]]>,
Â Â Â Â INOUT: ASMUT [https://doc.rust-lang.org/1.67.0/core/convert/trait.AsMut.html]<[U8
[https://doc.rust-lang.org/1.67.0/std/primitive.u8.html]]> + FOR<'IN_OUT> EXTEND
[https://doc.rust-lang.org/1.67.0/core/iter/traits/collect/trait.Extend.html]<&'IN_OUT U8
[https://doc.rust-lang.org/1.67.0/std/primitive.u8.html]>,

Like SealingKey::seal_in_place_append_tag()
[https://briansmith.org/rustdoc/ring/aead/struct.SealingKey.html#method.seal_in_place_append_tag], except it accepts an arbitrary
nonce.

nonce must be unique for every use of the key to seal data.

source [https://briansmith.org/rustdoc/src/ring/aead.rs.html#534-541]

PUB FN SEAL_IN_PLACE_SEPARATE_TAG<A>(
Â Â Â Â &SELF,
Â Â Â Â NONCE: NONCE [https://briansmith.org/rustdoc/ring/aead/nonce/struct.Nonce.html],
Â Â Â Â AAD: AAD [struct.Aad.html]<A>,
Â Â Â Â IN_OUT: &MUT [U8 [https://doc.rust-lang.org/1.67.0/std/primitive.u8.html]]
) -> RESULT [https://doc.rust-lang.org/1.67.0/core/result/enum.Result.html]<TAG
[https://briansmith.org/rustdoc/ring/aead/struct.Tag.html], UNSPECIFIED
[https://briansmith.org/rustdoc/ring/error/struct.Unspecified.html]>WHERE
Â Â Â Â A: ASREF [https://doc.rust-lang.org/1.67.0/core/convert/trait.AsRef.html]<[U8
[https://doc.rust-lang.org/1.67.0/std/primitive.u8.html]]>,

Like SealingKey::seal_in_place_separate_tag(), except it accepts an arbitrary nonce.

nonce must be unique for every use of the key to seal data.

source [https://briansmith.org/rustdoc/src/ring/aead.rs.html#548]

PUB FN ALGORITHM(&SELF) -> &'STATIC ALGORITHM [https://briansmith.org/rustdoc/ring/aead/struct.Algorithm.html]

The keyâ€™s AEAD algorithm.


TRAIT IMPLEMENTATIONSÂ§

source [https://briansmith.org/rustdoc/src/ring/aead.rs.html#553]Â§


IMPL DEBUG [https://doc.rust-lang.org/1.67.0/core/fmt/trait.Debug.html] FOR LESSSAFEKEY [struct.LessSafeKey.html]

source [https://briansmith.org/rustdoc/src/ring/aead.rs.html#554]Â§

FN FMT [https://doc.rust-lang.org/1.67.0/core/fmt/trait.Debug.html#tymethod.fmt](&SELF, F: &MUT FORMATTER
[https://doc.rust-lang.org/1.67.0/core/fmt/struct.Formatter.html]<'_>) -> RESULT
[https://doc.rust-lang.org/1.67.0/core/result/enum.Result.html]<() [https://doc.rust-lang.org/1.67.0/std/primitive.unit.html],
ERROR [https://doc.rust-lang.org/1.67.0/core/fmt/struct.Error.html]>

Formats the value using the given formatter. Read more [https://doc.rust-lang.org/1.67.0/core/fmt/trait.Debug.html#tymethod.fmt]


AUTO TRAIT IMPLEMENTATIONSÂ§

Â§


IMPL REFUNWINDSAFE [https://doc.rust-lang.org/1.67.0/core/panic/unwind_safe/trait.RefUnwindSafe.html] FOR LESSSAFEKEY
[struct.LessSafeKey.html]

Â§


IMPL SEND [https://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html] FOR LESSSAFEKEY [struct.LessSafeKey.html]

Â§


IMPL SYNC [https://doc.rust-lang.org/1.67.0/core/marker/trait.Sync.html] FOR LESSSAFEKEY [struct.LessSafeKey.html]

Â§


IMPL UNPIN [https://doc.rust-lang.org/1.67.0/core/marker/trait.Unpin.html] FOR LESSSAFEKEY [struct.LessSafeKey.html]

Â§


IMPL UNWINDSAFE [https://doc.rust-lang.org/1.67.0/core/panic/unwind_safe/trait.UnwindSafe.html] FOR LESSSAFEKEY
[struct.LessSafeKey.html]


BLANKET IMPLEMENTATIONSÂ§

source [https://doc.rust-lang.org/1.67.0/src/core/any.rs.html#200]Â§


IMPL<T> ANY [https://doc.rust-lang.org/1.67.0/core/any/trait.Any.html] FOR TWHERE
Â Â Â Â T: 'STATIC + ?SIZED [https://doc.rust-lang.org/1.67.0/core/marker/trait.Sized.html],

source [https://doc.rust-lang.org/1.67.0/src/core/any.rs.html#201]Â§

FN TYPE_ID [https://doc.rust-lang.org/1.67.0/core/any/trait.Any.html#tymethod.type_id](&SELF) -> TYPEID
[https://doc.rust-lang.org/1.67.0/core/any/struct.TypeId.html]

Gets the TypeId of self. Read more [https://doc.rust-lang.org/1.67.0/core/any/trait.Any.html#tymethod.type_id]
source [https://doc.rust-lang.org/1.67.0/src/core/borrow.rs.html#211]Â§


IMPL<T> BORROW [https://doc.rust-lang.org/1.67.0/core/borrow/trait.Borrow.html]<T> FOR TWHERE
Â Â Â Â T: ?SIZED [https://doc.rust-lang.org/1.67.0/core/marker/trait.Sized.html],

const: unstable [https://github.com/rust-lang/rust/issues/91522] Â· source
[https://doc.rust-lang.org/1.67.0/src/core/borrow.rs.html#213]Â§

FN BORROW [https://doc.rust-lang.org/1.67.0/core/borrow/trait.Borrow.html#tymethod.borrow](&SELF) -> &
[https://doc.rust-lang.org/1.67.0/std/primitive.reference.html]T

Immutably borrows from an owned value. Read more [https://doc.rust-lang.org/1.67.0/core/borrow/trait.Borrow.html#tymethod.borrow]
source [https://doc.rust-lang.org/1.67.0/src/core/borrow.rs.html#220]Â§


IMPL<T> BORROWMUT [https://doc.rust-lang.org/1.67.0/core/borrow/trait.BorrowMut.html]<T> FOR TWHERE
Â Â Â Â T: ?SIZED [https://doc.rust-lang.org/1.67.0/core/marker/trait.Sized.html],

const: unstable [https://github.com/rust-lang/rust/issues/91522] Â· source
[https://doc.rust-lang.org/1.67.0/src/core/borrow.rs.html#221]Â§

FN BORROW_MUT [https://doc.rust-lang.org/1.67.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut](&MUT SELF) -> &MUT
[https://doc.rust-lang.org/1.67.0/std/primitive.reference.html]T

Mutably borrows from an owned value. Read more
[https://doc.rust-lang.org/1.67.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut]
source [https://doc.rust-lang.org/1.67.0/src/core/convert/mod.rs.html#733]Â§


IMPL<T> FROM [https://doc.rust-lang.org/1.67.0/core/convert/trait.From.html]<T> FOR T

const: unstable [https://github.com/rust-lang/rust/issues/88674] Â· source
[https://doc.rust-lang.org/1.67.0/src/core/convert/mod.rs.html#736]Â§

FN FROM [https://doc.rust-lang.org/1.67.0/core/convert/trait.From.html#tymethod.from](T: T) -> T

Returns the argument unchanged.

source [https://doc.rust-lang.org/1.67.0/src/core/convert/mod.rs.html#717]Â§


IMPL<T, U> INTO [https://doc.rust-lang.org/1.67.0/core/convert/trait.Into.html]<U> FOR TWHERE
Â Â Â Â U: FROM [https://doc.rust-lang.org/1.67.0/core/convert/trait.From.html]<T>,

const: unstable [https://github.com/rust-lang/rust/issues/88674] Â· source
[https://doc.rust-lang.org/1.67.0/src/core/convert/mod.rs.html#725]Â§

FN INTO [https://doc.rust-lang.org/1.67.0/core/convert/trait.Into.html#tymethod.into](SELF) -> U

Calls U::from(self).

That is, this conversion is whatever the implementation of From [https://doc.rust-lang.org/1.67.0/core/convert/trait.From.html]<T>
for U chooses to do.

source [https://docs.rs/typenum/1.16.0/src/typenum/type_operators.rs.html#34]Â§


IMPL<T> SAME [https://docs.rs/typenum/1.16.0/typenum/type_operators/trait.Same.html]<T> FOR T

Â§

TYPE OUTPUT [https://docs.rs/typenum/1.16.0/typenum/type_operators/trait.Same.html#associatedtype.Output] = T

Should always be Self
source [https://doc.rust-lang.org/1.67.0/src/core/convert/mod.rs.html#775]Â§


IMPL<T, U> TRYFROM [https://doc.rust-lang.org/1.67.0/core/convert/trait.TryFrom.html]<U> FOR TWHERE
Â Â Â Â U: INTO [https://doc.rust-lang.org/1.67.0/core/convert/trait.Into.html]<T>,

Â§

TYPE ERROR [https://doc.rust-lang.org/1.67.0/core/convert/trait.TryFrom.html#associatedtype.Error] = INFALLIBLE
[https://doc.rust-lang.org/1.67.0/core/convert/enum.Infallible.html]

The type returned in the event of a conversion error.
const: unstable [https://github.com/rust-lang/rust/issues/88674] Â· source
[https://doc.rust-lang.org/1.67.0/src/core/convert/mod.rs.html#781]Â§

FN TRY_FROM [https://doc.rust-lang.org/1.67.0/core/convert/trait.TryFrom.html#tymethod.try_from](VALUE: U) -> RESULT
[https://doc.rust-lang.org/1.67.0/core/result/enum.Result.html]<T, <T AS TRYFROM
[https://doc.rust-lang.org/1.67.0/core/convert/trait.TryFrom.html]<U>>::ERROR
[https://doc.rust-lang.org/1.67.0/core/convert/trait.TryFrom.html#associatedtype.Error]>

Performs the conversion.
source [https://doc.rust-lang.org/1.67.0/src/core/convert/mod.rs.html#760]Â§


IMPL<T, U> TRYINTO [https://doc.rust-lang.org/1.67.0/core/convert/trait.TryInto.html]<U> FOR TWHERE
Â Â Â Â U: TRYFROM [https://doc.rust-lang.org/1.67.0/core/convert/trait.TryFrom.html]<T>,

Â§

TYPE ERROR [https://doc.rust-lang.org/1.67.0/core/convert/trait.TryInto.html#associatedtype.Error] = <U AS TRYFROM
[https://doc.rust-lang.org/1.67.0/core/convert/trait.TryFrom.html]<T>>::ERROR
[https://doc.rust-lang.org/1.67.0/core/convert/trait.TryFrom.html#associatedtype.Error]

The type returned in the event of a conversion error.
const: unstable [https://github.com/rust-lang/rust/issues/88674] Â· source
[https://doc.rust-lang.org/1.67.0/src/core/convert/mod.rs.html#766]Â§

FN TRY_INTO [https://doc.rust-lang.org/1.67.0/core/convert/trait.TryInto.html#tymethod.try_into](SELF) -> RESULT
[https://doc.rust-lang.org/1.67.0/core/result/enum.Result.html]<U, <U AS TRYFROM
[https://doc.rust-lang.org/1.67.0/core/convert/trait.TryFrom.html]<T>>::ERROR
[https://doc.rust-lang.org/1.67.0/core/convert/trait.TryFrom.html#associatedtype.Error]>

Performs the conversion.
Â§


IMPL<V, T> VZIP<V> FOR TWHERE
Â Â Â Â V: MULTILANE<T>,

Â§

FN VZIP(SELF) -> V

