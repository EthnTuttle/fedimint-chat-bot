â˜°
logo [../static.files/rust-logo-151179464ae7ed46.svg]
../fedimint_client_legacy/index.html




logo [../static.files/rust-logo-151179464ae7ed46.svg]
../fedimint_client_legacy/index.html


CRATE FEDIMINT_CLIENT_LEGACY

 * Structs
 * Enums
 * Constants
 * Traits
 * Functions
 * Type Definitions

? [../help.html]
Change settings [../static.files/wheel-5ec35bf9ca753509.svg]../settings.html


LIST OF ALL ITEMS


STRUCTS

 * Client [struct.Client.html]
 * ClientSecret [struct.ClientSecret.html]
 * ConcurrencyLock [struct.ConcurrencyLock.html]
 * GatewayClientConfig [struct.GatewayClientConfig.html]
 * PaymentParameters [struct.PaymentParameters.html]
 * UserClientConfig [struct.UserClientConfig.html]
 * api::fake::FederationApiFaker [api/fake/struct.FederationApiFaker.html]
 * db::ClientSecretKey [db/struct.ClientSecretKey.html]
 * db::DbKeyPrefixIter [db/struct.DbKeyPrefixIter.html]
 * ln::LnClient [ln/struct.LnClient.html]
 * ln::PayInvoicePayload [ln/struct.PayInvoicePayload.html]
 * ln::db::ConfirmedInvoiceKey [ln/db/struct.ConfirmedInvoiceKey.html]
 * ln::db::ConfirmedInvoiceKeyPrefix [ln/db/struct.ConfirmedInvoiceKeyPrefix.html]
 * ln::db::DbKeyPrefixIter [ln/db/struct.DbKeyPrefixIter.html]
 * ln::db::LightningGatewayKey [ln/db/struct.LightningGatewayKey.html]
 * ln::db::LightningGatewayKeyPrefix [ln/db/struct.LightningGatewayKeyPrefix.html]
 * ln::db::OutgoingContractAccountKey [ln/db/struct.OutgoingContractAccountKey.html]
 * ln::db::OutgoingContractAccountKeyPrefix [ln/db/struct.OutgoingContractAccountKeyPrefix.html]
 * ln::db::OutgoingPaymentClaimKey [ln/db/struct.OutgoingPaymentClaimKey.html]
 * ln::db::OutgoingPaymentClaimKeyPrefix [ln/db/struct.OutgoingPaymentClaimKeyPrefix.html]
 * ln::db::OutgoingPaymentKey [ln/db/struct.OutgoingPaymentKey.html]
 * ln::db::OutgoingPaymentKeyPrefix [ln/db/struct.OutgoingPaymentKeyPrefix.html]
 * ln::incoming::ConfirmedInvoice [ln/incoming/struct.ConfirmedInvoice.html]
 * ln::incoming::IncomingContractAccount [ln/incoming/struct.IncomingContractAccount.html]
 * ln::outgoing::OutgoingContractAccount [ln/outgoing/struct.OutgoingContractAccount.html]
 * ln::outgoing::OutgoingContractData [ln/outgoing/struct.OutgoingContractData.html]
 * mint::MintClient [mint/struct.MintClient.html]
 * mint::NoteIndex [mint/struct.NoteIndex.html]
 * mint::NoteIssuanceRequest [mint/struct.NoteIssuanceRequest.html]
 * mint::NoteIssuanceRequests [mint/struct.NoteIssuanceRequests.html]
 * mint::SpendableNote [mint/struct.SpendableNote.html]
 * mint::backup::EcashBackup [mint/backup/struct.EcashBackup.html]
 * mint::backup::EcashRecoveryFinalState [mint/backup/struct.EcashRecoveryFinalState.html]
 * mint::backup::Metadata [mint/backup/struct.Metadata.html]
 * mint::backup::PlaintextEcashBackup [mint/backup/struct.PlaintextEcashBackup.html]
 * mint::db::DbKeyPrefixIter [mint/db/struct.DbKeyPrefixIter.html]
 * mint::db::NextECashNoteIndexKey [mint/db/struct.NextECashNoteIndexKey.html]
 * mint::db::NextECashNoteIndexKeyPrefix [mint/db/struct.NextECashNoteIndexKeyPrefix.html]
 * mint::db::NoteKey [mint/db/struct.NoteKey.html]
 * mint::db::NoteKeyPrefix [mint/db/struct.NoteKeyPrefix.html]
 * mint::db::NotesPerDenominationKey [mint/db/struct.NotesPerDenominationKey.html]
 * mint::db::OutputFinalizationKey [mint/db/struct.OutputFinalizationKey.html]
 * mint::db::OutputFinalizationKeyPrefix [mint/db/struct.OutputFinalizationKeyPrefix.html]
 * mint::db::PendingNotesKey [mint/db/struct.PendingNotesKey.html]
 * mint::db::PendingNotesKeyPrefix [mint/db/struct.PendingNotesKeyPrefix.html]
 * transaction::TransactionBuilder [transaction/struct.TransactionBuilder.html]
 * transaction::legacy::Transaction [transaction/legacy/struct.Transaction.html]
 * utils::ClientContext [utils/struct.ClientContext.html]
 * wallet::WalletClient [wallet/struct.WalletClient.html]
 * wallet::db::DbKeyPrefixIter [wallet/db/struct.DbKeyPrefixIter.html]
 * wallet::db::PegInKey [wallet/db/struct.PegInKey.html]
 * wallet::db::PegInPrefixKey [wallet/db/struct.PegInPrefixKey.html]


ENUMS

 * ClientError [enum.ClientError.html]
 * ConfigVerifyError [enum.ConfigVerifyError.html]
 * db::DbKeyPrefix [db/enum.DbKeyPrefix.html]
 * ln::LnClientError [ln/enum.LnClientError.html]
 * ln::db::DbKeyPrefix [ln/db/enum.DbKeyPrefix.html]
 * mint::MintClientError [mint/enum.MintClientError.html]
 * mint::NoteFinalizationError [mint/enum.NoteFinalizationError.html]
 * mint::db::DbKeyPrefix [mint/db/enum.DbKeyPrefix.html]
 * outcome::legacy::OutputOutcome [outcome/legacy/enum.OutputOutcome.html]
 * transaction::legacy::Input [transaction/legacy/enum.Input.html]
 * transaction::legacy::Output [transaction/legacy/enum.Output.html]
 * wallet::WalletClientError [wallet/enum.WalletClientError.html]
 * wallet::db::DbKeyPrefix [wallet/db/enum.DbKeyPrefix.html]


TRAITS

 * api::LnFederationApi [api/trait.LnFederationApi.html]
 * api::MintFederationApi [api/trait.MintFederationApi.html]
 * api::WalletFederationApi [api/trait.WalletFederationApi.html]
 * outcome::legacy::TryIntoOutcome [outcome/legacy/trait.TryIntoOutcome.html]
 * transaction::Final [transaction/trait.Final.html]


FUNCTIONS

 * module_decode_stubs [fn.module_decode_stubs.html]
 * serde_keypair::deserialize [serde_keypair/fn.deserialize.html]
 * serde_keypair::serialize [serde_keypair/fn.serialize.html]
 * utils::from_hex [utils/fn.from_hex.html]
 * utils::network_to_currency [utils/fn.network_to_currency.html]
 * utils::parse_bitcoin_amount [utils/fn.parse_bitcoin_amount.html]
 * utils::parse_ecash [utils/fn.parse_ecash.html]
 * utils::parse_fedimint_amount [utils/fn.parse_fedimint_amount.html]
 * utils::parse_gateway_id [utils/fn.parse_gateway_id.html]
 * utils::parse_peer_id [utils/fn.parse_peer_id.html]
 * utils::serialize_ecash [utils/fn.serialize_ecash.html]


TYPE DEFINITIONS

 * GatewayClient [type.GatewayClient.html]
 * Result [type.Result.html]
 * UserClient [type.UserClient.html]
 * ln::Result [ln/type.Result.html]


CONSTANTS

 * MINT_SECRET_CHILD_ID [constant.MINT_SECRET_CHILD_ID.html]

