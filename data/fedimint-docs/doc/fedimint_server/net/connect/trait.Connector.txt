☰
logo [../../../static.files/rust-logo-151179464ae7ed46.svg]
../../../fedimint_server/index.html




logo [../../../static.files/rust-logo-151179464ae7ed46.svg]
../../../fedimint_server/index.html


CONNECTOR


REQUIRED METHODS

 * connect_framed
 * listen


PROVIDED METHODS

 * into_dyn


IMPLEMENTORS


IN FEDIMINT_SERVER::NET::CONNECT [index.html]

? [../../../help.html]
Change settings [../../../static.files/wheel-5ec35bf9ca753509.svg]../../../settings.html


TRAIT FEDIMINT_SERVER [../../index.html]::NET [../index.html]::CONNECT [index.html]::CONNECTORCopy item path
[../../../static.files/clipboard-7571035ce49a181d.svg]

source [../../../src/fedimint_server/net/connect.rs.html#42-57] · [−]

pub trait Connector<M> {
    fn connect_framed<'life0, 'async_trait>(
        &'life0 self,
        destination: Urlhttps://docs.rs/url/2.3.1/url/struct.Url.html,
        peer: PeerId../../struct.PeerId.html
    ) -> Pinhttps://doc.rust-lang.org/1.67.0/core/pin/struct.Pin.html<Boxhttps://doc.rust-lang.org/1.67.0/alloc/boxed/struct.Box.html<dyn Futurehttps://doc.rust-lang.org/1.67.0/core/future/future/trait.Future.html<Output = ConnectResulttype.ConnectResult.html<M>> + Sendhttps://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html + 'async_trait>>
    where
        Self: 'async_trait,
        'life0: 'async_trait;
    fn listen<'life0, 'async_trait>(
        &'life0 self,
        bind_addr: SocketAddrhttps://doc.rust-lang.org/1.67.0/std/net/socket_addr/enum.SocketAddr.html
    ) -> Pinhttps://doc.rust-lang.org/1.67.0/core/pin/struct.Pin.html<Boxhttps://doc.rust-lang.org/1.67.0/alloc/boxed/struct.Box.html<dyn Futurehttps://doc.rust-lang.org/1.67.0/core/future/future/trait.Future.html<Output = Resulthttps://doc.rust-lang.org/1.67.0/core/result/enum.Result.html<ConnectionListenertype.ConnectionListener.html<M>, Errorhttps://docs.rs/anyhow/1.0.71/anyhow/struct.Error.html>> + Sendhttps://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html + 'async_trait>>
    where
        Self: 'async_trait,
        'life0: 'async_trait;

    fn into_dyn(self) -> AnyConnectortype.AnyConnector.html<M>
    where
        Self: Sizedhttps://doc.rust-lang.org/1.67.0/core/marker/trait.Sized.html + Sendhttps://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html + Synchttps://doc.rust-lang.org/1.67.0/core/marker/trait.Sync.html + Unpinhttps://doc.rust-lang.org/1.67.0/core/marker/trait.Unpin.html + 'static,
    { ... }
}

Expand description

Allows to connect to peers and to listen for incoming connections

Connections are message based (FramedTransport [../framed/trait.FramedTransport.html]) and should be authenticated and encrypted
for production deployments.


REQUIRED METHODS§

source [../../../src/fedimint_server/net/connect.rs.html#44]

FN CONNECT_FRAMED<'LIFE0, 'ASYNC_TRAIT>(
    &'LIFE0 SELF,
    DESTINATION: URL [https://docs.rs/url/2.3.1/url/struct.Url.html],
    PEER: PEERID [../../struct.PeerId.html]
) -> PIN [https://doc.rust-lang.org/1.67.0/core/pin/struct.Pin.html]<BOX
[https://doc.rust-lang.org/1.67.0/alloc/boxed/struct.Box.html]<DYN FUTURE
[https://doc.rust-lang.org/1.67.0/core/future/future/trait.Future.html]<OUTPUT = CONNECTRESULT [type.ConnectResult.html]<M>> +
SEND [https://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html] + 'ASYNC_TRAIT>>WHERE
    SELF: 'ASYNC_TRAIT,
    'LIFE0: 'ASYNC_TRAIT,

Connect to a destination

source [../../../src/fedimint_server/net/connect.rs.html#47]

FN LISTEN<'LIFE0, 'ASYNC_TRAIT>(
    &'LIFE0 SELF,
    BIND_ADDR: SOCKETADDR [https://doc.rust-lang.org/1.67.0/std/net/socket_addr/enum.SocketAddr.html]
) -> PIN [https://doc.rust-lang.org/1.67.0/core/pin/struct.Pin.html]<BOX
[https://doc.rust-lang.org/1.67.0/alloc/boxed/struct.Box.html]<DYN FUTURE
[https://doc.rust-lang.org/1.67.0/core/future/future/trait.Future.html]<OUTPUT = RESULT
[https://doc.rust-lang.org/1.67.0/core/result/enum.Result.html]<CONNECTIONLISTENER [type.ConnectionListener.html]<M>, ERROR
[https://docs.rs/anyhow/1.0.71/anyhow/struct.Error.html]>> + SEND [https://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html] +
'ASYNC_TRAIT>>WHERE
    SELF: 'ASYNC_TRAIT,
    'LIFE0: 'ASYNC_TRAIT,

Listen for incoming connections on bind_addr


PROVIDED METHODS§

source [../../../src/fedimint_server/net/connect.rs.html#51-56]

FN INTO_DYN(SELF) -> ANYCONNECTOR [type.AnyConnector.html]<M>WHERE
    SELF: SIZED [https://doc.rust-lang.org/1.67.0/core/marker/trait.Sized.html] + SEND
[https://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html] + SYNC
[https://doc.rust-lang.org/1.67.0/core/marker/trait.Sync.html] + UNPIN
[https://doc.rust-lang.org/1.67.0/core/marker/trait.Unpin.html] + 'STATIC,

Transform this concrete Connector into an owned trait object version of itself


IMPLEMENTORS§

source [../../../src/fedimint_server/net/connect.rs.html#580-643]§


IMPL<M> CONNECTOR [trait.Connector.html]<M> FOR MOCKCONNECTOR [mock/struct.MockConnector.html]WHERE
    M: DEBUG [https://doc.rust-lang.org/1.67.0/core/fmt/trait.Debug.html] + SERIALIZE
[https://docs.rs/serde/1.0.163/serde/ser/trait.Serialize.html] + DESERIALIZEOWNED
[https://docs.rs/serde/1.0.163/serde/de/trait.DeserializeOwned.html] + SEND
[https://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html] + UNPIN
[https://doc.rust-lang.org/1.67.0/core/marker/trait.Unpin.html] + 'STATIC,

source [../../../src/fedimint_server/net/connect.rs.html#159-227]§


IMPL<M> CONNECTOR [trait.Connector.html]<M> FOR TLSTCPCONNECTOR [struct.TlsTcpConnector.html]WHERE
    M: DEBUG [https://doc.rust-lang.org/1.67.0/core/fmt/trait.Debug.html] + SERIALIZE
[https://docs.rs/serde/1.0.163/serde/ser/trait.Serialize.html] + DESERIALIZEOWNED
[https://docs.rs/serde/1.0.163/serde/de/trait.DeserializeOwned.html] + SEND
[https://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html] + UNPIN
[https://doc.rust-lang.org/1.67.0/core/marker/trait.Unpin.html] + 'STATIC,

