☰
logo [../../../static.files/rust-logo-151179464ae7ed46.svg]
../../../fedimint_server/index.html




logo [../../../static.files/rust-logo-151179464ae7ed46.svg]
../../../fedimint_server/index.html


CLIENTMODULE


REQUIRED ASSOCIATED TYPES

 * Module


REQUIRED ASSOCIATED CONSTANTS

 * KIND


REQUIRED METHODS

 * decoder
 * input_amount
 * output_amount


PROVIDED METHODS

 * module_kind


IMPLEMENTORS


IN FEDIMINT_SERVER::CORE::CLIENT [index.html]

? [../../../help.html]
Change settings [../../../static.files/wheel-5ec35bf9ca753509.svg]../../../settings.html


TRAIT FEDIMINT_SERVER [../../index.html]::CORE [../index.html]::CLIENT [index.html]::CLIENTMODULECopy item path
[../../../static.files/clipboard-7571035ce49a181d.svg]

[−]

pub trait ClientModule: Debughttps://doc.rust-lang.org/1.67.0/core/fmt/trait.Debug.html {
    type Module: ModuleCommon../../module/trait.ModuleCommon.html;

    const KIND: &'static strhttps://doc.rust-lang.org/1.67.0/std/primitive.str.html;

    fn decoder(&self) -> Decoder../struct.Decoder.html;
    fn input_amount(
        &self,
        input: &<Self::Moduletrait.ClientModule.html#associatedtype.Module as ModuleCommon../../module/trait.ModuleCommon.html>::Input../../module/trait.ModuleCommon.html#associatedtype.Input
    ) -> TransactionItemAmount../../module/struct.TransactionItemAmount.html;
    fn output_amount(
        &self,
        output: &<Self::Moduletrait.ClientModule.html#associatedtype.Module as ModuleCommon../../module/trait.ModuleCommon.html>::Output../../module/trait.ModuleCommon.html#associatedtype.Output
    ) -> TransactionItemAmount../../module/struct.TransactionItemAmount.html;

    fn module_kind() -> ModuleKind../struct.ModuleKind.html { ... }
}


REQUIRED ASSOCIATED TYPES§

TYPE MODULE: MODULECOMMON [../../module/trait.ModuleCommon.html]


REQUIRED ASSOCIATED CONSTANTS§

CONST KIND: &'STATIC STR [https://doc.rust-lang.org/1.67.0/std/primitive.str.html]


REQUIRED METHODS§

FN DECODER(&SELF) -> DECODER [../struct.Decoder.html]

FN INPUT_AMOUNT(
    &SELF,
    INPUT: &<SELF::MODULE [trait.ClientModule.html#associatedtype.Module] AS MODULECOMMON
[../../module/trait.ModuleCommon.html]>::INPUT [../../module/trait.ModuleCommon.html#associatedtype.Input]
) -> TRANSACTIONITEMAMOUNT [../../module/struct.TransactionItemAmount.html]

Returns the amount represented by the input and the fee its processing requires

FN OUTPUT_AMOUNT(
    &SELF,
    OUTPUT: &<SELF::MODULE [trait.ClientModule.html#associatedtype.Module] AS MODULECOMMON
[../../module/trait.ModuleCommon.html]>::OUTPUT [../../module/trait.ModuleCommon.html#associatedtype.Output]
) -> TRANSACTIONITEMAMOUNT [../../module/struct.TransactionItemAmount.html]

Returns the amount represented by the output and the fee its processing requires


PROVIDED METHODS§

FN MODULE_KIND() -> MODULEKIND [../struct.ModuleKind.html]


IMPLEMENTORS§


