☰
logo [../../../static.files/rust-logo-151179464ae7ed46.svg]
../../../fedimint_server/index.html




logo [../../../static.files/rust-logo-151179464ae7ed46.svg]
../../../fedimint_server/index.html


ISERVERMODULE


REQUIRED METHODS

 * api_endpoints
 * apply_input
 * apply_output
 * as_any
 * audit
 * await_consensus_proposal
 * build_verification_cache
 * consensus_proposal
 * decoder
 * output_status
 * process_consensus_item
 * validate_input
 * validate_output


IMPLEMENTORS


IN FEDIMINT_SERVER::CORE::SERVER [index.html]

? [../../../help.html]
Change settings [../../../static.files/wheel-5ec35bf9ca753509.svg]../../../settings.html


TRAIT FEDIMINT_SERVER [../../index.html]::CORE [../index.html]::SERVER [index.html]::ISERVERMODULECopy item path
[../../../static.files/clipboard-7571035ce49a181d.svg]

[−]

pub trait IServerModule: Debughttps://doc.rust-lang.org/1.67.0/core/fmt/trait.Debug.html {
Show 13 methods    fn as_any(&self) -> &(dyn Anyhttps://doc.rust-lang.org/1.67.0/core/any/trait.Any.html + 'static);
    fn decoder(&self) -> Decoder../struct.Decoder.html;
    fn await_consensus_proposal<'life0, 'life1, 'life2, 'async_trait>(
        &'life0 self,
        dbtx: &'life1 mut ModuleDatabaseTransaction<'life2, u16https://doc.rust-lang.org/1.67.0/std/primitive.u16.html>
    ) -> Pinhttps://doc.rust-lang.org/1.67.0/core/pin/struct.Pin.html<Boxhttps://doc.rust-lang.org/1.67.0/alloc/boxed/struct.Box.html<dyn Futurehttps://doc.rust-lang.org/1.67.0/core/future/future/trait.Future.html<Output = ()https://doc.rust-lang.org/1.67.0/std/primitive.unit.html> + Sendhttps://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html + 'async_trait, Globalhttps://doc.rust-lang.org/1.67.0/alloc/alloc/struct.Global.html>>
    where
        'life0: 'async_trait,
        'life1: 'async_trait,
        'life2: 'async_trait,
        Self: 'async_trait;
    fn consensus_proposal<'life0, 'life1, 'life2, 'async_trait>(
        &'life0 self,
        dbtx: &'life1 mut ModuleDatabaseTransaction<'life2, u16https://doc.rust-lang.org/1.67.0/std/primitive.u16.html>,
        module_instance_id: u16https://doc.rust-lang.org/1.67.0/std/primitive.u16.html
    ) -> Pinhttps://doc.rust-lang.org/1.67.0/core/pin/struct.Pin.html<Boxhttps://doc.rust-lang.org/1.67.0/alloc/boxed/struct.Box.html<dyn Futurehttps://doc.rust-lang.org/1.67.0/core/future/future/trait.Future.html<Output = ConsensusProposal../../module/enum.ConsensusProposal.html<DynModuleConsensusItem../struct.DynModuleConsensusItem.html>> + Sendhttps://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html + 'async_trait, Globalhttps://doc.rust-lang.org/1.67.0/alloc/alloc/struct.Global.html>>
    where
        'life0: 'async_trait,
        'life1: 'async_trait,
        'life2: 'async_trait,
        Self: 'async_trait;
    fn process_consensus_item<'a, 'life0, 'life1, 'async_trait>(
        &'life0 self,
        dbtx: &'life1 mut ModuleDatabaseTransaction<'a, u16https://doc.rust-lang.org/1.67.0/std/primitive.u16.html>,
        consensus_item: DynModuleConsensusItem../struct.DynModuleConsensusItem.html,
        peer_id: PeerId../../struct.PeerId.html
    ) -> Pinhttps://doc.rust-lang.org/1.67.0/core/pin/struct.Pin.html<Boxhttps://doc.rust-lang.org/1.67.0/alloc/boxed/struct.Box.html<dyn Futurehttps://doc.rust-lang.org/1.67.0/core/future/future/trait.Future.html<Output = Resulthttps://doc.rust-lang.org/1.67.0/core/result/enum.Result.html<ConsensusDecision../../enum.ConsensusDecision.html, Errorhttps://docs.rs/anyhow/1.0.71/anyhow/struct.Error.html>> + Sendhttps://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html + 'async_trait, Globalhttps://doc.rust-lang.org/1.67.0/alloc/alloc/struct.Global.html>>
    where
        'a: 'async_trait,
        'life0: 'async_trait,
        'life1: 'async_trait,
        Self: 'async_trait;
    fn build_verification_cache(
        &self,
        inputs: &[DynInput../struct.DynInput.html]
    ) -> DynVerificationCachestruct.DynVerificationCache.html;
    fn validate_input<'a, 'life0, 'life1, 'life2, 'life3, 'life4, 'async_trait>(
        &'life0 self,
        dbtx: &'life1 mut ModuleDatabaseTransaction<'life2, u16https://doc.rust-lang.org/1.67.0/std/primitive.u16.html>,
        verification_cache: &'life3 DynVerificationCachestruct.DynVerificationCache.html,
        input: &'life4 DynInput../struct.DynInput.html
    ) -> Pinhttps://doc.rust-lang.org/1.67.0/core/pin/struct.Pin.html<Boxhttps://doc.rust-lang.org/1.67.0/alloc/boxed/struct.Box.html<dyn Futurehttps://doc.rust-lang.org/1.67.0/core/future/future/trait.Future.html<Output = Resulthttps://doc.rust-lang.org/1.67.0/core/result/enum.Result.html<InputMeta../../module/struct.InputMeta.html, ModuleError../../module/enum.ModuleError.html>> + Sendhttps://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html + 'async_trait, Globalhttps://doc.rust-lang.org/1.67.0/alloc/alloc/struct.Global.html>>
    where
        'a: 'async_trait,
        'life0: 'async_trait,
        'life1: 'async_trait,
        'life2: 'async_trait,
        'life3: 'async_trait,
        'life4: 'async_trait,
        Self: 'async_trait;
    fn apply_input<'a, 'b, 'c, 'life0, 'life1, 'async_trait>(
        &'a self,
        dbtx: &'life0 mut ModuleDatabaseTransaction<'c, u16https://doc.rust-lang.org/1.67.0/std/primitive.u16.html>,
        input: &'b DynInput../struct.DynInput.html,
        verification_cache: &'life1 DynVerificationCachestruct.DynVerificationCache.html
    ) -> Pinhttps://doc.rust-lang.org/1.67.0/core/pin/struct.Pin.html<Boxhttps://doc.rust-lang.org/1.67.0/alloc/boxed/struct.Box.html<dyn Futurehttps://doc.rust-lang.org/1.67.0/core/future/future/trait.Future.html<Output = Resulthttps://doc.rust-lang.org/1.67.0/core/result/enum.Result.html<InputMeta../../module/struct.InputMeta.html, ModuleError../../module/enum.ModuleError.html>> + Sendhttps://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html + 'async_trait, Globalhttps://doc.rust-lang.org/1.67.0/alloc/alloc/struct.Global.html>>
    where
        'a: 'async_trait,
        'b: 'async_trait,
        'c: 'async_trait,
        'life0: 'async_trait,
        'life1: 'async_trait,
        Self: 'async_trait;
    fn validate_output<'life0, 'life1, 'life2, 'life3, 'async_trait>(
        &'life0 self,
        dbtx: &'life1 mut ModuleDatabaseTransaction<'life2, u16https://doc.rust-lang.org/1.67.0/std/primitive.u16.html>,
        output: &'life3 DynOutput../struct.DynOutput.html
    ) -> Pinhttps://doc.rust-lang.org/1.67.0/core/pin/struct.Pin.html<Boxhttps://doc.rust-lang.org/1.67.0/alloc/boxed/struct.Box.html<dyn Futurehttps://doc.rust-lang.org/1.67.0/core/future/future/trait.Future.html<Output = Resulthttps://doc.rust-lang.org/1.67.0/core/result/enum.Result.html<TransactionItemAmount../../module/struct.TransactionItemAmount.html, ModuleError../../module/enum.ModuleError.html>> + Sendhttps://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html + 'async_trait, Globalhttps://doc.rust-lang.org/1.67.0/alloc/alloc/struct.Global.html>>
    where
        'life0: 'async_trait,
        'life1: 'async_trait,
        'life2: 'async_trait,
        'life3: 'async_trait,
        Self: 'async_trait;
    fn apply_output<'a, 'life0, 'life1, 'life2, 'async_trait>(
        &'life0 self,
        dbtx: &'life1 mut ModuleDatabaseTransaction<'a, u16https://doc.rust-lang.org/1.67.0/std/primitive.u16.html>,
        output: &'life2 DynOutput../struct.DynOutput.html,
        out_point: OutPoint../../struct.OutPoint.html
    ) -> Pinhttps://doc.rust-lang.org/1.67.0/core/pin/struct.Pin.html<Boxhttps://doc.rust-lang.org/1.67.0/alloc/boxed/struct.Box.html<dyn Futurehttps://doc.rust-lang.org/1.67.0/core/future/future/trait.Future.html<Output = Resulthttps://doc.rust-lang.org/1.67.0/core/result/enum.Result.html<TransactionItemAmount../../module/struct.TransactionItemAmount.html, ModuleError../../module/enum.ModuleError.html>> + Sendhttps://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html + 'async_trait, Globalhttps://doc.rust-lang.org/1.67.0/alloc/alloc/struct.Global.html>>
    where
        'a: 'async_trait,
        'life0: 'async_trait,
        'life1: 'async_trait,
        'life2: 'async_trait,
        Self: 'async_trait;
    fn output_status<'life0, 'life1, 'life2, 'async_trait>(
        &'life0 self,
        dbtx: &'life1 mut ModuleDatabaseTransaction<'life2, u16https://doc.rust-lang.org/1.67.0/std/primitive.u16.html>,
        out_point: OutPoint../../struct.OutPoint.html,
        module_instance_id: u16https://doc.rust-lang.org/1.67.0/std/primitive.u16.html
    ) -> Pinhttps://doc.rust-lang.org/1.67.0/core/pin/struct.Pin.html<Boxhttps://doc.rust-lang.org/1.67.0/alloc/boxed/struct.Box.html<dyn Futurehttps://doc.rust-lang.org/1.67.0/core/future/future/trait.Future.html<Output = Optionhttps://doc.rust-lang.org/1.67.0/core/option/enum.Option.html<DynOutputOutcome../struct.DynOutputOutcome.html>> + Sendhttps://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html + 'async_trait, Globalhttps://doc.rust-lang.org/1.67.0/alloc/alloc/struct.Global.html>>
    where
        'life0: 'async_trait,
        'life1: 'async_trait,
        'life2: 'async_trait,
        Self: 'async_trait;
    fn audit<'life0, 'life1, 'life2, 'life3, 'async_trait>(
        &'life0 self,
        dbtx: &'life1 mut ModuleDatabaseTransaction<'life2, u16https://doc.rust-lang.org/1.67.0/std/primitive.u16.html>,
        audit: &'life3 mut Audit../../module/audit/struct.Audit.html
    ) -> Pinhttps://doc.rust-lang.org/1.67.0/core/pin/struct.Pin.html<Boxhttps://doc.rust-lang.org/1.67.0/alloc/boxed/struct.Box.html<dyn Futurehttps://doc.rust-lang.org/1.67.0/core/future/future/trait.Future.html<Output = ()https://doc.rust-lang.org/1.67.0/std/primitive.unit.html> + Sendhttps://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html + 'async_trait, Globalhttps://doc.rust-lang.org/1.67.0/alloc/alloc/struct.Global.html>>
    where
        'life0: 'async_trait,
        'life1: 'async_trait,
        'life2: 'async_trait,
        'life3: 'async_trait,
        Self: 'async_trait;
    fn api_endpoints(&self) -> Vechttps://doc.rust-lang.org/1.67.0/alloc/vec/struct.Vec.html<ApiEndpoint../../module/struct.ApiEndpoint.html<DynServerModulestruct.DynServerModule.html>, Globalhttps://doc.rust-lang.org/1.67.0/alloc/alloc/struct.Global.html> ⓘ;
}

Expand description

Backend side module interface

Server side Fedimint module needs to implement this trait.


REQUIRED METHODS§

FN AS_ANY(&SELF) -> &(DYN ANY [https://doc.rust-lang.org/1.67.0/core/any/trait.Any.html] + 'STATIC)

FN DECODER(&SELF) -> DECODER [../struct.Decoder.html]

Returns the decoder belonging to the server module

FN AWAIT_CONSENSUS_PROPOSAL<'LIFE0, 'LIFE1, 'LIFE2, 'ASYNC_TRAIT>(
    &'LIFE0 SELF,
    DBTX: &'LIFE1 MUT MODULEDATABASETRANSACTION<'LIFE2, U16 [https://doc.rust-lang.org/1.67.0/std/primitive.u16.html]>
) -> PIN [https://doc.rust-lang.org/1.67.0/core/pin/struct.Pin.html]<BOX
[https://doc.rust-lang.org/1.67.0/alloc/boxed/struct.Box.html]<DYN FUTURE
[https://doc.rust-lang.org/1.67.0/core/future/future/trait.Future.html]<OUTPUT = ()
[https://doc.rust-lang.org/1.67.0/std/primitive.unit.html]> + SEND [https://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html]
+ 'ASYNC_TRAIT, GLOBAL [https://doc.rust-lang.org/1.67.0/alloc/alloc/struct.Global.html]>>WHERE
    'LIFE0: 'ASYNC_TRAIT,
    'LIFE1: 'ASYNC_TRAIT,
    'LIFE2: 'ASYNC_TRAIT,
    SELF: 'ASYNC_TRAIT,

Blocks until a new consensus_proposal is available.

FN CONSENSUS_PROPOSAL<'LIFE0, 'LIFE1, 'LIFE2, 'ASYNC_TRAIT>(
    &'LIFE0 SELF,
    DBTX: &'LIFE1 MUT MODULEDATABASETRANSACTION<'LIFE2, U16 [https://doc.rust-lang.org/1.67.0/std/primitive.u16.html]>,
    MODULE_INSTANCE_ID: U16 [https://doc.rust-lang.org/1.67.0/std/primitive.u16.html]
) -> PIN [https://doc.rust-lang.org/1.67.0/core/pin/struct.Pin.html]<BOX
[https://doc.rust-lang.org/1.67.0/alloc/boxed/struct.Box.html]<DYN FUTURE
[https://doc.rust-lang.org/1.67.0/core/future/future/trait.Future.html]<OUTPUT = CONSENSUSPROPOSAL
[../../module/enum.ConsensusProposal.html]<DYNMODULECONSENSUSITEM [../struct.DynModuleConsensusItem.html]>> + SEND
[https://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html] + 'ASYNC_TRAIT, GLOBAL
[https://doc.rust-lang.org/1.67.0/alloc/alloc/struct.Global.html]>>WHERE
    'LIFE0: 'ASYNC_TRAIT,
    'LIFE1: 'ASYNC_TRAIT,
    'LIFE2: 'ASYNC_TRAIT,
    SELF: 'ASYNC_TRAIT,

This module’s contribution to the next consensus proposal

FN PROCESS_CONSENSUS_ITEM<'A, 'LIFE0, 'LIFE1, 'ASYNC_TRAIT>(
    &'LIFE0 SELF,
    DBTX: &'LIFE1 MUT MODULEDATABASETRANSACTION<'A, U16 [https://doc.rust-lang.org/1.67.0/std/primitive.u16.html]>,
    CONSENSUS_ITEM: DYNMODULECONSENSUSITEM [../struct.DynModuleConsensusItem.html],
    PEER_ID: PEERID [../../struct.PeerId.html]
) -> PIN [https://doc.rust-lang.org/1.67.0/core/pin/struct.Pin.html]<BOX
[https://doc.rust-lang.org/1.67.0/alloc/boxed/struct.Box.html]<DYN FUTURE
[https://doc.rust-lang.org/1.67.0/core/future/future/trait.Future.html]<OUTPUT = RESULT
[https://doc.rust-lang.org/1.67.0/core/result/enum.Result.html]<CONSENSUSDECISION [../../enum.ConsensusDecision.html], ERROR
[https://docs.rs/anyhow/1.0.71/anyhow/struct.Error.html]>> + SEND [https://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html] +
'ASYNC_TRAIT, GLOBAL [https://doc.rust-lang.org/1.67.0/alloc/alloc/struct.Global.html]>>WHERE
    'A: 'ASYNC_TRAIT,
    'LIFE0: 'ASYNC_TRAIT,
    'LIFE1: 'ASYNC_TRAIT,
    SELF: 'ASYNC_TRAIT,

This function is called once for every consensus item. If the function returns Ok(ConsensusDecision::Accept) then the item changed
the modules state and has to be included in the history of the federation, otherwise it may safely be discarded. We return an
error for actually invalid items while we return Ok(ConsensusDecision::Discard) for merely superfluous items.

FN BUILD_VERIFICATION_CACHE(&SELF, INPUTS: &[DYNINPUT [../struct.DynInput.html]]) -> DYNVERIFICATIONCACHE
[struct.DynVerificationCache.html]

Some modules may have slow to verify inputs that would block transaction processing. If the slow part of verification can be
modeled as a pure function not involving any system state we can build a lookup table in a hyper-parallelized manner. This
function is meant for constructing such lookup tables.

FN VALIDATE_INPUT<'A, 'LIFE0, 'LIFE1, 'LIFE2, 'LIFE3, 'LIFE4, 'ASYNC_TRAIT>(
    &'LIFE0 SELF,
    DBTX: &'LIFE1 MUT MODULEDATABASETRANSACTION<'LIFE2, U16 [https://doc.rust-lang.org/1.67.0/std/primitive.u16.html]>,
    VERIFICATION_CACHE: &'LIFE3 DYNVERIFICATIONCACHE [struct.DynVerificationCache.html],
    INPUT: &'LIFE4 DYNINPUT [../struct.DynInput.html]
) -> PIN [https://doc.rust-lang.org/1.67.0/core/pin/struct.Pin.html]<BOX
[https://doc.rust-lang.org/1.67.0/alloc/boxed/struct.Box.html]<DYN FUTURE
[https://doc.rust-lang.org/1.67.0/core/future/future/trait.Future.html]<OUTPUT = RESULT
[https://doc.rust-lang.org/1.67.0/core/result/enum.Result.html]<INPUTMETA [../../module/struct.InputMeta.html], MODULEERROR
[../../module/enum.ModuleError.html]>> + SEND [https://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html] + 'ASYNC_TRAIT,
GLOBAL [https://doc.rust-lang.org/1.67.0/alloc/alloc/struct.Global.html]>>WHERE
    'A: 'ASYNC_TRAIT,
    'LIFE0: 'ASYNC_TRAIT,
    'LIFE1: 'ASYNC_TRAIT,
    'LIFE2: 'ASYNC_TRAIT,
    'LIFE3: 'ASYNC_TRAIT,
    'LIFE4: 'ASYNC_TRAIT,
    SELF: 'ASYNC_TRAIT,

Validate a transaction input before submitting it to the unconfirmed transaction pool. This function has no side effects and may
be called at any time. False positives due to outdated database state are ok since they get filtered out after consensus has been
reached on them and merely generate a warning.

FN APPLY_INPUT<'A, 'B, 'C, 'LIFE0, 'LIFE1, 'ASYNC_TRAIT>(
    &'A SELF,
    DBTX: &'LIFE0 MUT MODULEDATABASETRANSACTION<'C, U16 [https://doc.rust-lang.org/1.67.0/std/primitive.u16.html]>,
    INPUT: &'B DYNINPUT [../struct.DynInput.html],
    VERIFICATION_CACHE: &'LIFE1 DYNVERIFICATIONCACHE [struct.DynVerificationCache.html]
) -> PIN [https://doc.rust-lang.org/1.67.0/core/pin/struct.Pin.html]<BOX
[https://doc.rust-lang.org/1.67.0/alloc/boxed/struct.Box.html]<DYN FUTURE
[https://doc.rust-lang.org/1.67.0/core/future/future/trait.Future.html]<OUTPUT = RESULT
[https://doc.rust-lang.org/1.67.0/core/result/enum.Result.html]<INPUTMETA [../../module/struct.InputMeta.html], MODULEERROR
[../../module/enum.ModuleError.html]>> + SEND [https://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html] + 'ASYNC_TRAIT,
GLOBAL [https://doc.rust-lang.org/1.67.0/alloc/alloc/struct.Global.html]>>WHERE
    'A: 'ASYNC_TRAIT,
    'B: 'ASYNC_TRAIT,
    'C: 'ASYNC_TRAIT,
    'LIFE0: 'ASYNC_TRAIT,
    'LIFE1: 'ASYNC_TRAIT,
    SELF: 'ASYNC_TRAIT,

Try to spend a transaction input. On success all necessary updates will be part of the database transaction. On failure (e.g.
double spend) the database transaction is rolled back and the operation will take no effect.

FN VALIDATE_OUTPUT<'LIFE0, 'LIFE1, 'LIFE2, 'LIFE3, 'ASYNC_TRAIT>(
    &'LIFE0 SELF,
    DBTX: &'LIFE1 MUT MODULEDATABASETRANSACTION<'LIFE2, U16 [https://doc.rust-lang.org/1.67.0/std/primitive.u16.html]>,
    OUTPUT: &'LIFE3 DYNOUTPUT [../struct.DynOutput.html]
) -> PIN [https://doc.rust-lang.org/1.67.0/core/pin/struct.Pin.html]<BOX
[https://doc.rust-lang.org/1.67.0/alloc/boxed/struct.Box.html]<DYN FUTURE
[https://doc.rust-lang.org/1.67.0/core/future/future/trait.Future.html]<OUTPUT = RESULT
[https://doc.rust-lang.org/1.67.0/core/result/enum.Result.html]<TRANSACTIONITEMAMOUNT
[../../module/struct.TransactionItemAmount.html], MODULEERROR [../../module/enum.ModuleError.html]>> + SEND
[https://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html] + 'ASYNC_TRAIT, GLOBAL
[https://doc.rust-lang.org/1.67.0/alloc/alloc/struct.Global.html]>>WHERE
    'LIFE0: 'ASYNC_TRAIT,
    'LIFE1: 'ASYNC_TRAIT,
    'LIFE2: 'ASYNC_TRAIT,
    'LIFE3: 'ASYNC_TRAIT,
    SELF: 'ASYNC_TRAIT,

Validate a transaction output before submitting it to the unconfirmed transaction pool. This function has no side effects and may
be called at any time. False positives due to outdated database state are ok since they get filtered out after consensus has been
reached on them and merely generate a warning.

FN APPLY_OUTPUT<'A, 'LIFE0, 'LIFE1, 'LIFE2, 'ASYNC_TRAIT>(
    &'LIFE0 SELF,
    DBTX: &'LIFE1 MUT MODULEDATABASETRANSACTION<'A, U16 [https://doc.rust-lang.org/1.67.0/std/primitive.u16.html]>,
    OUTPUT: &'LIFE2 DYNOUTPUT [../struct.DynOutput.html],
    OUT_POINT: OUTPOINT [../../struct.OutPoint.html]
) -> PIN [https://doc.rust-lang.org/1.67.0/core/pin/struct.Pin.html]<BOX
[https://doc.rust-lang.org/1.67.0/alloc/boxed/struct.Box.html]<DYN FUTURE
[https://doc.rust-lang.org/1.67.0/core/future/future/trait.Future.html]<OUTPUT = RESULT
[https://doc.rust-lang.org/1.67.0/core/result/enum.Result.html]<TRANSACTIONITEMAMOUNT
[../../module/struct.TransactionItemAmount.html], MODULEERROR [../../module/enum.ModuleError.html]>> + SEND
[https://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html] + 'ASYNC_TRAIT, GLOBAL
[https://doc.rust-lang.org/1.67.0/alloc/alloc/struct.Global.html]>>WHERE
    'A: 'ASYNC_TRAIT,
    'LIFE0: 'ASYNC_TRAIT,
    'LIFE1: 'ASYNC_TRAIT,
    'LIFE2: 'ASYNC_TRAIT,
    SELF: 'ASYNC_TRAIT,

Try to create an output (e.g. issue notes, peg-out BTC, …). On success all necessary updates to the database will be part of the
database transaction. On failure (e.g. double spend) the database transaction is rolled back and the operation will take no
effect.

The supplied out_point identifies the operation (e.g. a peg-out or note issuance) and can be used to retrieve its outcome later
using output_status.

FN OUTPUT_STATUS<'LIFE0, 'LIFE1, 'LIFE2, 'ASYNC_TRAIT>(
    &'LIFE0 SELF,
    DBTX: &'LIFE1 MUT MODULEDATABASETRANSACTION<'LIFE2, U16 [https://doc.rust-lang.org/1.67.0/std/primitive.u16.html]>,
    OUT_POINT: OUTPOINT [../../struct.OutPoint.html],
    MODULE_INSTANCE_ID: U16 [https://doc.rust-lang.org/1.67.0/std/primitive.u16.html]
) -> PIN [https://doc.rust-lang.org/1.67.0/core/pin/struct.Pin.html]<BOX
[https://doc.rust-lang.org/1.67.0/alloc/boxed/struct.Box.html]<DYN FUTURE
[https://doc.rust-lang.org/1.67.0/core/future/future/trait.Future.html]<OUTPUT = OPTION
[https://doc.rust-lang.org/1.67.0/core/option/enum.Option.html]<DYNOUTPUTOUTCOME [../struct.DynOutputOutcome.html]>> + SEND
[https://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html] + 'ASYNC_TRAIT, GLOBAL
[https://doc.rust-lang.org/1.67.0/alloc/alloc/struct.Global.html]>>WHERE
    'LIFE0: 'ASYNC_TRAIT,
    'LIFE1: 'ASYNC_TRAIT,
    'LIFE2: 'ASYNC_TRAIT,
    SELF: 'ASYNC_TRAIT,

Retrieve the current status of the output. Depending on the module this might contain data needed by the client to access funds or
give an estimate of when funds will be available. Returns None if the output is unknown, NOT if it is just not ready yet.

FN AUDIT<'LIFE0, 'LIFE1, 'LIFE2, 'LIFE3, 'ASYNC_TRAIT>(
    &'LIFE0 SELF,
    DBTX: &'LIFE1 MUT MODULEDATABASETRANSACTION<'LIFE2, U16 [https://doc.rust-lang.org/1.67.0/std/primitive.u16.html]>,
    AUDIT: &'LIFE3 MUT AUDIT [../../module/audit/struct.Audit.html]
) -> PIN [https://doc.rust-lang.org/1.67.0/core/pin/struct.Pin.html]<BOX
[https://doc.rust-lang.org/1.67.0/alloc/boxed/struct.Box.html]<DYN FUTURE
[https://doc.rust-lang.org/1.67.0/core/future/future/trait.Future.html]<OUTPUT = ()
[https://doc.rust-lang.org/1.67.0/std/primitive.unit.html]> + SEND [https://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html]
+ 'ASYNC_TRAIT, GLOBAL [https://doc.rust-lang.org/1.67.0/alloc/alloc/struct.Global.html]>>WHERE
    'LIFE0: 'ASYNC_TRAIT,
    'LIFE1: 'ASYNC_TRAIT,
    'LIFE2: 'ASYNC_TRAIT,
    'LIFE3: 'ASYNC_TRAIT,
    SELF: 'ASYNC_TRAIT,

Queries the database and returns all assets and liabilities of the module.

Summing over all modules, if liabilities > assets then an error has occurred in the database and consensus should halt.

FN API_ENDPOINTS(&SELF) -> VEC [https://doc.rust-lang.org/1.67.0/alloc/vec/struct.Vec.html]<APIENDPOINT
[../../module/struct.ApiEndpoint.html]<DYNSERVERMODULE [struct.DynServerModule.html]>, GLOBAL
[https://doc.rust-lang.org/1.67.0/alloc/alloc/struct.Global.html]> Ⓘ

Returns a list of custom API endpoints defined by the module. These are made available both to users as well as to other modules.
They thus should be deterministic, only dependant on their input and the current epoch.


IMPLEMENTORS§

§


IMPL<T> ISERVERMODULE [trait.IServerModule.html] FOR TWHERE
    T: 'STATIC + SERVERMODULE [../../trait.ServerModule.html] + SYNC
[https://doc.rust-lang.org/1.67.0/core/marker/trait.Sync.html],

