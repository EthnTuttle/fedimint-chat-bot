☰
logo [../static.files/rust-logo-151179464ae7ed46.svg]
../fedimint_server/index.html




logo [../static.files/rust-logo-151179464ae7ed46.svg]
../fedimint_server/index.html


BITCOINHASH


REQUIRED ASSOCIATED TYPES

 * Engine
 * Inner


REQUIRED ASSOCIATED CONSTANTS

 * LEN


PROVIDED ASSOCIATED CONSTANTS

 * DISPLAY_BACKWARD


REQUIRED METHODS

 * all_zeros
 * as_inner
 * from_engine
 * from_inner
 * from_slice
 * into_inner


PROVIDED METHODS

 * engine
 * hash


IMPLEMENTATIONS ON FOREIGN TYPES

 * BlockHash
 * FilterHash
 * FilterHeader
 * Hash
 * PubkeyHash
 * ScriptHash
 * Sighash
 * TapBranchHash
 * TapLeafHash
 * TapSighashHash
 * TapTweakHash
 * TxMerkleNode
 * Txid
 * WPubkeyHash
 * WScriptHash
 * WitnessCommitment
 * WitnessMerkleNode
 * Wtxid
 * XpubIdentifier


IMPLEMENTORS


IN FEDIMINT_SERVER [index.html]

? [../help.html]
Change settings [../static.files/wheel-5ec35bf9ca753509.svg]../settings.html


TRAIT FEDIMINT_SERVER [index.html]::BITCOINHASHCopy item path [../static.files/clipboard-7571035ce49a181d.svg]

[−]

pub trait BitcoinHash: Copyhttps://doc.rust-lang.org/1.67.0/core/marker/trait.Copy.html + Clonehttps://doc.rust-lang.org/1.67.0/core/clone/trait.Clone.html + PartialEqhttps://doc.rust-lang.org/1.67.0/core/cmp/trait.PartialEq.html<Self> + Eqhttps://doc.rust-lang.org/1.67.0/core/cmp/trait.Eq.html + PartialOrdhttps://doc.rust-lang.org/1.67.0/core/cmp/trait.PartialOrd.html<Self> + Ordhttps://doc.rust-lang.org/1.67.0/core/cmp/trait.Ord.html + Hashhttps://doc.rust-lang.org/1.67.0/core/hash/trait.Hash.html + Debughttps://doc.rust-lang.org/1.67.0/core/fmt/trait.Debug.html + Displayhttps://doc.rust-lang.org/1.67.0/core/fmt/trait.Display.html + LowerHexhttps://doc.rust-lang.org/1.67.0/core/fmt/trait.LowerHex.html + Indexhttps://doc.rust-lang.org/1.67.0/core/ops/index/trait.Index.html<RangeFullhttps://doc.rust-lang.org/1.67.0/core/ops/range/struct.RangeFull.html, Output = [u8https://doc.rust-lang.org/1.67.0/std/primitive.u8.html], Output = [u8https://doc.rust-lang.org/1.67.0/std/primitive.u8.html], Output = [u8https://doc.rust-lang.org/1.67.0/std/primitive.u8.html], Output = [u8https://doc.rust-lang.org/1.67.0/std/primitive.u8.html], Output = u8https://doc.rust-lang.org/1.67.0/std/primitive.u8.html> + Indexhttps://doc.rust-lang.org/1.67.0/core/ops/index/trait.Index.html<RangeFromhttps://doc.rust-lang.org/1.67.0/core/ops/range/struct.RangeFrom.html<usizehttps://doc.rust-lang.org/1.67.0/std/primitive.usize.html>> + Indexhttps://doc.rust-lang.org/1.67.0/core/ops/index/trait.Index.html<RangeTohttps://doc.rust-lang.org/1.67.0/core/ops/range/struct.RangeTo.html<usizehttps://doc.rust-lang.org/1.67.0/std/primitive.usize.html>> + Indexhttps://doc.rust-lang.org/1.67.0/core/ops/index/trait.Index.html<Rangehttps://doc.rust-lang.org/1.67.0/core/ops/range/struct.Range.html<usizehttps://doc.rust-lang.org/1.67.0/std/primitive.usize.html>> + Indexhttps://doc.rust-lang.org/1.67.0/core/ops/index/trait.Index.html<usizehttps://doc.rust-lang.org/1.67.0/std/primitive.usize.html> + Borrowhttps://doc.rust-lang.org/1.67.0/core/borrow/trait.Borrow.html<[u8https://doc.rust-lang.org/1.67.0/std/primitive.u8.html]> {
    type Engine: HashEngine;
    type Inner: FromHex;

    const LEN: usizehttps://doc.rust-lang.org/1.67.0/std/primitive.usize.html;
    const DISPLAY_BACKWARD: boolhttps://doc.rust-lang.org/1.67.0/std/primitive.bool.html = false;

    fn from_engine(e: Self::Enginetrait.BitcoinHash.html#associatedtype.Engine) -> Self;
    fn from_slice(sl: &[u8https://doc.rust-lang.org/1.67.0/std/primitive.u8.html]) -> Resulthttps://doc.rust-lang.org/1.67.0/core/result/enum.Result.html<Self, Error>;
    fn into_inner(self) -> Self::Innertrait.BitcoinHash.html#associatedtype.Inner;
    fn as_inner(&self) -> &Self::Innertrait.BitcoinHash.html#associatedtype.Inner;
    fn from_inner(inner: Self::Innertrait.BitcoinHash.html#associatedtype.Inner) -> Self;
    fn all_zeros() -> Self;

    fn engine() -> Self::Enginetrait.BitcoinHash.html#associatedtype.Engine { ... }
    fn hash(data: &[u8https://doc.rust-lang.org/1.67.0/std/primitive.u8.html]) -> Self { ... }
}

Expand description

Trait which applies to hashes of all types.


REQUIRED ASSOCIATED TYPES§

TYPE ENGINE: HASHENGINE

A hashing engine which bytes can be serialized into. It is expected to implement the io::Write trait, and to never return errors
under any conditions.

TYPE INNER: FROMHEX

The byte array that represents the hash internally.


REQUIRED ASSOCIATED CONSTANTS§

CONST LEN: USIZE [https://doc.rust-lang.org/1.67.0/std/primitive.usize.html]

Length of the hash, in bytes.


PROVIDED ASSOCIATED CONSTANTS§

CONST DISPLAY_BACKWARD: BOOL [https://doc.rust-lang.org/1.67.0/std/primitive.bool.html] = FALSE

Flag indicating whether user-visible serializations of this hash should be backward. For some reason Satoshi decided this should
be true for Sha256dHash, so here we are.


REQUIRED METHODS§

FN FROM_ENGINE(E: SELF::ENGINE [trait.BitcoinHash.html#associatedtype.Engine]) -> SELF

Produces a hash from the current state of a given engine.

FN FROM_SLICE(SL: &[U8 [https://doc.rust-lang.org/1.67.0/std/primitive.u8.html]]) -> RESULT
[https://doc.rust-lang.org/1.67.0/core/result/enum.Result.html]<SELF, ERROR>

Copies a byte slice into a hash object.

FN INTO_INNER(SELF) -> SELF::INNER [trait.BitcoinHash.html#associatedtype.Inner]

Unwraps the hash and returns the underlying byte array.

FN AS_INNER(&SELF) -> &SELF::INNER [trait.BitcoinHash.html#associatedtype.Inner]

Unwraps the hash and returns a reference to the underlying byte array.

FN FROM_INNER(INNER: SELF::INNER [trait.BitcoinHash.html#associatedtype.Inner]) -> SELF

Constructs a hash from the underlying byte array.

FN ALL_ZEROS() -> SELF

Returns an all zero hash.

An all zeros hash is a made up construct because there is not a known input that can create it, however it is used in various
places in Bitcoin e.g., the Bitcoin genesis block’s previous blockhash and the coinbase transaction’s outpoint txid.


PROVIDED METHODS§

FN ENGINE() -> SELF::ENGINE [trait.BitcoinHash.html#associatedtype.Engine]

Constructs a new engine.

FN HASH(DATA: &[U8 [https://doc.rust-lang.org/1.67.0/std/primitive.u8.html]]) -> SELF

Hashes some bytes.


IMPLEMENTATIONS ON FOREIGN TYPES§

§


IMPL HASH [trait.BitcoinHash.html] FOR BLOCKHASH

§

TYPE ENGINE = <HASH AS HASH [trait.BitcoinHash.html]>::ENGINE [trait.BitcoinHash.html#associatedtype.Engine]

§

TYPE INNER = <HASH AS HASH [trait.BitcoinHash.html]>::INNER [trait.BitcoinHash.html#associatedtype.Inner]

§

CONST LEN: USIZE [https://doc.rust-lang.org/1.67.0/std/primitive.usize.html] = 32USIZE

§

CONST DISPLAY_BACKWARD: BOOL [https://doc.rust-lang.org/1.67.0/std/primitive.bool.html] = TRUE

§

FN ENGINE() -> <BLOCKHASH AS HASH [trait.BitcoinHash.html]>::ENGINE [trait.BitcoinHash.html#associatedtype.Engine]

§

FN FROM_ENGINE(E: <BLOCKHASH AS HASH [trait.BitcoinHash.html]>::ENGINE [trait.BitcoinHash.html#associatedtype.Engine]) ->
BLOCKHASH

§

FN FROM_SLICE(SL: &[U8 [https://doc.rust-lang.org/1.67.0/std/primitive.u8.html]]) -> RESULT
[https://doc.rust-lang.org/1.67.0/core/result/enum.Result.html]<BLOCKHASH, ERROR>

§

FN FROM_INNER(INNER: <BLOCKHASH AS HASH [trait.BitcoinHash.html]>::INNER [trait.BitcoinHash.html#associatedtype.Inner]) ->
BLOCKHASH

§

FN INTO_INNER(SELF) -> <BLOCKHASH AS HASH [trait.BitcoinHash.html]>::INNER [trait.BitcoinHash.html#associatedtype.Inner]

§

FN AS_INNER(&SELF) -> &<BLOCKHASH AS HASH [trait.BitcoinHash.html]>::INNER [trait.BitcoinHash.html#associatedtype.Inner]

§

FN ALL_ZEROS() -> BLOCKHASH

§


IMPL HASH [trait.BitcoinHash.html] FOR WITNESSCOMMITMENT

§

TYPE ENGINE = <HASH AS HASH [trait.BitcoinHash.html]>::ENGINE [trait.BitcoinHash.html#associatedtype.Engine]

§

TYPE INNER = <HASH AS HASH [trait.BitcoinHash.html]>::INNER [trait.BitcoinHash.html#associatedtype.Inner]

§

CONST LEN: USIZE [https://doc.rust-lang.org/1.67.0/std/primitive.usize.html] = 32USIZE

§

CONST DISPLAY_BACKWARD: BOOL [https://doc.rust-lang.org/1.67.0/std/primitive.bool.html] = TRUE

§

FN ENGINE() -> <WITNESSCOMMITMENT AS HASH [trait.BitcoinHash.html]>::ENGINE [trait.BitcoinHash.html#associatedtype.Engine]

§

FN FROM_ENGINE(E: <WITNESSCOMMITMENT AS HASH [trait.BitcoinHash.html]>::ENGINE [trait.BitcoinHash.html#associatedtype.Engine]) ->
WITNESSCOMMITMENT

§

FN FROM_SLICE(SL: &[U8 [https://doc.rust-lang.org/1.67.0/std/primitive.u8.html]]) -> RESULT
[https://doc.rust-lang.org/1.67.0/core/result/enum.Result.html]<WITNESSCOMMITMENT, ERROR>

§

FN FROM_INNER(INNER: <WITNESSCOMMITMENT AS HASH [trait.BitcoinHash.html]>::INNER [trait.BitcoinHash.html#associatedtype.Inner]) ->
WITNESSCOMMITMENT

§

FN INTO_INNER(SELF) -> <WITNESSCOMMITMENT AS HASH [trait.BitcoinHash.html]>::INNER [trait.BitcoinHash.html#associatedtype.Inner]

§

FN AS_INNER(&SELF) -> &<WITNESSCOMMITMENT AS HASH [trait.BitcoinHash.html]>::INNER [trait.BitcoinHash.html#associatedtype.Inner]

§

FN ALL_ZEROS() -> WITNESSCOMMITMENT

§


IMPL HASH [trait.BitcoinHash.html] FOR FILTERHASH

§

TYPE ENGINE = <HASH AS HASH [trait.BitcoinHash.html]>::ENGINE [trait.BitcoinHash.html#associatedtype.Engine]

§

TYPE INNER = <HASH AS HASH [trait.BitcoinHash.html]>::INNER [trait.BitcoinHash.html#associatedtype.Inner]

§

CONST LEN: USIZE [https://doc.rust-lang.org/1.67.0/std/primitive.usize.html] = 32USIZE

§

CONST DISPLAY_BACKWARD: BOOL [https://doc.rust-lang.org/1.67.0/std/primitive.bool.html] = TRUE

§

FN ENGINE() -> <FILTERHASH AS HASH [trait.BitcoinHash.html]>::ENGINE [trait.BitcoinHash.html#associatedtype.Engine]

§

FN FROM_ENGINE(E: <FILTERHASH AS HASH [trait.BitcoinHash.html]>::ENGINE [trait.BitcoinHash.html#associatedtype.Engine]) ->
FILTERHASH

§

FN FROM_SLICE(SL: &[U8 [https://doc.rust-lang.org/1.67.0/std/primitive.u8.html]]) -> RESULT
[https://doc.rust-lang.org/1.67.0/core/result/enum.Result.html]<FILTERHASH, ERROR>

§

FN FROM_INNER(INNER: <FILTERHASH AS HASH [trait.BitcoinHash.html]>::INNER [trait.BitcoinHash.html#associatedtype.Inner]) ->
FILTERHASH

§

FN INTO_INNER(SELF) -> <FILTERHASH AS HASH [trait.BitcoinHash.html]>::INNER [trait.BitcoinHash.html#associatedtype.Inner]

§

FN AS_INNER(&SELF) -> &<FILTERHASH AS HASH [trait.BitcoinHash.html]>::INNER [trait.BitcoinHash.html#associatedtype.Inner]

§

FN ALL_ZEROS() -> FILTERHASH

§


IMPL HASH [trait.BitcoinHash.html] FOR TAPTWEAKHASH

§

TYPE ENGINE = <HASH<TAPTWEAKTAG> AS HASH [trait.BitcoinHash.html]>::ENGINE [trait.BitcoinHash.html#associatedtype.Engine]

§

TYPE INNER = <HASH<TAPTWEAKTAG> AS HASH [trait.BitcoinHash.html]>::INNER [trait.BitcoinHash.html#associatedtype.Inner]

§

CONST LEN: USIZE [https://doc.rust-lang.org/1.67.0/std/primitive.usize.html] = 32USIZE

§

CONST DISPLAY_BACKWARD: BOOL [https://doc.rust-lang.org/1.67.0/std/primitive.bool.html] = FALSE

§

FN ENGINE() -> <TAPTWEAKHASH AS HASH [trait.BitcoinHash.html]>::ENGINE [trait.BitcoinHash.html#associatedtype.Engine]

§

FN FROM_ENGINE(E: <TAPTWEAKHASH AS HASH [trait.BitcoinHash.html]>::ENGINE [trait.BitcoinHash.html#associatedtype.Engine]) ->
TAPTWEAKHASH

§

FN FROM_SLICE(SL: &[U8 [https://doc.rust-lang.org/1.67.0/std/primitive.u8.html]]) -> RESULT
[https://doc.rust-lang.org/1.67.0/core/result/enum.Result.html]<TAPTWEAKHASH, ERROR>

§

FN FROM_INNER(INNER: <TAPTWEAKHASH AS HASH [trait.BitcoinHash.html]>::INNER [trait.BitcoinHash.html#associatedtype.Inner]) ->
TAPTWEAKHASH

§

FN INTO_INNER(SELF) -> <TAPTWEAKHASH AS HASH [trait.BitcoinHash.html]>::INNER [trait.BitcoinHash.html#associatedtype.Inner]

§

FN AS_INNER(&SELF) -> &<TAPTWEAKHASH AS HASH [trait.BitcoinHash.html]>::INNER [trait.BitcoinHash.html#associatedtype.Inner]

§

FN ALL_ZEROS() -> TAPTWEAKHASH

§


IMPL HASH [trait.BitcoinHash.html] FOR TXID

§

TYPE ENGINE = <HASH AS HASH [trait.BitcoinHash.html]>::ENGINE [trait.BitcoinHash.html#associatedtype.Engine]

§

TYPE INNER = <HASH AS HASH [trait.BitcoinHash.html]>::INNER [trait.BitcoinHash.html#associatedtype.Inner]

§

CONST LEN: USIZE [https://doc.rust-lang.org/1.67.0/std/primitive.usize.html] = 32USIZE

§

CONST DISPLAY_BACKWARD: BOOL [https://doc.rust-lang.org/1.67.0/std/primitive.bool.html] = TRUE

§

FN ENGINE() -> <TXID AS HASH [trait.BitcoinHash.html]>::ENGINE [trait.BitcoinHash.html#associatedtype.Engine]

§

FN FROM_ENGINE(E: <TXID AS HASH [trait.BitcoinHash.html]>::ENGINE [trait.BitcoinHash.html#associatedtype.Engine]) -> TXID

§

FN FROM_SLICE(SL: &[U8 [https://doc.rust-lang.org/1.67.0/std/primitive.u8.html]]) -> RESULT
[https://doc.rust-lang.org/1.67.0/core/result/enum.Result.html]<TXID, ERROR>

§

FN FROM_INNER(INNER: <TXID AS HASH [trait.BitcoinHash.html]>::INNER [trait.BitcoinHash.html#associatedtype.Inner]) -> TXID

§

FN INTO_INNER(SELF) -> <TXID AS HASH [trait.BitcoinHash.html]>::INNER [trait.BitcoinHash.html#associatedtype.Inner]

§

FN AS_INNER(&SELF) -> &<TXID AS HASH [trait.BitcoinHash.html]>::INNER [trait.BitcoinHash.html#associatedtype.Inner]

§

FN ALL_ZEROS() -> TXID

§


IMPL HASH [trait.BitcoinHash.html] FOR TAPBRANCHHASH

§

TYPE ENGINE = <HASH<TAPBRANCHTAG> AS HASH [trait.BitcoinHash.html]>::ENGINE [trait.BitcoinHash.html#associatedtype.Engine]

§

TYPE INNER = <HASH<TAPBRANCHTAG> AS HASH [trait.BitcoinHash.html]>::INNER [trait.BitcoinHash.html#associatedtype.Inner]

§

CONST LEN: USIZE [https://doc.rust-lang.org/1.67.0/std/primitive.usize.html] = 32USIZE

§

CONST DISPLAY_BACKWARD: BOOL [https://doc.rust-lang.org/1.67.0/std/primitive.bool.html] = FALSE

§

FN ENGINE() -> <TAPBRANCHHASH AS HASH [trait.BitcoinHash.html]>::ENGINE [trait.BitcoinHash.html#associatedtype.Engine]

§

FN FROM_ENGINE(E: <TAPBRANCHHASH AS HASH [trait.BitcoinHash.html]>::ENGINE [trait.BitcoinHash.html#associatedtype.Engine]) ->
TAPBRANCHHASH

§

FN FROM_SLICE(SL: &[U8 [https://doc.rust-lang.org/1.67.0/std/primitive.u8.html]]) -> RESULT
[https://doc.rust-lang.org/1.67.0/core/result/enum.Result.html]<TAPBRANCHHASH, ERROR>

§

FN FROM_INNER(INNER: <TAPBRANCHHASH AS HASH [trait.BitcoinHash.html]>::INNER [trait.BitcoinHash.html#associatedtype.Inner]) ->
TAPBRANCHHASH

§

FN INTO_INNER(SELF) -> <TAPBRANCHHASH AS HASH [trait.BitcoinHash.html]>::INNER [trait.BitcoinHash.html#associatedtype.Inner]

§

FN AS_INNER(&SELF) -> &<TAPBRANCHHASH AS HASH [trait.BitcoinHash.html]>::INNER [trait.BitcoinHash.html#associatedtype.Inner]

§

FN ALL_ZEROS() -> TAPBRANCHHASH

§


IMPL HASH [trait.BitcoinHash.html] FOR SCRIPTHASH

§

TYPE ENGINE = <HASH AS HASH [trait.BitcoinHash.html]>::ENGINE [trait.BitcoinHash.html#associatedtype.Engine]

§

TYPE INNER = <HASH AS HASH [trait.BitcoinHash.html]>::INNER [trait.BitcoinHash.html#associatedtype.Inner]

§

CONST LEN: USIZE [https://doc.rust-lang.org/1.67.0/std/primitive.usize.html] = 20USIZE

§

CONST DISPLAY_BACKWARD: BOOL [https://doc.rust-lang.org/1.67.0/std/primitive.bool.html] = FALSE

§

FN ENGINE() -> <SCRIPTHASH AS HASH [trait.BitcoinHash.html]>::ENGINE [trait.BitcoinHash.html#associatedtype.Engine]

§

FN FROM_ENGINE(E: <SCRIPTHASH AS HASH [trait.BitcoinHash.html]>::ENGINE [trait.BitcoinHash.html#associatedtype.Engine]) ->
SCRIPTHASH

§

FN FROM_SLICE(SL: &[U8 [https://doc.rust-lang.org/1.67.0/std/primitive.u8.html]]) -> RESULT
[https://doc.rust-lang.org/1.67.0/core/result/enum.Result.html]<SCRIPTHASH, ERROR>

§

FN FROM_INNER(INNER: <SCRIPTHASH AS HASH [trait.BitcoinHash.html]>::INNER [trait.BitcoinHash.html#associatedtype.Inner]) ->
SCRIPTHASH

§

FN INTO_INNER(SELF) -> <SCRIPTHASH AS HASH [trait.BitcoinHash.html]>::INNER [trait.BitcoinHash.html#associatedtype.Inner]

§

FN AS_INNER(&SELF) -> &<SCRIPTHASH AS HASH [trait.BitcoinHash.html]>::INNER [trait.BitcoinHash.html#associatedtype.Inner]

§

FN ALL_ZEROS() -> SCRIPTHASH

§


IMPL HASH [trait.BitcoinHash.html] FOR WSCRIPTHASH

§

TYPE ENGINE = <HASH AS HASH [trait.BitcoinHash.html]>::ENGINE [trait.BitcoinHash.html#associatedtype.Engine]

§

TYPE INNER = <HASH AS HASH [trait.BitcoinHash.html]>::INNER [trait.BitcoinHash.html#associatedtype.Inner]

§

CONST LEN: USIZE [https://doc.rust-lang.org/1.67.0/std/primitive.usize.html] = 32USIZE

§

CONST DISPLAY_BACKWARD: BOOL [https://doc.rust-lang.org/1.67.0/std/primitive.bool.html] = FALSE

§

FN ENGINE() -> <WSCRIPTHASH AS HASH [trait.BitcoinHash.html]>::ENGINE [trait.BitcoinHash.html#associatedtype.Engine]

§

FN FROM_ENGINE(E: <WSCRIPTHASH AS HASH [trait.BitcoinHash.html]>::ENGINE [trait.BitcoinHash.html#associatedtype.Engine]) ->
WSCRIPTHASH

§

FN FROM_SLICE(SL: &[U8 [https://doc.rust-lang.org/1.67.0/std/primitive.u8.html]]) -> RESULT
[https://doc.rust-lang.org/1.67.0/core/result/enum.Result.html]<WSCRIPTHASH, ERROR>

§

FN FROM_INNER(INNER: <WSCRIPTHASH AS HASH [trait.BitcoinHash.html]>::INNER [trait.BitcoinHash.html#associatedtype.Inner]) ->
WSCRIPTHASH

§

FN INTO_INNER(SELF) -> <WSCRIPTHASH AS HASH [trait.BitcoinHash.html]>::INNER [trait.BitcoinHash.html#associatedtype.Inner]

§

FN AS_INNER(&SELF) -> &<WSCRIPTHASH AS HASH [trait.BitcoinHash.html]>::INNER [trait.BitcoinHash.html#associatedtype.Inner]

§

FN ALL_ZEROS() -> WSCRIPTHASH

§


IMPL HASH [trait.BitcoinHash.html] FOR FILTERHEADER

§

TYPE ENGINE = <HASH AS HASH [trait.BitcoinHash.html]>::ENGINE [trait.BitcoinHash.html#associatedtype.Engine]

§

TYPE INNER = <HASH AS HASH [trait.BitcoinHash.html]>::INNER [trait.BitcoinHash.html#associatedtype.Inner]

§

CONST LEN: USIZE [https://doc.rust-lang.org/1.67.0/std/primitive.usize.html] = 32USIZE

§

CONST DISPLAY_BACKWARD: BOOL [https://doc.rust-lang.org/1.67.0/std/primitive.bool.html] = TRUE

§

FN ENGINE() -> <FILTERHEADER AS HASH [trait.BitcoinHash.html]>::ENGINE [trait.BitcoinHash.html#associatedtype.Engine]

§

FN FROM_ENGINE(E: <FILTERHEADER AS HASH [trait.BitcoinHash.html]>::ENGINE [trait.BitcoinHash.html#associatedtype.Engine]) ->
FILTERHEADER

§

FN FROM_SLICE(SL: &[U8 [https://doc.rust-lang.org/1.67.0/std/primitive.u8.html]]) -> RESULT
[https://doc.rust-lang.org/1.67.0/core/result/enum.Result.html]<FILTERHEADER, ERROR>

§

FN FROM_INNER(INNER: <FILTERHEADER AS HASH [trait.BitcoinHash.html]>::INNER [trait.BitcoinHash.html#associatedtype.Inner]) ->
FILTERHEADER

§

FN INTO_INNER(SELF) -> <FILTERHEADER AS HASH [trait.BitcoinHash.html]>::INNER [trait.BitcoinHash.html#associatedtype.Inner]

§

FN AS_INNER(&SELF) -> &<FILTERHEADER AS HASH [trait.BitcoinHash.html]>::INNER [trait.BitcoinHash.html#associatedtype.Inner]

§

FN ALL_ZEROS() -> FILTERHEADER

§


IMPL HASH [trait.BitcoinHash.html] FOR TXMERKLENODE

§

TYPE ENGINE = <HASH AS HASH [trait.BitcoinHash.html]>::ENGINE [trait.BitcoinHash.html#associatedtype.Engine]

§

TYPE INNER = <HASH AS HASH [trait.BitcoinHash.html]>::INNER [trait.BitcoinHash.html#associatedtype.Inner]

§

CONST LEN: USIZE [https://doc.rust-lang.org/1.67.0/std/primitive.usize.html] = 32USIZE

§

CONST DISPLAY_BACKWARD: BOOL [https://doc.rust-lang.org/1.67.0/std/primitive.bool.html] = TRUE

§

FN ENGINE() -> <TXMERKLENODE AS HASH [trait.BitcoinHash.html]>::ENGINE [trait.BitcoinHash.html#associatedtype.Engine]

§

FN FROM_ENGINE(E: <TXMERKLENODE AS HASH [trait.BitcoinHash.html]>::ENGINE [trait.BitcoinHash.html#associatedtype.Engine]) ->
TXMERKLENODE

§

FN FROM_SLICE(SL: &[U8 [https://doc.rust-lang.org/1.67.0/std/primitive.u8.html]]) -> RESULT
[https://doc.rust-lang.org/1.67.0/core/result/enum.Result.html]<TXMERKLENODE, ERROR>

§

FN FROM_INNER(INNER: <TXMERKLENODE AS HASH [trait.BitcoinHash.html]>::INNER [trait.BitcoinHash.html#associatedtype.Inner]) ->
TXMERKLENODE

§

FN INTO_INNER(SELF) -> <TXMERKLENODE AS HASH [trait.BitcoinHash.html]>::INNER [trait.BitcoinHash.html#associatedtype.Inner]

§

FN AS_INNER(&SELF) -> &<TXMERKLENODE AS HASH [trait.BitcoinHash.html]>::INNER [trait.BitcoinHash.html#associatedtype.Inner]

§

FN ALL_ZEROS() -> TXMERKLENODE

§


IMPL HASH [trait.BitcoinHash.html] FOR TAPSIGHASHHASH

§

TYPE ENGINE = <HASH<TAPSIGHASHTAG> AS HASH [trait.BitcoinHash.html]>::ENGINE [trait.BitcoinHash.html#associatedtype.Engine]

§

TYPE INNER = <HASH<TAPSIGHASHTAG> AS HASH [trait.BitcoinHash.html]>::INNER [trait.BitcoinHash.html#associatedtype.Inner]

§

CONST LEN: USIZE [https://doc.rust-lang.org/1.67.0/std/primitive.usize.html] = 32USIZE

§

CONST DISPLAY_BACKWARD: BOOL [https://doc.rust-lang.org/1.67.0/std/primitive.bool.html] = FALSE

§

FN ENGINE() -> <TAPSIGHASHHASH AS HASH [trait.BitcoinHash.html]>::ENGINE [trait.BitcoinHash.html#associatedtype.Engine]

§

FN FROM_ENGINE(E: <TAPSIGHASHHASH AS HASH [trait.BitcoinHash.html]>::ENGINE [trait.BitcoinHash.html#associatedtype.Engine]) ->
TAPSIGHASHHASH

§

FN FROM_SLICE(SL: &[U8 [https://doc.rust-lang.org/1.67.0/std/primitive.u8.html]]) -> RESULT
[https://doc.rust-lang.org/1.67.0/core/result/enum.Result.html]<TAPSIGHASHHASH, ERROR>

§

FN FROM_INNER(INNER: <TAPSIGHASHHASH AS HASH [trait.BitcoinHash.html]>::INNER [trait.BitcoinHash.html#associatedtype.Inner]) ->
TAPSIGHASHHASH

§

FN INTO_INNER(SELF) -> <TAPSIGHASHHASH AS HASH [trait.BitcoinHash.html]>::INNER [trait.BitcoinHash.html#associatedtype.Inner]

§

FN AS_INNER(&SELF) -> &<TAPSIGHASHHASH AS HASH [trait.BitcoinHash.html]>::INNER [trait.BitcoinHash.html#associatedtype.Inner]

§

FN ALL_ZEROS() -> TAPSIGHASHHASH

§


IMPL HASH [trait.BitcoinHash.html] FOR PUBKEYHASH

§

TYPE ENGINE = <HASH AS HASH [trait.BitcoinHash.html]>::ENGINE [trait.BitcoinHash.html#associatedtype.Engine]

§

TYPE INNER = <HASH AS HASH [trait.BitcoinHash.html]>::INNER [trait.BitcoinHash.html#associatedtype.Inner]

§

CONST LEN: USIZE [https://doc.rust-lang.org/1.67.0/std/primitive.usize.html] = 20USIZE

§

CONST DISPLAY_BACKWARD: BOOL [https://doc.rust-lang.org/1.67.0/std/primitive.bool.html] = FALSE

§

FN ENGINE() -> <PUBKEYHASH AS HASH [trait.BitcoinHash.html]>::ENGINE [trait.BitcoinHash.html#associatedtype.Engine]

§

FN FROM_ENGINE(E: <PUBKEYHASH AS HASH [trait.BitcoinHash.html]>::ENGINE [trait.BitcoinHash.html#associatedtype.Engine]) ->
PUBKEYHASH

§

FN FROM_SLICE(SL: &[U8 [https://doc.rust-lang.org/1.67.0/std/primitive.u8.html]]) -> RESULT
[https://doc.rust-lang.org/1.67.0/core/result/enum.Result.html]<PUBKEYHASH, ERROR>

§

FN FROM_INNER(INNER: <PUBKEYHASH AS HASH [trait.BitcoinHash.html]>::INNER [trait.BitcoinHash.html#associatedtype.Inner]) ->
PUBKEYHASH

§

FN INTO_INNER(SELF) -> <PUBKEYHASH AS HASH [trait.BitcoinHash.html]>::INNER [trait.BitcoinHash.html#associatedtype.Inner]

§

FN AS_INNER(&SELF) -> &<PUBKEYHASH AS HASH [trait.BitcoinHash.html]>::INNER [trait.BitcoinHash.html#associatedtype.Inner]

§

FN ALL_ZEROS() -> PUBKEYHASH

§


IMPL HASH [trait.BitcoinHash.html] FOR TAPLEAFHASH

§

TYPE ENGINE = <HASH<TAPLEAFTAG> AS HASH [trait.BitcoinHash.html]>::ENGINE [trait.BitcoinHash.html#associatedtype.Engine]

§

TYPE INNER = <HASH<TAPLEAFTAG> AS HASH [trait.BitcoinHash.html]>::INNER [trait.BitcoinHash.html#associatedtype.Inner]

§

CONST LEN: USIZE [https://doc.rust-lang.org/1.67.0/std/primitive.usize.html] = 32USIZE

§

CONST DISPLAY_BACKWARD: BOOL [https://doc.rust-lang.org/1.67.0/std/primitive.bool.html] = FALSE

§

FN ENGINE() -> <TAPLEAFHASH AS HASH [trait.BitcoinHash.html]>::ENGINE [trait.BitcoinHash.html#associatedtype.Engine]

§

FN FROM_ENGINE(E: <TAPLEAFHASH AS HASH [trait.BitcoinHash.html]>::ENGINE [trait.BitcoinHash.html#associatedtype.Engine]) ->
TAPLEAFHASH

§

FN FROM_SLICE(SL: &[U8 [https://doc.rust-lang.org/1.67.0/std/primitive.u8.html]]) -> RESULT
[https://doc.rust-lang.org/1.67.0/core/result/enum.Result.html]<TAPLEAFHASH, ERROR>

§

FN FROM_INNER(INNER: <TAPLEAFHASH AS HASH [trait.BitcoinHash.html]>::INNER [trait.BitcoinHash.html#associatedtype.Inner]) ->
TAPLEAFHASH

§

FN INTO_INNER(SELF) -> <TAPLEAFHASH AS HASH [trait.BitcoinHash.html]>::INNER [trait.BitcoinHash.html#associatedtype.Inner]

§

FN AS_INNER(&SELF) -> &<TAPLEAFHASH AS HASH [trait.BitcoinHash.html]>::INNER [trait.BitcoinHash.html#associatedtype.Inner]

§

FN ALL_ZEROS() -> TAPLEAFHASH

§


IMPL HASH [trait.BitcoinHash.html] FOR WPUBKEYHASH

§

TYPE ENGINE = <HASH AS HASH [trait.BitcoinHash.html]>::ENGINE [trait.BitcoinHash.html#associatedtype.Engine]

§

TYPE INNER = <HASH AS HASH [trait.BitcoinHash.html]>::INNER [trait.BitcoinHash.html#associatedtype.Inner]

§

CONST LEN: USIZE [https://doc.rust-lang.org/1.67.0/std/primitive.usize.html] = 20USIZE

§

CONST DISPLAY_BACKWARD: BOOL [https://doc.rust-lang.org/1.67.0/std/primitive.bool.html] = FALSE

§

FN ENGINE() -> <WPUBKEYHASH AS HASH [trait.BitcoinHash.html]>::ENGINE [trait.BitcoinHash.html#associatedtype.Engine]

§

FN FROM_ENGINE(E: <WPUBKEYHASH AS HASH [trait.BitcoinHash.html]>::ENGINE [trait.BitcoinHash.html#associatedtype.Engine]) ->
WPUBKEYHASH

§

FN FROM_SLICE(SL: &[U8 [https://doc.rust-lang.org/1.67.0/std/primitive.u8.html]]) -> RESULT
[https://doc.rust-lang.org/1.67.0/core/result/enum.Result.html]<WPUBKEYHASH, ERROR>

§

FN FROM_INNER(INNER: <WPUBKEYHASH AS HASH [trait.BitcoinHash.html]>::INNER [trait.BitcoinHash.html#associatedtype.Inner]) ->
WPUBKEYHASH

§

FN INTO_INNER(SELF) -> <WPUBKEYHASH AS HASH [trait.BitcoinHash.html]>::INNER [trait.BitcoinHash.html#associatedtype.Inner]

§

FN AS_INNER(&SELF) -> &<WPUBKEYHASH AS HASH [trait.BitcoinHash.html]>::INNER [trait.BitcoinHash.html#associatedtype.Inner]

§

FN ALL_ZEROS() -> WPUBKEYHASH

§


IMPL HASH [trait.BitcoinHash.html] FOR WITNESSMERKLENODE

§

TYPE ENGINE = <HASH AS HASH [trait.BitcoinHash.html]>::ENGINE [trait.BitcoinHash.html#associatedtype.Engine]

§

TYPE INNER = <HASH AS HASH [trait.BitcoinHash.html]>::INNER [trait.BitcoinHash.html#associatedtype.Inner]

§

CONST LEN: USIZE [https://doc.rust-lang.org/1.67.0/std/primitive.usize.html] = 32USIZE

§

CONST DISPLAY_BACKWARD: BOOL [https://doc.rust-lang.org/1.67.0/std/primitive.bool.html] = TRUE

§

FN ENGINE() -> <WITNESSMERKLENODE AS HASH [trait.BitcoinHash.html]>::ENGINE [trait.BitcoinHash.html#associatedtype.Engine]

§

FN FROM_ENGINE(E: <WITNESSMERKLENODE AS HASH [trait.BitcoinHash.html]>::ENGINE [trait.BitcoinHash.html#associatedtype.Engine]) ->
WITNESSMERKLENODE

§

FN FROM_SLICE(SL: &[U8 [https://doc.rust-lang.org/1.67.0/std/primitive.u8.html]]) -> RESULT
[https://doc.rust-lang.org/1.67.0/core/result/enum.Result.html]<WITNESSMERKLENODE, ERROR>

§

FN FROM_INNER(INNER: <WITNESSMERKLENODE AS HASH [trait.BitcoinHash.html]>::INNER [trait.BitcoinHash.html#associatedtype.Inner]) ->
WITNESSMERKLENODE

§

FN INTO_INNER(SELF) -> <WITNESSMERKLENODE AS HASH [trait.BitcoinHash.html]>::INNER [trait.BitcoinHash.html#associatedtype.Inner]

§

FN AS_INNER(&SELF) -> &<WITNESSMERKLENODE AS HASH [trait.BitcoinHash.html]>::INNER [trait.BitcoinHash.html#associatedtype.Inner]

§

FN ALL_ZEROS() -> WITNESSMERKLENODE

§


IMPL HASH [trait.BitcoinHash.html] FOR SIGHASH

§

TYPE ENGINE = <HASH AS HASH [trait.BitcoinHash.html]>::ENGINE [trait.BitcoinHash.html#associatedtype.Engine]

§

TYPE INNER = <HASH AS HASH [trait.BitcoinHash.html]>::INNER [trait.BitcoinHash.html#associatedtype.Inner]

§

CONST LEN: USIZE [https://doc.rust-lang.org/1.67.0/std/primitive.usize.html] = 32USIZE

§

CONST DISPLAY_BACKWARD: BOOL [https://doc.rust-lang.org/1.67.0/std/primitive.bool.html] = TRUE

§

FN ENGINE() -> <SIGHASH AS HASH [trait.BitcoinHash.html]>::ENGINE [trait.BitcoinHash.html#associatedtype.Engine]

§

FN FROM_ENGINE(E: <SIGHASH AS HASH [trait.BitcoinHash.html]>::ENGINE [trait.BitcoinHash.html#associatedtype.Engine]) -> SIGHASH

§

FN FROM_SLICE(SL: &[U8 [https://doc.rust-lang.org/1.67.0/std/primitive.u8.html]]) -> RESULT
[https://doc.rust-lang.org/1.67.0/core/result/enum.Result.html]<SIGHASH, ERROR>

§

FN FROM_INNER(INNER: <SIGHASH AS HASH [trait.BitcoinHash.html]>::INNER [trait.BitcoinHash.html#associatedtype.Inner]) -> SIGHASH

§

FN INTO_INNER(SELF) -> <SIGHASH AS HASH [trait.BitcoinHash.html]>::INNER [trait.BitcoinHash.html#associatedtype.Inner]

§

FN AS_INNER(&SELF) -> &<SIGHASH AS HASH [trait.BitcoinHash.html]>::INNER [trait.BitcoinHash.html#associatedtype.Inner]

§

FN ALL_ZEROS() -> SIGHASH

§


IMPL HASH [trait.BitcoinHash.html] FOR XPUBIDENTIFIER

§

TYPE ENGINE = <HASH AS HASH [trait.BitcoinHash.html]>::ENGINE [trait.BitcoinHash.html#associatedtype.Engine]

§

TYPE INNER = <HASH AS HASH [trait.BitcoinHash.html]>::INNER [trait.BitcoinHash.html#associatedtype.Inner]

§

CONST LEN: USIZE [https://doc.rust-lang.org/1.67.0/std/primitive.usize.html] = 20USIZE

§

CONST DISPLAY_BACKWARD: BOOL [https://doc.rust-lang.org/1.67.0/std/primitive.bool.html] = FALSE

§

FN ENGINE() -> <XPUBIDENTIFIER AS HASH [trait.BitcoinHash.html]>::ENGINE [trait.BitcoinHash.html#associatedtype.Engine]

§

FN FROM_ENGINE(E: <XPUBIDENTIFIER AS HASH [trait.BitcoinHash.html]>::ENGINE [trait.BitcoinHash.html#associatedtype.Engine]) ->
XPUBIDENTIFIER

§

FN FROM_SLICE(SL: &[U8 [https://doc.rust-lang.org/1.67.0/std/primitive.u8.html]]) -> RESULT
[https://doc.rust-lang.org/1.67.0/core/result/enum.Result.html]<XPUBIDENTIFIER, ERROR>

§

FN FROM_INNER(INNER: <XPUBIDENTIFIER AS HASH [trait.BitcoinHash.html]>::INNER [trait.BitcoinHash.html#associatedtype.Inner]) ->
XPUBIDENTIFIER

§

FN INTO_INNER(SELF) -> <XPUBIDENTIFIER AS HASH [trait.BitcoinHash.html]>::INNER [trait.BitcoinHash.html#associatedtype.Inner]

§

FN AS_INNER(&SELF) -> &<XPUBIDENTIFIER AS HASH [trait.BitcoinHash.html]>::INNER [trait.BitcoinHash.html#associatedtype.Inner]

§

FN ALL_ZEROS() -> XPUBIDENTIFIER

§


IMPL HASH [trait.BitcoinHash.html] FOR WTXID

§

TYPE ENGINE = <HASH AS HASH [trait.BitcoinHash.html]>::ENGINE [trait.BitcoinHash.html#associatedtype.Engine]

§

TYPE INNER = <HASH AS HASH [trait.BitcoinHash.html]>::INNER [trait.BitcoinHash.html#associatedtype.Inner]

§

CONST LEN: USIZE [https://doc.rust-lang.org/1.67.0/std/primitive.usize.html] = 32USIZE

§

CONST DISPLAY_BACKWARD: BOOL [https://doc.rust-lang.org/1.67.0/std/primitive.bool.html] = TRUE

§

FN ENGINE() -> <WTXID AS HASH [trait.BitcoinHash.html]>::ENGINE [trait.BitcoinHash.html#associatedtype.Engine]

§

FN FROM_ENGINE(E: <WTXID AS HASH [trait.BitcoinHash.html]>::ENGINE [trait.BitcoinHash.html#associatedtype.Engine]) -> WTXID

§

FN FROM_SLICE(SL: &[U8 [https://doc.rust-lang.org/1.67.0/std/primitive.u8.html]]) -> RESULT
[https://doc.rust-lang.org/1.67.0/core/result/enum.Result.html]<WTXID, ERROR>

§

FN FROM_INNER(INNER: <WTXID AS HASH [trait.BitcoinHash.html]>::INNER [trait.BitcoinHash.html#associatedtype.Inner]) -> WTXID

§

FN INTO_INNER(SELF) -> <WTXID AS HASH [trait.BitcoinHash.html]>::INNER [trait.BitcoinHash.html#associatedtype.Inner]

§

FN AS_INNER(&SELF) -> &<WTXID AS HASH [trait.BitcoinHash.html]>::INNER [trait.BitcoinHash.html#associatedtype.Inner]

§

FN ALL_ZEROS() -> WTXID

§


IMPL HASH [trait.BitcoinHash.html] FOR HASH

§

CONST DISPLAY_BACKWARD: BOOL [https://doc.rust-lang.org/1.67.0/std/primitive.bool.html] = FALSE

sha256d has DISPLAY_BACKWARD as true

§

TYPE ENGINE = HASHENGINE

§

TYPE INNER = [U8 [https://doc.rust-lang.org/1.67.0/std/primitive.u8.html]; 32
[https://doc.rust-lang.org/1.67.0/std/primitive.array.html]]

§

FN ENGINE() -> HASHENGINE

§

FN FROM_ENGINE(E: HASHENGINE) -> HASH

§

CONST LEN: USIZE [https://doc.rust-lang.org/1.67.0/std/primitive.usize.html] = 32USIZE

§

FN FROM_SLICE(SL: &[U8 [https://doc.rust-lang.org/1.67.0/std/primitive.u8.html]]) -> RESULT
[https://doc.rust-lang.org/1.67.0/core/result/enum.Result.html]<HASH, ERROR>

§

FN INTO_INNER(SELF) -> <HASH AS HASH [trait.BitcoinHash.html]>::INNER [trait.BitcoinHash.html#associatedtype.Inner]

§

FN AS_INNER(&SELF) -> &<HASH AS HASH [trait.BitcoinHash.html]>::INNER [trait.BitcoinHash.html#associatedtype.Inner]

§

FN FROM_INNER(INNER: <HASH AS HASH [trait.BitcoinHash.html]>::INNER [trait.BitcoinHash.html#associatedtype.Inner]) -> HASH

§

FN ALL_ZEROS() -> HASH


IMPLEMENTORS§

§


IMPL HASH [trait.BitcoinHash.html] FOR TRANSACTIONID [struct.TransactionId.html]

§

TYPE ENGINE = <HASH AS HASH [trait.BitcoinHash.html]>::ENGINE [trait.BitcoinHash.html#associatedtype.Engine]

§

TYPE INNER = <HASH AS HASH [trait.BitcoinHash.html]>::INNER [trait.BitcoinHash.html#associatedtype.Inner]

§

CONST LEN: USIZE [https://doc.rust-lang.org/1.67.0/std/primitive.usize.html] = 32USIZE

§

CONST DISPLAY_BACKWARD: BOOL [https://doc.rust-lang.org/1.67.0/std/primitive.bool.html] = FALSE

§


IMPL HASH [trait.BitcoinHash.html] FOR HASH

§

TYPE ENGINE = HASHENGINE

§

TYPE INNER = [U8 [https://doc.rust-lang.org/1.67.0/std/primitive.u8.html]; 32
[https://doc.rust-lang.org/1.67.0/std/primitive.array.html]]

§

CONST LEN: USIZE [https://doc.rust-lang.org/1.67.0/std/primitive.usize.html] = 32USIZE

§


IMPL HASH [trait.BitcoinHash.html] FOR HASH

§

TYPE ENGINE = HASHENGINE

§

TYPE INNER = [U8 [https://doc.rust-lang.org/1.67.0/std/primitive.u8.html]; 64
[https://doc.rust-lang.org/1.67.0/std/primitive.array.html]]

§

CONST LEN: USIZE [https://doc.rust-lang.org/1.67.0/std/primitive.usize.html] = 64USIZE

§


IMPL HASH [trait.BitcoinHash.html] FOR HASH

§

TYPE ENGINE = HASHENGINE

§

TYPE INNER = [U8 [https://doc.rust-lang.org/1.67.0/std/primitive.u8.html]; 20
[https://doc.rust-lang.org/1.67.0/std/primitive.array.html]]

§

CONST LEN: USIZE [https://doc.rust-lang.org/1.67.0/std/primitive.usize.html] = 20USIZE

§


IMPL HASH [trait.BitcoinHash.html] FOR HASH

§

TYPE ENGINE = HASHENGINE

§

TYPE INNER = [U8 [https://doc.rust-lang.org/1.67.0/std/primitive.u8.html]; 20
[https://doc.rust-lang.org/1.67.0/std/primitive.array.html]]

§

CONST LEN: USIZE [https://doc.rust-lang.org/1.67.0/std/primitive.usize.html] = 20USIZE

§


IMPL HASH [trait.BitcoinHash.html] FOR HASH

§

TYPE ENGINE = HASHENGINE

§

TYPE INNER = [U8 [https://doc.rust-lang.org/1.67.0/std/primitive.u8.html]; 20
[https://doc.rust-lang.org/1.67.0/std/primitive.array.html]]

§

CONST LEN: USIZE [https://doc.rust-lang.org/1.67.0/std/primitive.usize.html] = 20USIZE

§


IMPL HASH [trait.BitcoinHash.html] FOR HASH

§

TYPE ENGINE = HASHENGINE

§

TYPE INNER = [U8 [https://doc.rust-lang.org/1.67.0/std/primitive.u8.html]; 32
[https://doc.rust-lang.org/1.67.0/std/primitive.array.html]]

§

CONST LEN: USIZE [https://doc.rust-lang.org/1.67.0/std/primitive.usize.html] = 32USIZE

§

CONST DISPLAY_BACKWARD: BOOL [https://doc.rust-lang.org/1.67.0/std/primitive.bool.html] = TRUE

§


IMPL HASH [trait.BitcoinHash.html] FOR HASH

§

TYPE ENGINE = HASHENGINE

§

TYPE INNER = [U8 [https://doc.rust-lang.org/1.67.0/std/primitive.u8.html]; 8
[https://doc.rust-lang.org/1.67.0/std/primitive.array.html]]

§

CONST LEN: USIZE [https://doc.rust-lang.org/1.67.0/std/primitive.usize.html] = 8USIZE

§


IMPL<T> HASH [trait.BitcoinHash.html] FOR HASH<T>WHERE
    T: TAG,

§

TYPE ENGINE = HASHENGINE

§

TYPE INNER = [U8 [https://doc.rust-lang.org/1.67.0/std/primitive.u8.html]; 32
[https://doc.rust-lang.org/1.67.0/std/primitive.array.html]]

§

CONST LEN: USIZE [https://doc.rust-lang.org/1.67.0/std/primitive.usize.html] = 32USIZE

§

CONST DISPLAY_BACKWARD: BOOL [https://doc.rust-lang.org/1.67.0/std/primitive.bool.html] = TRUE

§


IMPL<T> HASH [trait.BitcoinHash.html] FOR HMAC<T>WHERE
    T: HASH [trait.BitcoinHash.html],

§

TYPE ENGINE = HMACENGINE<T>

§

TYPE INNER = <T AS HASH [trait.BitcoinHash.html]>::INNER [trait.BitcoinHash.html#associatedtype.Inner]

§

CONST LEN: USIZE [https://doc.rust-lang.org/1.67.0/std/primitive.usize.html] = T::LEN

