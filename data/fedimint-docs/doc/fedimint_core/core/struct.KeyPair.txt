â˜°
logo [../../static.files/rust-logo-151179464ae7ed46.svg]
../../fedimint_core/index.html




logo [../../static.files/rust-logo-151179464ae7ed46.svg]
../../fedimint_core/index.html


KEYPAIR


METHODS

 * add_xonly_tweak
 * as_mut_ptr
 * as_ptr
 * display_secret
 * from_seckey_slice
 * from_seckey_str
 * from_seckey_str_global
 * from_secret_key
 * new
 * new_global
 * public_key
 * secret_bytes
 * secret_key
 * sign_schnorr
 * tweak_add_assign
 * x_only_public_key


TRAIT IMPLEMENTATIONS

 * Clone
 * Copy
 * Debug
 * Decodable
 * Deserialize<'de>
 * Encodable
 * Eq
 * From<&'a KeyPair>
 * From<KeyPair>
 * From<TweakedKeyPair>
 * FromStr
 * Hash
 * Ord
 * PartialEq<KeyPair>
 * PartialOrd<KeyPair>
 * Serialize
 * StructuralEq
 * StructuralPartialEq
 * TapTweak


AUTO TRAIT IMPLEMENTATIONS

 * RefUnwindSafe
 * Send
 * Sync
 * Unpin
 * UnwindSafe


BLANKET IMPLEMENTATIONS

 * Any
 * Borrow<T>
 * BorrowMut<T>
 * CallHasher
 * Conv
 * DatabaseValue
 * DeserializeOwned
 * DynEncodable
 * Equivalent<K>
 * FmtForward
 * From<T>
 * FromRef<T>
 * FutureExt
 * Instrument
 * Into<U>
 * IntoRequest<T>
 * MaybeSend
 * MaybeSend
 * MaybeSync
 * Pipe
 * Same<T>
 * Serialize
 * Tap
 * ToOwned
 * TryConv
 * TryFrom<U>
 * TryInto<U>
 * VZip<V>
 * WithSubscriber


IN FEDIMINT_CORE::CORE [index.html]

? [../../help.html]
Change settings [../../static.files/wheel-5ec35bf9ca753509.svg]../../settings.html


STRUCT FEDIMINT_CORE [../index.html]::CORE [index.html]::KEYPAIRCopy item path [../../static.files/clipboard-7571035ce49a181d.svg]

[âˆ’]

pub struct KeyPair(_);

Expand description

Opaque data structure that holds a keypair consisting of a secret and a public key.


SERDE SUPPORT

Implements de/serialization with the serde and_global-context features enabled. Serializes the secret bytes only. We treat the
byte value as a tuple of 32 u8s for non-human-readable formats. This representation is optimal for for some formats (e.g. bincode
[https://docs.rs/bincode]) however other formats may be less optimal (e.g. cbor [https://docs.rs/cbor]). For human-readable
formats we use a hex string.


EXAMPLES

Basic usage:

use secp256k1::{rand, KeyPair, Secp256k1};

let secp = Secp256k1::new();
let (secret_key, public_key) = secp.generate_keypair(&mut rand::thread_rng());
let key_pair = KeyPair::from_secret_key(&secp, &secret_key);


IMPLEMENTATIONSÂ§

Â§


IMPL KEYPAIR [struct.KeyPair.html]

PUB FN DISPLAY_SECRET(&SELF) -> DISPLAYSECRET

Formats the explicit byte value of the secret key kept inside the type as a little-endian hexadecimal string using the provided
formatter.

This is the only method that outputs the actual secret key value, and, thus, should be used with extreme precaution.

EXAMPLE

use secp256k1::ONE_KEY;
use secp256k1::KeyPair;
use secp256k1::Secp256k1;

let secp = Secp256k1::new();
let key = ONE_KEY;
let key = KeyPair::from_secret_key(&secp, &key);
// Here we explicitly display the secret value:
assert_eq!(
    "0000000000000000000000000000000000000000000000000000000000000001",
    format!("{}", key.display_secret())
);
// Also, we can explicitly display with `Debug`:
assert_eq!(
    format!("{:?}", key.display_secret()),
    format!("DisplaySecret(\"{}\")", key.display_secret())
);

Â§


IMPL KEYPAIR [struct.KeyPair.html]

PUB FN AS_PTR(&SELF) -> *CONST [https://doc.rust-lang.org/1.67.0/std/primitive.pointer.html]KEYPAIR

Obtains a raw const pointer suitable for use with FFI functions.

PUB FN AS_MUT_PTR(&MUT SELF) -> *MUT [https://doc.rust-lang.org/1.67.0/std/primitive.pointer.html]KEYPAIR

Obtains a raw mutable pointer suitable for use with FFI functions.

PUB FN FROM_SECRET_KEY<C>(SECP: &SECP256K1<C>, SK: &SECRETKEY) -> KEYPAIR [struct.KeyPair.html]WHERE
Â Â Â Â C: SIGNING,

Creates a KeyPair [struct.KeyPair.html] directly from a Secp256k1 secret key.

PUB FN FROM_SECKEY_SLICE<C>(
Â Â Â Â SECP: &SECP256K1<C>,
Â Â Â Â DATA: &[U8 [https://doc.rust-lang.org/1.67.0/std/primitive.u8.html]]
) -> RESULT [https://doc.rust-lang.org/1.67.0/core/result/enum.Result.html]<KEYPAIR [struct.KeyPair.html], ERROR>WHERE
Â Â Â Â C: SIGNING,

Creates a KeyPair [struct.KeyPair.html] directly from a secret key slice.

ERRORS

[Error::InvalidSecretKey] if the provided data has an incorrect length, exceeds Secp256k1 field p value or the corresponding
public key is not even.

PUB FN FROM_SECKEY_STR<C>(SECP: &SECP256K1<C>, S: &STR [https://doc.rust-lang.org/1.67.0/std/primitive.str.html]) -> RESULT
[https://doc.rust-lang.org/1.67.0/core/result/enum.Result.html]<KEYPAIR [struct.KeyPair.html], ERROR>WHERE
Â Â Â Â C: SIGNING,

Creates a KeyPair [struct.KeyPair.html] directly from a secret key string.

ERRORS

[Error::InvalidSecretKey] if corresponding public key for the provided secret key is not even.

PUB FN FROM_SECKEY_STR_GLOBAL(S: &STR [https://doc.rust-lang.org/1.67.0/std/primitive.str.html]) -> RESULT
[https://doc.rust-lang.org/1.67.0/core/result/enum.Result.html]<KEYPAIR [struct.KeyPair.html], ERROR>

Creates a KeyPair [struct.KeyPair.html] directly from a secret key string and the global [SECP256K1] context.

ERRORS

[Error::InvalidSecretKey] if corresponding public key for the provided secret key is not even.

PUB FN NEW<R, C>(SECP: &SECP256K1<C>, RNG: &MUT [https://doc.rust-lang.org/1.67.0/std/primitive.reference.html]R) -> KEYPAIR
[struct.KeyPair.html]WHERE
Â Â Â Â R: RNG [https://rust-random.github.io/rand/rand/rng/trait.Rng.html] + ?SIZED
[https://doc.rust-lang.org/1.67.0/core/marker/trait.Sized.html],
Â Â Â Â C: SIGNING,

Generates a new random secret key.

EXAMPLES

use secp256k1::{rand, Secp256k1, SecretKey, KeyPair};

let secp = Secp256k1::new();
let key_pair = KeyPair::new(&secp, &mut rand::thread_rng());

PUB FN NEW_GLOBAL<R>(RNG: &MUT [https://doc.rust-lang.org/1.67.0/std/primitive.reference.html]R) -> KEYPAIR
[struct.KeyPair.html]WHERE
Â Â Â Â R: RNG [https://rust-random.github.io/rand/rand/rng/trait.Rng.html] + ?SIZED
[https://doc.rust-lang.org/1.67.0/core/marker/trait.Sized.html],

Generates a new random secret key using the global [SECP256K1] context.

PUB FN SECRET_BYTES(&SELF) -> [U8 [https://doc.rust-lang.org/1.67.0/std/primitive.u8.html]; 32
[https://doc.rust-lang.org/1.67.0/std/primitive.array.html]]

Returns the secret bytes for this key pair.

PUB FN TWEAK_ADD_ASSIGN<C>(
Â Â Â Â &MUT SELF,
Â Â Â Â SECP: &SECP256K1<C>,
Â Â Â Â TWEAK: &SCALAR
) -> RESULT [https://doc.rust-lang.org/1.67.0/core/result/enum.Result.html]<()
[https://doc.rust-lang.org/1.67.0/std/primitive.unit.html], ERROR>WHERE
Â Â Â Â C: VERIFICATION,

ðŸ‘ŽDeprecated since 0.23.0: Use add_xonly_tweak instead

Tweaks a keypair by adding the given tweak to the secret key and updating the public key accordingly.

PUB FN ADD_XONLY_TWEAK<C>(
Â Â Â Â SELF,
Â Â Â Â SECP: &SECP256K1<C>,
Â Â Â Â TWEAK: &SCALAR
) -> RESULT [https://doc.rust-lang.org/1.67.0/core/result/enum.Result.html]<KEYPAIR [struct.KeyPair.html], ERROR>WHERE
Â Â Â Â C: VERIFICATION,

Tweaks a keypair by first converting the public key to an xonly key and tweaking it.

ERRORS

Returns an error if the resulting key would be invalid.

NB: Will not error if the tweaked public key has an odd value and canâ€™t be used for BIP 340-342 purposes.

EXAMPLES

use secp256k1::{Secp256k1, KeyPair, Scalar};
use secp256k1::rand::{RngCore, thread_rng};

let secp = Secp256k1::new();
let tweak = Scalar::random();

let mut key_pair = KeyPair::new(&secp, &mut thread_rng());
let tweaked = key_pair.add_xonly_tweak(&secp, &tweak).expect("Improbable to fail with a randomly generated tweak");

PUB FN SECRET_KEY(&SELF) -> SECRETKEY

Returns the [SecretKey] for this KeyPair [struct.KeyPair.html].

This is equivalent to using [SecretKey::from_keypair].

PUB FN PUBLIC_KEY(&SELF) -> PUBLICKEY

Returns the [PublicKey] for this KeyPair [struct.KeyPair.html].

This is equivalent to using [PublicKey::from_keypair].

PUB FN X_ONLY_PUBLIC_KEY(&SELF) -> (XONLYPUBLICKEY, PARITY)

Returns the [XOnlyPublicKey] (and itâ€™s [Parity]) for this KeyPair [struct.KeyPair.html].

This is equivalent to using [XOnlyPublicKey::from_keypair].

PUB FN SIGN_SCHNORR(&SELF, MSG: MESSAGE) -> SIGNATURE

Constructs an schnorr signature for msg using the global [SECP256K1] context.


TRAIT IMPLEMENTATIONSÂ§

Â§


IMPL CLONE [https://doc.rust-lang.org/1.67.0/core/clone/trait.Clone.html] FOR KEYPAIR [struct.KeyPair.html]

Â§

FN CLONE [https://doc.rust-lang.org/1.67.0/core/clone/trait.Clone.html#tymethod.clone](&SELF) -> KEYPAIR [struct.KeyPair.html]

Returns a copy of the value. Read more [https://doc.rust-lang.org/1.67.0/core/clone/trait.Clone.html#tymethod.clone]
1.0.0 Â· source [https://doc.rust-lang.org/1.67.0/src/core/clone.rs.html#132-134]Â§

FN CLONE_FROM [https://doc.rust-lang.org/1.67.0/core/clone/trait.Clone.html#method.clone_from](&MUT SELF, SOURCE: &
[https://doc.rust-lang.org/1.67.0/std/primitive.reference.html]SELF)

Performs copy-assignment from source. Read more [https://doc.rust-lang.org/1.67.0/core/clone/trait.Clone.html#method.clone_from]
Â§


IMPL DEBUG [https://doc.rust-lang.org/1.67.0/core/fmt/trait.Debug.html] FOR KEYPAIR [struct.KeyPair.html]

Â§

FN FMT [https://doc.rust-lang.org/1.67.0/core/fmt/trait.Debug.html#tymethod.fmt](&SELF, F: &MUT FORMATTER
[https://doc.rust-lang.org/1.67.0/core/fmt/struct.Formatter.html]<'_>) -> RESULT
[https://doc.rust-lang.org/1.67.0/core/result/enum.Result.html]<() [https://doc.rust-lang.org/1.67.0/std/primitive.unit.html],
ERROR [https://doc.rust-lang.org/1.67.0/core/fmt/struct.Error.html]>

Formats the value using the given formatter. Read more [https://doc.rust-lang.org/1.67.0/core/fmt/trait.Debug.html#tymethod.fmt]
source [../../src/fedimint_core/encoding/secp256k1.rs.html#89-98]Â§


IMPL DECODABLE [../encoding/trait.Decodable.html] FOR KEYPAIR [struct.KeyPair.html]

source [../../src/fedimint_core/encoding/secp256k1.rs.html#90-97]Â§

FN CONSENSUS_DECODE [../encoding/trait.Decodable.html#tymethod.consensus_decode]<D:Â READ
[https://doc.rust-lang.org/1.67.0/std/io/trait.Read.html]>(
Â Â Â Â D: &MUT [https://doc.rust-lang.org/1.67.0/std/primitive.reference.html]D,
Â Â Â Â MODULES: &MODULEDECODERREGISTRY [../module/registry/type.ModuleDecoderRegistry.html]
) -> RESULT [https://doc.rust-lang.org/1.67.0/core/result/enum.Result.html]<SELF, DECODEERROR
[../encoding/struct.DecodeError.html]>

Decode an object with a well-defined format
source [../../src/fedimint_core/encoding/mod.rs.html#113-122]Â§

FN CONSENSUS_DECODE_HEX [../encoding/trait.Decodable.html#method.consensus_decode_hex](
Â Â Â Â HEX: &STR [https://doc.rust-lang.org/1.67.0/std/primitive.str.html],
Â Â Â Â MODULES: &MODULEDECODERREGISTRY [../module/registry/type.ModuleDecoderRegistry.html]
) -> RESULT [https://doc.rust-lang.org/1.67.0/core/result/enum.Result.html]<SELF, DECODEERROR
[../encoding/struct.DecodeError.html]>

Decode an object from hex
Â§


IMPL<'DE> DESERIALIZE [https://docs.rs/serde/1.0.163/serde/de/trait.Deserialize.html]<'DE> FOR KEYPAIR [struct.KeyPair.html]

Â§

FN DESERIALIZE [https://docs.rs/serde/1.0.163/serde/de/trait.Deserialize.html#tymethod.deserialize]<D>(D: D) -> RESULT
[https://doc.rust-lang.org/1.67.0/core/result/enum.Result.html]<KEYPAIR [struct.KeyPair.html], <D AS DESERIALIZER
[https://docs.rs/serde/1.0.163/serde/de/trait.Deserializer.html]<'DE>>::ERROR
[https://docs.rs/serde/1.0.163/serde/de/trait.Deserializer.html#associatedtype.Error]>WHERE
Â Â Â Â D: DESERIALIZER [https://docs.rs/serde/1.0.163/serde/de/trait.Deserializer.html]<'DE>,

Deserialize this value from the given Serde deserializer. Read more
[https://docs.rs/serde/1.0.163/serde/de/trait.Deserialize.html#tymethod.deserialize]
source [../../src/fedimint_core/encoding/secp256k1.rs.html#83-87]Â§


IMPL ENCODABLE [../encoding/trait.Encodable.html] FOR KEYPAIR [struct.KeyPair.html]

source [../../src/fedimint_core/encoding/secp256k1.rs.html#84-86]Â§

FN CONSENSUS_ENCODE [../encoding/trait.Encodable.html#tymethod.consensus_encode]<W:Â WRITE
[https://doc.rust-lang.org/1.67.0/std/io/trait.Write.html]>(&SELF, WRITER: &MUT
[https://doc.rust-lang.org/1.67.0/std/primitive.reference.html]W) -> RESULT
[https://doc.rust-lang.org/1.67.0/core/result/enum.Result.html]<USIZE [https://doc.rust-lang.org/1.67.0/std/primitive.usize.html],
ERROR [https://doc.rust-lang.org/1.67.0/std/io/error/struct.Error.html]>

Encode an object with a well-defined format. Returns the number of bytes written on success. Read more
[../encoding/trait.Encodable.html#tymethod.consensus_encode]
source [../../src/fedimint_core/encoding/mod.rs.html#75-79]Â§

FN CONSENSUS_ENCODE_TO_VEC [../encoding/trait.Encodable.html#method.consensus_encode_to_vec](&SELF) -> RESULT
[https://doc.rust-lang.org/1.67.0/core/result/enum.Result.html]<VEC
[https://doc.rust-lang.org/1.67.0/alloc/vec/struct.Vec.html]<U8 [https://doc.rust-lang.org/1.67.0/std/primitive.u8.html]>, ERROR
[https://doc.rust-lang.org/1.67.0/std/io/error/struct.Error.html]>

Self::consensus_encode [../encoding/trait.Encodable.html#tymethod.consensus_encode] to newly allocated Vec<u8>
source [../../src/fedimint_core/encoding/mod.rs.html#81-85]Â§

FN CONSENSUS_ENCODE_TO_HEX [../encoding/trait.Encodable.html#method.consensus_encode_to_hex](&SELF) -> RESULT
[https://doc.rust-lang.org/1.67.0/core/result/enum.Result.html]<STRING
[https://doc.rust-lang.org/1.67.0/alloc/string/struct.String.html], ERROR
[https://doc.rust-lang.org/1.67.0/std/io/error/struct.Error.html]>

source [../../src/fedimint_core/encoding/mod.rs.html#92-101]Â§

FN CONSENSUS_HASH [../encoding/trait.Encodable.html#method.consensus_hash]<H>(&SELF) -> HWHERE
Â Â Â Â H: HASH [../trait.BitcoinHash.html],
Â Â Â Â H::ENGINE [../trait.BitcoinHash.html#associatedtype.Engine]: WRITE [https://doc.rust-lang.org/1.67.0/std/io/trait.Write.html],

Generate a SHA256 hash of the consensus encoding using the default hash engine for H. Read more
[../encoding/trait.Encodable.html#method.consensus_hash]
Â§


IMPL<'A> FROM [https://doc.rust-lang.org/1.67.0/core/convert/trait.From.html]<&'A KEYPAIR [struct.KeyPair.html]> FOR PUBLICKEY

Â§

FN FROM [https://doc.rust-lang.org/1.67.0/core/convert/trait.From.html#tymethod.from](PAIR: &'A KEYPAIR [struct.KeyPair.html]) ->
PUBLICKEY

Converts to this type from the input type.
Â§


IMPL FROM [https://doc.rust-lang.org/1.67.0/core/convert/trait.From.html]<KEYPAIR [struct.KeyPair.html]> FOR PUBLICKEY

Â§

FN FROM [https://doc.rust-lang.org/1.67.0/core/convert/trait.From.html#tymethod.from](PAIR: KEYPAIR [struct.KeyPair.html]) ->
PUBLICKEY

Converts to this type from the input type.
Â§


IMPL FROM [https://doc.rust-lang.org/1.67.0/core/convert/trait.From.html]<TWEAKEDKEYPAIR> FOR KEYPAIR [struct.KeyPair.html]

Â§

FN FROM [https://doc.rust-lang.org/1.67.0/core/convert/trait.From.html#tymethod.from](PAIR: TWEAKEDKEYPAIR) -> KEYPAIR
[struct.KeyPair.html]

Converts to this type from the input type.
Â§


IMPL FROMSTR [https://doc.rust-lang.org/1.67.0/core/str/traits/trait.FromStr.html] FOR KEYPAIR [struct.KeyPair.html]

Â§

TYPE ERR [https://doc.rust-lang.org/1.67.0/core/str/traits/trait.FromStr.html#associatedtype.Err] = ERROR

The associated error which can be returned from parsing.
Â§

FN FROM_STR [https://doc.rust-lang.org/1.67.0/core/str/traits/trait.FromStr.html#tymethod.from_str](S: &STR
[https://doc.rust-lang.org/1.67.0/std/primitive.str.html]) -> RESULT
[https://doc.rust-lang.org/1.67.0/core/result/enum.Result.html]<KEYPAIR [struct.KeyPair.html], <KEYPAIR [struct.KeyPair.html] AS
FROMSTR [https://doc.rust-lang.org/1.67.0/core/str/traits/trait.FromStr.html]>::ERR
[https://doc.rust-lang.org/1.67.0/core/str/traits/trait.FromStr.html#associatedtype.Err]>

Parses a string s to return a value of this type. Read more
[https://doc.rust-lang.org/1.67.0/core/str/traits/trait.FromStr.html#tymethod.from_str]
Â§


IMPL HASH [https://doc.rust-lang.org/1.67.0/core/hash/trait.Hash.html] FOR KEYPAIR [struct.KeyPair.html]

Â§

FN HASH [https://doc.rust-lang.org/1.67.0/core/hash/trait.Hash.html#tymethod.hash]<__H>(&SELF, STATE: &MUT
[https://doc.rust-lang.org/1.67.0/std/primitive.reference.html]__H)WHERE
Â Â Â Â __H: HASHER [https://doc.rust-lang.org/1.67.0/core/hash/trait.Hasher.html],

Feeds this value into the given Hasher [https://doc.rust-lang.org/1.67.0/core/hash/trait.Hasher.html]. Read more
[https://doc.rust-lang.org/1.67.0/core/hash/trait.Hash.html#tymethod.hash]
1.3.0 Â· source [https://doc.rust-lang.org/1.67.0/src/core/hash/mod.rs.html#239-241]Â§

FN HASH_SLICE [https://doc.rust-lang.org/1.67.0/core/hash/trait.Hash.html#method.hash_slice]<H>(DATA: &[SELF]
[https://doc.rust-lang.org/1.67.0/std/primitive.slice.html], STATE: &MUT
[https://doc.rust-lang.org/1.67.0/std/primitive.reference.html]H)WHERE
Â Â Â Â H: HASHER [https://doc.rust-lang.org/1.67.0/core/hash/trait.Hasher.html],
Â Â Â Â SELF: SIZED [https://doc.rust-lang.org/1.67.0/core/marker/trait.Sized.html],

Feeds a slice of this type into the given Hasher [https://doc.rust-lang.org/1.67.0/core/hash/trait.Hasher.html]. Read more
[https://doc.rust-lang.org/1.67.0/core/hash/trait.Hash.html#method.hash_slice]
Â§


IMPL ORD [https://doc.rust-lang.org/1.67.0/core/cmp/trait.Ord.html] FOR KEYPAIR [struct.KeyPair.html]

Â§

FN CMP [https://doc.rust-lang.org/1.67.0/core/cmp/trait.Ord.html#tymethod.cmp](&SELF, OTHER: &KEYPAIR [struct.KeyPair.html]) ->
ORDERING [https://doc.rust-lang.org/1.67.0/core/cmp/enum.Ordering.html]

This method returns an Ordering [https://doc.rust-lang.org/1.67.0/core/cmp/enum.Ordering.html] between self and other. Read more
[https://doc.rust-lang.org/1.67.0/core/cmp/trait.Ord.html#tymethod.cmp]
1.21.0 Â· source [https://doc.rust-lang.org/1.67.0/src/core/cmp.rs.html#798-801]Â§

FN MAX [https://doc.rust-lang.org/1.67.0/core/cmp/trait.Ord.html#method.max](SELF, OTHER: SELF) -> SELFWHERE
Â Â Â Â SELF: SIZED [https://doc.rust-lang.org/1.67.0/core/marker/trait.Sized.html],

Compares and returns the maximum of two values. Read more [https://doc.rust-lang.org/1.67.0/core/cmp/trait.Ord.html#method.max]
1.21.0 Â· source [https://doc.rust-lang.org/1.67.0/src/core/cmp.rs.html#825-828]Â§

FN MIN [https://doc.rust-lang.org/1.67.0/core/cmp/trait.Ord.html#method.min](SELF, OTHER: SELF) -> SELFWHERE
Â Â Â Â SELF: SIZED [https://doc.rust-lang.org/1.67.0/core/marker/trait.Sized.html],

Compares and returns the minimum of two values. Read more [https://doc.rust-lang.org/1.67.0/core/cmp/trait.Ord.html#method.min]
1.50.0 Â· source [https://doc.rust-lang.org/1.67.0/src/core/cmp.rs.html#857-861]Â§

FN CLAMP [https://doc.rust-lang.org/1.67.0/core/cmp/trait.Ord.html#method.clamp](SELF, MIN: SELF, MAX: SELF) -> SELFWHERE
Â Â Â Â SELF: SIZED [https://doc.rust-lang.org/1.67.0/core/marker/trait.Sized.html] + PARTIALORD
[https://doc.rust-lang.org/1.67.0/core/cmp/trait.PartialOrd.html]<SELF>,

Restrict a value to a certain interval. Read more [https://doc.rust-lang.org/1.67.0/core/cmp/trait.Ord.html#method.clamp]
Â§


IMPL PARTIALEQ [https://doc.rust-lang.org/1.67.0/core/cmp/trait.PartialEq.html]<KEYPAIR [struct.KeyPair.html]> FOR KEYPAIR
[struct.KeyPair.html]

Â§

FN EQ [https://doc.rust-lang.org/1.67.0/core/cmp/trait.PartialEq.html#tymethod.eq](&SELF, OTHER: &KEYPAIR [struct.KeyPair.html])
-> BOOL [https://doc.rust-lang.org/1.67.0/std/primitive.bool.html]

This method tests for self and other values to be equal, and is used by ==. Read more
[https://doc.rust-lang.org/1.67.0/core/cmp/trait.PartialEq.html#tymethod.eq]
1.0.0 Â· source [https://doc.rust-lang.org/1.67.0/src/core/cmp.rs.html#229]Â§

FN NE [https://doc.rust-lang.org/1.67.0/core/cmp/trait.PartialEq.html#method.ne](&SELF, OTHER: &
[https://doc.rust-lang.org/1.67.0/std/primitive.reference.html]RHS) -> BOOL
[https://doc.rust-lang.org/1.67.0/std/primitive.bool.html]

This method tests for !=. The default implementation is almost always sufficient, and should not be overridden without very good
reason. Read more [https://doc.rust-lang.org/1.67.0/core/cmp/trait.PartialEq.html#method.ne]
Â§


IMPL PARTIALORD [https://doc.rust-lang.org/1.67.0/core/cmp/trait.PartialOrd.html]<KEYPAIR [struct.KeyPair.html]> FOR KEYPAIR
[struct.KeyPair.html]

Â§

FN PARTIAL_CMP [https://doc.rust-lang.org/1.67.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp](&SELF, OTHER: &KEYPAIR
[struct.KeyPair.html]) -> OPTION [https://doc.rust-lang.org/1.67.0/core/option/enum.Option.html]<ORDERING
[https://doc.rust-lang.org/1.67.0/core/cmp/enum.Ordering.html]>

This method returns an ordering between self and other values if one exists. Read more
[https://doc.rust-lang.org/1.67.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp]
1.0.0 Â· source [https://doc.rust-lang.org/1.67.0/src/core/cmp.rs.html#1126]Â§

FN LT [https://doc.rust-lang.org/1.67.0/core/cmp/trait.PartialOrd.html#method.lt](&SELF, OTHER: &
[https://doc.rust-lang.org/1.67.0/std/primitive.reference.html]RHS) -> BOOL
[https://doc.rust-lang.org/1.67.0/std/primitive.bool.html]

This method tests less than (for self and other) and is used by the < operator. Read more
[https://doc.rust-lang.org/1.67.0/core/cmp/trait.PartialOrd.html#method.lt]
1.0.0 Â· source [https://doc.rust-lang.org/1.67.0/src/core/cmp.rs.html#1145]Â§

FN LE [https://doc.rust-lang.org/1.67.0/core/cmp/trait.PartialOrd.html#method.le](&SELF, OTHER: &
[https://doc.rust-lang.org/1.67.0/std/primitive.reference.html]RHS) -> BOOL
[https://doc.rust-lang.org/1.67.0/std/primitive.bool.html]

This method tests less than or equal to (for self and other) and is used by the <= operator. Read more
[https://doc.rust-lang.org/1.67.0/core/cmp/trait.PartialOrd.html#method.le]
1.0.0 Â· source [https://doc.rust-lang.org/1.67.0/src/core/cmp.rs.html#1163]Â§

FN GT [https://doc.rust-lang.org/1.67.0/core/cmp/trait.PartialOrd.html#method.gt](&SELF, OTHER: &
[https://doc.rust-lang.org/1.67.0/std/primitive.reference.html]RHS) -> BOOL
[https://doc.rust-lang.org/1.67.0/std/primitive.bool.html]

This method tests greater than (for self and other) and is used by the > operator. Read more
[https://doc.rust-lang.org/1.67.0/core/cmp/trait.PartialOrd.html#method.gt]
1.0.0 Â· source [https://doc.rust-lang.org/1.67.0/src/core/cmp.rs.html#1182]Â§

FN GE [https://doc.rust-lang.org/1.67.0/core/cmp/trait.PartialOrd.html#method.ge](&SELF, OTHER: &
[https://doc.rust-lang.org/1.67.0/std/primitive.reference.html]RHS) -> BOOL
[https://doc.rust-lang.org/1.67.0/std/primitive.bool.html]

This method tests greater than or equal to (for self and other) and is used by the >= operator. Read more
[https://doc.rust-lang.org/1.67.0/core/cmp/trait.PartialOrd.html#method.ge]
Â§


IMPL SERIALIZE [https://docs.rs/serde/1.0.163/serde/ser/trait.Serialize.html] FOR KEYPAIR [struct.KeyPair.html]

Â§

FN SERIALIZE [https://docs.rs/serde/1.0.163/serde/ser/trait.Serialize.html#tymethod.serialize]<S>(
Â Â Â Â &SELF,
Â Â Â Â S: S
) -> RESULT [https://doc.rust-lang.org/1.67.0/core/result/enum.Result.html]<<S AS SERIALIZER
[https://docs.rs/serde/1.0.163/serde/ser/trait.Serializer.html]>::OK
[https://docs.rs/serde/1.0.163/serde/ser/trait.Serializer.html#associatedtype.Ok], <S AS SERIALIZER
[https://docs.rs/serde/1.0.163/serde/ser/trait.Serializer.html]>::ERROR
[https://docs.rs/serde/1.0.163/serde/ser/trait.Serializer.html#associatedtype.Error]>WHERE
Â Â Â Â S: SERIALIZER [https://docs.rs/serde/1.0.163/serde/ser/trait.Serializer.html],

Serialize this value into the given Serde serializer. Read more
[https://docs.rs/serde/1.0.163/serde/ser/trait.Serialize.html#tymethod.serialize]
Â§


IMPL TAPTWEAK FOR KEYPAIR [struct.KeyPair.html]

Â§

FN TAP_TWEAK<C>(
Â Â Â Â SELF,
Â Â Â Â SECP: &SECP256K1<C>,
Â Â Â Â MERKLE_ROOT: OPTION [https://doc.rust-lang.org/1.67.0/core/option/enum.Option.html]<TAPBRANCHHASH>
) -> TWEAKEDKEYPAIRWHERE
Â Â Â Â C: VERIFICATION,

Tweaks private and public keys within an untweaked [KeyPair] with corresponding public key value and optional script tree merkle
root.

This is done by tweaking private key within the pair using the equation q = p + H(P|c), where

 * q is the tweaked private key
 * p is the internal private key
 * H is the hash function
 * c is the commitment data The public key is generated from a private key by multiplying with generator point, Q = qG.

RETURNS

The tweaked key and its parity.

Â§

TYPE TWEAKEDAUX = TWEAKEDKEYPAIR

Tweaked key type with optional auxiliary information
Â§

TYPE TWEAKEDKEY = TWEAKEDKEYPAIR

Tweaked key type
Â§

FN DANGEROUS_ASSUME_TWEAKED(SELF) -> TWEAKEDKEYPAIR

Directly converts an [UntweakedPublicKey] to a [TweakedPublicKey] Read more
Â§


IMPL COPY [https://doc.rust-lang.org/1.67.0/core/marker/trait.Copy.html] FOR KEYPAIR [struct.KeyPair.html]

Â§


IMPL EQ [https://doc.rust-lang.org/1.67.0/core/cmp/trait.Eq.html] FOR KEYPAIR [struct.KeyPair.html]

Â§


IMPL STRUCTURALEQ [https://doc.rust-lang.org/1.67.0/core/marker/trait.StructuralEq.html] FOR KEYPAIR [struct.KeyPair.html]

Â§


IMPL STRUCTURALPARTIALEQ [https://doc.rust-lang.org/1.67.0/core/marker/trait.StructuralPartialEq.html] FOR KEYPAIR
[struct.KeyPair.html]


AUTO TRAIT IMPLEMENTATIONSÂ§

Â§


IMPL REFUNWINDSAFE [https://doc.rust-lang.org/1.67.0/core/panic/unwind_safe/trait.RefUnwindSafe.html] FOR KEYPAIR
[struct.KeyPair.html]

Â§


IMPL SEND [https://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html] FOR KEYPAIR [struct.KeyPair.html]

Â§


IMPL SYNC [https://doc.rust-lang.org/1.67.0/core/marker/trait.Sync.html] FOR KEYPAIR [struct.KeyPair.html]

Â§


IMPL UNPIN [https://doc.rust-lang.org/1.67.0/core/marker/trait.Unpin.html] FOR KEYPAIR [struct.KeyPair.html]

Â§


IMPL UNWINDSAFE [https://doc.rust-lang.org/1.67.0/core/panic/unwind_safe/trait.UnwindSafe.html] FOR KEYPAIR [struct.KeyPair.html]


BLANKET IMPLEMENTATIONSÂ§

source [https://doc.rust-lang.org/1.67.0/src/core/any.rs.html#200]Â§


IMPL<T> ANY [https://doc.rust-lang.org/1.67.0/core/any/trait.Any.html] FOR TWHERE
Â Â Â Â T: 'STATIC + ?SIZED [https://doc.rust-lang.org/1.67.0/core/marker/trait.Sized.html],

source [https://doc.rust-lang.org/1.67.0/src/core/any.rs.html#201]Â§

FN TYPE_ID [https://doc.rust-lang.org/1.67.0/core/any/trait.Any.html#tymethod.type_id](&SELF) -> TYPEID
[https://doc.rust-lang.org/1.67.0/core/any/struct.TypeId.html]

Gets the TypeId of self. Read more [https://doc.rust-lang.org/1.67.0/core/any/trait.Any.html#tymethod.type_id]
source [https://doc.rust-lang.org/1.67.0/src/core/borrow.rs.html#211]Â§


IMPL<T> BORROW [https://doc.rust-lang.org/1.67.0/core/borrow/trait.Borrow.html]<T> FOR TWHERE
Â Â Â Â T: ?SIZED [https://doc.rust-lang.org/1.67.0/core/marker/trait.Sized.html],

const: unstable [https://github.com/rust-lang/rust/issues/91522] Â· source
[https://doc.rust-lang.org/1.67.0/src/core/borrow.rs.html#213]Â§

FN BORROW [https://doc.rust-lang.org/1.67.0/core/borrow/trait.Borrow.html#tymethod.borrow](&SELF) -> &
[https://doc.rust-lang.org/1.67.0/std/primitive.reference.html]T

Immutably borrows from an owned value. Read more [https://doc.rust-lang.org/1.67.0/core/borrow/trait.Borrow.html#tymethod.borrow]
source [https://doc.rust-lang.org/1.67.0/src/core/borrow.rs.html#220]Â§


IMPL<T> BORROWMUT [https://doc.rust-lang.org/1.67.0/core/borrow/trait.BorrowMut.html]<T> FOR TWHERE
Â Â Â Â T: ?SIZED [https://doc.rust-lang.org/1.67.0/core/marker/trait.Sized.html],

const: unstable [https://github.com/rust-lang/rust/issues/91522] Â· source
[https://doc.rust-lang.org/1.67.0/src/core/borrow.rs.html#221]Â§

FN BORROW_MUT [https://doc.rust-lang.org/1.67.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut](&MUT SELF) -> &MUT
[https://doc.rust-lang.org/1.67.0/std/primitive.reference.html]T

Mutably borrows from an owned value. Read more
[https://doc.rust-lang.org/1.67.0/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut]
Â§


IMPL<T> CALLHASHER FOR TWHERE
Â Â Â Â T: HASH [https://doc.rust-lang.org/1.67.0/core/hash/trait.Hash.html] + ?SIZED
[https://doc.rust-lang.org/1.67.0/core/marker/trait.Sized.html],

Â§

FN GET_HASH<H, B>(VALUE: & [https://doc.rust-lang.org/1.67.0/std/primitive.reference.html]H, BUILD_HASHER: &
[https://doc.rust-lang.org/1.67.0/std/primitive.reference.html]B) -> U64
[https://doc.rust-lang.org/1.67.0/std/primitive.u64.html]WHERE
Â Â Â Â H: HASH [https://doc.rust-lang.org/1.67.0/core/hash/trait.Hash.html] + ?SIZED
[https://doc.rust-lang.org/1.67.0/core/marker/trait.Sized.html],
Â Â Â Â B: BUILDHASHER [https://doc.rust-lang.org/1.67.0/core/hash/trait.BuildHasher.html],

Â§


IMPL<T> CONV FOR T

Â§

FN CONV<T>(SELF) -> TWHERE
Â Â Â Â SELF: INTO [https://doc.rust-lang.org/1.67.0/core/convert/trait.Into.html]<T>,

Converts self into T using Into<T>. Read more
source [../../src/fedimint_core/db/mod.rs.html#1313-1328]Â§


IMPL<T> DATABASEVALUE [../db/trait.DatabaseValue.html] FOR TWHERE
Â Â Â Â T: DEBUG [https://doc.rust-lang.org/1.67.0/core/fmt/trait.Debug.html] + ENCODABLE [../encoding/trait.Encodable.html] +
DECODABLE [../encoding/trait.Decodable.html],

source [../../src/fedimint_core/db/mod.rs.html#1317-1320]Â§

FN FROM_BYTES [../db/trait.DatabaseValue.html#tymethod.from_bytes](
Â Â Â Â DATA: &[U8 [https://doc.rust-lang.org/1.67.0/std/primitive.u8.html]],
Â Â Â Â MODULES: &MODULEREGISTRY [../module/registry/struct.ModuleRegistry.html]<DECODER [struct.Decoder.html]>
) -> RESULT [https://doc.rust-lang.org/1.67.0/core/result/enum.Result.html]<T, DECODINGERROR [../db/enum.DecodingError.html]>

source [../../src/fedimint_core/db/mod.rs.html#1322-1327]Â§

FN TO_BYTES [../db/trait.DatabaseValue.html#tymethod.to_bytes](&SELF) -> VEC
[https://doc.rust-lang.org/1.67.0/alloc/vec/struct.Vec.html]<U8 [https://doc.rust-lang.org/1.67.0/std/primitive.u8.html], GLOBAL
[https://doc.rust-lang.org/1.67.0/alloc/alloc/struct.Global.html]> â’¾

source [../../src/fedimint_core/encoding/mod.rs.html#48-58]Â§


IMPL<T> DYNENCODABLE [../encoding/trait.DynEncodable.html] FOR TWHERE
Â Â Â Â T: ENCODABLE [../encoding/trait.Encodable.html],

source [../../src/fedimint_core/encoding/mod.rs.html#52-57]Â§

FN CONSENSUS_ENCODE_DYN [../encoding/trait.DynEncodable.html#tymethod.consensus_encode_dyn](&SELF, WRITER: &MUT DYN WRITE
[https://doc.rust-lang.org/1.67.0/std/io/trait.Write.html]) -> RESULT
[https://doc.rust-lang.org/1.67.0/core/result/enum.Result.html]<USIZE [https://doc.rust-lang.org/1.67.0/std/primitive.usize.html],
ERROR [https://doc.rust-lang.org/1.67.0/std/io/error/struct.Error.html]>

source [https://docs.rs/indexmap/1/src/indexmap/equivalent.rs.html#18]Â§


IMPL<Q, K> EQUIVALENT [https://docs.rs/indexmap/1/indexmap/equivalent/trait.Equivalent.html]<K> FOR QWHERE
Â Â Â Â Q: EQ [https://doc.rust-lang.org/1.67.0/core/cmp/trait.Eq.html] + ?SIZED
[https://doc.rust-lang.org/1.67.0/core/marker/trait.Sized.html],
Â Â Â Â K: BORROW [https://doc.rust-lang.org/1.67.0/core/borrow/trait.Borrow.html]<Q> + ?SIZED
[https://doc.rust-lang.org/1.67.0/core/marker/trait.Sized.html],

source [https://docs.rs/indexmap/1/src/indexmap/equivalent.rs.html#24]Â§

FN EQUIVALENT [https://docs.rs/indexmap/1/indexmap/equivalent/trait.Equivalent.html#tymethod.equivalent](&SELF, KEY: &
[https://doc.rust-lang.org/1.67.0/std/primitive.reference.html]K) -> BOOL
[https://doc.rust-lang.org/1.67.0/std/primitive.bool.html]

Compare self to key and return true if they are equal.
Â§


IMPL<T> FMTFORWARD FOR T

Â§

FN FMT_BINARY(SELF) -> FMTBINARY<SELF>WHERE
Â Â Â Â SELF: BINARY [https://doc.rust-lang.org/1.67.0/core/fmt/trait.Binary.html],

Causes self to use its Binary implementation when Debug-formatted.
Â§

FN FMT_DISPLAY(SELF) -> FMTDISPLAY<SELF>WHERE
Â Â Â Â SELF: DISPLAY [https://doc.rust-lang.org/1.67.0/core/fmt/trait.Display.html],

Causes self to use its Display implementation when Debug-formatted. Read more
Â§

FN FMT_LOWER_EXP(SELF) -> FMTLOWEREXP<SELF>WHERE
Â Â Â Â SELF: LOWEREXP [https://doc.rust-lang.org/1.67.0/core/fmt/trait.LowerExp.html],

Causes self to use its LowerExp implementation when Debug-formatted. Read more
Â§

FN FMT_LOWER_HEX(SELF) -> FMTLOWERHEX<SELF>WHERE
Â Â Â Â SELF: LOWERHEX [https://doc.rust-lang.org/1.67.0/core/fmt/trait.LowerHex.html],

Causes self to use its LowerHex implementation when Debug-formatted. Read more
Â§

FN FMT_OCTAL(SELF) -> FMTOCTAL<SELF>WHERE
Â Â Â Â SELF: OCTAL [https://doc.rust-lang.org/1.67.0/core/fmt/trait.Octal.html],

Causes self to use its Octal implementation when Debug-formatted.
Â§

FN FMT_POINTER(SELF) -> FMTPOINTER<SELF>WHERE
Â Â Â Â SELF: POINTER [https://doc.rust-lang.org/1.67.0/core/fmt/trait.Pointer.html],

Causes self to use its Pointer implementation when Debug-formatted. Read more
Â§

FN FMT_UPPER_EXP(SELF) -> FMTUPPEREXP<SELF>WHERE
Â Â Â Â SELF: UPPEREXP [https://doc.rust-lang.org/1.67.0/core/fmt/trait.UpperExp.html],

Causes self to use its UpperExp implementation when Debug-formatted. Read more
Â§

FN FMT_UPPER_HEX(SELF) -> FMTUPPERHEX<SELF>WHERE
Â Â Â Â SELF: UPPERHEX [https://doc.rust-lang.org/1.67.0/core/fmt/trait.UpperHex.html],

Causes self to use its UpperHex implementation when Debug-formatted. Read more
Â§

FN FMT_LIST(SELF) -> FMTLIST<SELF>WHERE
Â Â Â Â &'A [https://doc.rust-lang.org/1.67.0/std/primitive.reference.html]SELF: FOR<'A> INTOITERATOR
[https://doc.rust-lang.org/1.67.0/core/iter/traits/collect/trait.IntoIterator.html],

Formats each item in a sequence. Read more
source [https://doc.rust-lang.org/1.67.0/src/core/convert/mod.rs.html#733]Â§


IMPL<T> FROM [https://doc.rust-lang.org/1.67.0/core/convert/trait.From.html]<T> FOR T

const: unstable [https://github.com/rust-lang/rust/issues/88674] Â· source
[https://doc.rust-lang.org/1.67.0/src/core/convert/mod.rs.html#736]Â§

FN FROM [https://doc.rust-lang.org/1.67.0/core/convert/trait.From.html#tymethod.from](T: T) -> T

Returns the argument unchanged.

Â§


IMPL<T> FROMREF<T> FOR TWHERE
Â Â Â Â T: CLONE [https://doc.rust-lang.org/1.67.0/core/clone/trait.Clone.html],

Â§

FN FROM_REF(INPUT: & [https://doc.rust-lang.org/1.67.0/std/primitive.reference.html]T) -> T

Converts to this type from a reference to the input type.
Â§


IMPL<T> FUTUREEXT FOR T

Â§

FN WITH_CONTEXT(SELF, OTEL_CX: CONTEXT) -> WITHCONTEXT<SELF>

Attaches the provided Context [crate::Context] to this type, returning a WithContext wrapper. Read more
Â§

FN WITH_CURRENT_CONTEXT(SELF) -> WITHCONTEXT<SELF>

Attaches the current Context [crate::Context] to this type, returning a WithContext wrapper. Read more
source [https://docs.rs/tracing/0.1.37/src/tracing/instrument.rs.html#276]Â§


IMPL<T> INSTRUMENT [https://docs.rs/tracing/0.1.37/tracing/instrument/trait.Instrument.html] FOR T

source [https://docs.rs/tracing/0.1.37/src/tracing/instrument.rs.html#82]Â§

FN INSTRUMENT [https://docs.rs/tracing/0.1.37/tracing/instrument/trait.Instrument.html#method.instrument](SELF, SPAN: SPAN
[https://docs.rs/tracing/0.1.37/tracing/span/struct.Span.html]) -> INSTRUMENTED
[https://docs.rs/tracing/0.1.37/tracing/instrument/struct.Instrumented.html]<SELF>

Instruments this type with the provided Span [https://docs.rs/tracing/0.1.37/tracing/span/struct.Span.html], returning an
Instrumented wrapper. Read more [https://docs.rs/tracing/0.1.37/tracing/instrument/trait.Instrument.html#method.instrument]
source [https://docs.rs/tracing/0.1.37/src/tracing/instrument.rs.html#121]Â§

FN IN_CURRENT_SPAN [https://docs.rs/tracing/0.1.37/tracing/instrument/trait.Instrument.html#method.in_current_span](SELF) ->
INSTRUMENTED [https://docs.rs/tracing/0.1.37/tracing/instrument/struct.Instrumented.html]<SELF>

Instruments this type with the current [https://docs.rs/tracing/0.1.37/tracing/span/struct.Span.html#method.current] Span
[https://docs.rs/tracing/0.1.37/tracing/span/struct.Span.html], returning an Instrumented wrapper. Read more
[https://docs.rs/tracing/0.1.37/tracing/instrument/trait.Instrument.html#method.in_current_span]
source [https://doc.rust-lang.org/1.67.0/src/core/convert/mod.rs.html#717]Â§


IMPL<T, U> INTO [https://doc.rust-lang.org/1.67.0/core/convert/trait.Into.html]<U> FOR TWHERE
Â Â Â Â U: FROM [https://doc.rust-lang.org/1.67.0/core/convert/trait.From.html]<T>,

const: unstable [https://github.com/rust-lang/rust/issues/88674] Â· source
[https://doc.rust-lang.org/1.67.0/src/core/convert/mod.rs.html#725]Â§

FN INTO [https://doc.rust-lang.org/1.67.0/core/convert/trait.Into.html#tymethod.into](SELF) -> U

Calls U::from(self).

That is, this conversion is whatever the implementation of From [https://doc.rust-lang.org/1.67.0/core/convert/trait.From.html]<T>
for U chooses to do.

source [https://docs.rs/tonic/0.9.2/src/tonic/request.rs.html#384]Â§


IMPL<T> INTOREQUEST [https://docs.rs/tonic/0.9.2/tonic/request/trait.IntoRequest.html]<T> FOR T

source [https://docs.rs/tonic/0.9.2/src/tonic/request.rs.html#385]Â§

FN INTO_REQUEST [https://docs.rs/tonic/0.9.2/tonic/request/trait.IntoRequest.html#tymethod.into_request](SELF) -> REQUEST
[https://docs.rs/tonic/0.9.2/tonic/request/struct.Request.html]<T>

Wrap the input message T in a tonic::Request
Â§


IMPL<T> PIPE FOR TWHERE
Â Â Â Â T: ?SIZED [https://doc.rust-lang.org/1.67.0/core/marker/trait.Sized.html],

Â§

FN PIPE<R>(SELF, FUNC: IMPL FNONCE [https://doc.rust-lang.org/1.67.0/core/ops/function/trait.FnOnce.html](SELF) -> R) -> RWHERE
Â Â Â Â SELF: SIZED [https://doc.rust-lang.org/1.67.0/core/marker/trait.Sized.html],

Pipes by value. This is generally the method you want to use. Read more
Â§

FN PIPE_REF<'A, R>(&'A SELF, FUNC: IMPL FNONCE [https://doc.rust-lang.org/1.67.0/core/ops/function/trait.FnOnce.html](&'A
[https://doc.rust-lang.org/1.67.0/std/primitive.reference.html]SELF) -> R) -> RWHERE
Â Â Â Â R: 'A,

Borrows self and passes that borrow into the pipe function. Read more
Â§

FN PIPE_REF_MUT<'A, R>(&'A MUT SELF, FUNC: IMPL FNONCE [https://doc.rust-lang.org/1.67.0/core/ops/function/trait.FnOnce.html](&'A
MUT [https://doc.rust-lang.org/1.67.0/std/primitive.reference.html]SELF) -> R) -> RWHERE
Â Â Â Â R: 'A,

Mutably borrows self and passes that borrow into the pipe function. Read more
Â§

FN PIPE_BORROW<'A, B, R>(&'A SELF, FUNC: IMPL FNONCE [https://doc.rust-lang.org/1.67.0/core/ops/function/trait.FnOnce.html](&'A
[https://doc.rust-lang.org/1.67.0/std/primitive.reference.html]B) -> R) -> RWHERE
Â Â Â Â SELF: BORROW [https://doc.rust-lang.org/1.67.0/core/borrow/trait.Borrow.html]<B>,
Â Â Â Â B: 'A + ?SIZED [https://doc.rust-lang.org/1.67.0/core/marker/trait.Sized.html],
Â Â Â Â R: 'A,

Borrows self, then passes self.borrow() into the pipe function. Read more
Â§

FN PIPE_BORROW_MUT<'A, B, R>(
Â Â Â Â &'A MUT SELF,
Â Â Â Â FUNC: IMPL FNONCE [https://doc.rust-lang.org/1.67.0/core/ops/function/trait.FnOnce.html](&'A MUT
[https://doc.rust-lang.org/1.67.0/std/primitive.reference.html]B) -> R
) -> RWHERE
Â Â Â Â SELF: BORROWMUT [https://doc.rust-lang.org/1.67.0/core/borrow/trait.BorrowMut.html]<B>,
Â Â Â Â B: 'A + ?SIZED [https://doc.rust-lang.org/1.67.0/core/marker/trait.Sized.html],
Â Â Â Â R: 'A,

Mutably borrows self, then passes self.borrow_mut() into the pipe function. Read more
Â§

FN PIPE_AS_REF<'A, U, R>(&'A SELF, FUNC: IMPL FNONCE [https://doc.rust-lang.org/1.67.0/core/ops/function/trait.FnOnce.html](&'A
[https://doc.rust-lang.org/1.67.0/std/primitive.reference.html]U) -> R) -> RWHERE
Â Â Â Â SELF: ASREF [https://doc.rust-lang.org/1.67.0/core/convert/trait.AsRef.html]<U>,
Â Â Â Â U: 'A + ?SIZED [https://doc.rust-lang.org/1.67.0/core/marker/trait.Sized.html],
Â Â Â Â R: 'A,

Borrows self, then passes self.as_ref() into the pipe function.
Â§

FN PIPE_AS_MUT<'A, U, R>(&'A MUT SELF, FUNC: IMPL FNONCE
[https://doc.rust-lang.org/1.67.0/core/ops/function/trait.FnOnce.html](&'A MUT
[https://doc.rust-lang.org/1.67.0/std/primitive.reference.html]U) -> R) -> RWHERE
Â Â Â Â SELF: ASMUT [https://doc.rust-lang.org/1.67.0/core/convert/trait.AsMut.html]<U>,
Â Â Â Â U: 'A + ?SIZED [https://doc.rust-lang.org/1.67.0/core/marker/trait.Sized.html],
Â Â Â Â R: 'A,

Mutably borrows self, then passes self.as_mut() into the pipe function. Read more
Â§

FN PIPE_DEREF<'A, T, R>(&'A SELF, FUNC: IMPL FNONCE [https://doc.rust-lang.org/1.67.0/core/ops/function/trait.FnOnce.html](&'A
[https://doc.rust-lang.org/1.67.0/std/primitive.reference.html]T) -> R) -> RWHERE
Â Â Â Â SELF: DEREF [https://doc.rust-lang.org/1.67.0/core/ops/deref/trait.Deref.html]<TARGET = T>,
Â Â Â Â T: 'A + ?SIZED [https://doc.rust-lang.org/1.67.0/core/marker/trait.Sized.html],
Â Â Â Â R: 'A,

Borrows self, then passes self.deref() into the pipe function.
Â§

FN PIPE_DEREF_MUT<'A, T, R>(&'A MUT SELF, FUNC: IMPL FNONCE
[https://doc.rust-lang.org/1.67.0/core/ops/function/trait.FnOnce.html](&'A MUT
[https://doc.rust-lang.org/1.67.0/std/primitive.reference.html]T) -> R) -> RWHERE
Â Â Â Â SELF: DEREFMUT [https://doc.rust-lang.org/1.67.0/core/ops/deref/trait.DerefMut.html]<TARGET = T> + DEREF
[https://doc.rust-lang.org/1.67.0/core/ops/deref/trait.Deref.html],
Â Â Â Â T: 'A + ?SIZED [https://doc.rust-lang.org/1.67.0/core/marker/trait.Sized.html],
Â Â Â Â R: 'A,

Mutably borrows self, then passes self.deref_mut() into the pipe function. Read more
source [https://docs.rs/typenum/1.16.0/src/typenum/type_operators.rs.html#34]Â§


IMPL<T> SAME [https://docs.rs/typenum/1.16.0/typenum/type_operators/trait.Same.html]<T> FOR T

Â§

TYPE OUTPUT [https://docs.rs/typenum/1.16.0/typenum/type_operators/trait.Same.html#associatedtype.Output] = T

Should always be Self
source [https://docs.rs/erased-serde/0.3.25/src/erased_serde/ser.rs.html#238]Â§


IMPL<T> SERIALIZE [https://docs.rs/erased-serde/0.3.25/erased_serde/ser/trait.Serialize.html] FOR TWHERE
Â Â Â Â T: SERIALIZE [https://docs.rs/serde/1.0.163/serde/ser/trait.Serialize.html] + ?SIZED
[https://doc.rust-lang.org/1.67.0/core/marker/trait.Sized.html],

source [https://docs.rs/erased-serde/0.3.25/src/erased_serde/ser.rs.html#242]Â§

FN ERASED_SERIALIZE [https://docs.rs/erased-serde/0.3.25/erased_serde/ser/trait.Serialize.html#tymethod.erased_serialize](&SELF,
SERIALIZER: &MUT DYN SERIALIZER [https://docs.rs/erased-serde/0.3.25/erased_serde/ser/trait.Serializer.html]) -> RESULT
[https://doc.rust-lang.org/1.67.0/core/result/enum.Result.html]<OK, ERROR
[https://docs.rs/erased-serde/0.3.25/erased_serde/error/struct.Error.html]>

Â§


IMPL<T> TAP FOR T

Â§

FN TAP(SELF, FUNC: IMPL FNONCE [https://doc.rust-lang.org/1.67.0/core/ops/function/trait.FnOnce.html](&
[https://doc.rust-lang.org/1.67.0/std/primitive.reference.html]SELF)) -> SELF

Immutable access to a value. Read more
Â§

FN TAP_MUT(SELF, FUNC: IMPL FNONCE [https://doc.rust-lang.org/1.67.0/core/ops/function/trait.FnOnce.html](&MUT
[https://doc.rust-lang.org/1.67.0/std/primitive.reference.html]SELF)) -> SELF

Mutable access to a value. Read more
Â§

FN TAP_BORROW<B>(SELF, FUNC: IMPL FNONCE [https://doc.rust-lang.org/1.67.0/core/ops/function/trait.FnOnce.html](&
[https://doc.rust-lang.org/1.67.0/std/primitive.reference.html]B)) -> SELFWHERE
Â Â Â Â SELF: BORROW [https://doc.rust-lang.org/1.67.0/core/borrow/trait.Borrow.html]<B>,
Â Â Â Â B: ?SIZED [https://doc.rust-lang.org/1.67.0/core/marker/trait.Sized.html],

Immutable access to the Borrow<B> of a value. Read more
Â§

FN TAP_BORROW_MUT<B>(SELF, FUNC: IMPL FNONCE [https://doc.rust-lang.org/1.67.0/core/ops/function/trait.FnOnce.html](&MUT
[https://doc.rust-lang.org/1.67.0/std/primitive.reference.html]B)) -> SELFWHERE
Â Â Â Â SELF: BORROWMUT [https://doc.rust-lang.org/1.67.0/core/borrow/trait.BorrowMut.html]<B>,
Â Â Â Â B: ?SIZED [https://doc.rust-lang.org/1.67.0/core/marker/trait.Sized.html],

Mutable access to the BorrowMut<B> of a value. Read more
Â§

FN TAP_REF<R>(SELF, FUNC: IMPL FNONCE [https://doc.rust-lang.org/1.67.0/core/ops/function/trait.FnOnce.html](&
[https://doc.rust-lang.org/1.67.0/std/primitive.reference.html]R)) -> SELFWHERE
Â Â Â Â SELF: ASREF [https://doc.rust-lang.org/1.67.0/core/convert/trait.AsRef.html]<R>,
Â Â Â Â R: ?SIZED [https://doc.rust-lang.org/1.67.0/core/marker/trait.Sized.html],

Immutable access to the AsRef<R> view of a value. Read more
Â§

FN TAP_REF_MUT<R>(SELF, FUNC: IMPL FNONCE [https://doc.rust-lang.org/1.67.0/core/ops/function/trait.FnOnce.html](&MUT
[https://doc.rust-lang.org/1.67.0/std/primitive.reference.html]R)) -> SELFWHERE
Â Â Â Â SELF: ASMUT [https://doc.rust-lang.org/1.67.0/core/convert/trait.AsMut.html]<R>,
Â Â Â Â R: ?SIZED [https://doc.rust-lang.org/1.67.0/core/marker/trait.Sized.html],

Mutable access to the AsMut<R> view of a value. Read more
Â§

FN TAP_DEREF<T>(SELF, FUNC: IMPL FNONCE [https://doc.rust-lang.org/1.67.0/core/ops/function/trait.FnOnce.html](&
[https://doc.rust-lang.org/1.67.0/std/primitive.reference.html]T)) -> SELFWHERE
Â Â Â Â SELF: DEREF [https://doc.rust-lang.org/1.67.0/core/ops/deref/trait.Deref.html]<TARGET = T>,
Â Â Â Â T: ?SIZED [https://doc.rust-lang.org/1.67.0/core/marker/trait.Sized.html],

Immutable access to the Deref::Target of a value. Read more
Â§

FN TAP_DEREF_MUT<T>(SELF, FUNC: IMPL FNONCE [https://doc.rust-lang.org/1.67.0/core/ops/function/trait.FnOnce.html](&MUT
[https://doc.rust-lang.org/1.67.0/std/primitive.reference.html]T)) -> SELFWHERE
Â Â Â Â SELF: DEREFMUT [https://doc.rust-lang.org/1.67.0/core/ops/deref/trait.DerefMut.html]<TARGET = T> + DEREF
[https://doc.rust-lang.org/1.67.0/core/ops/deref/trait.Deref.html],
Â Â Â Â T: ?SIZED [https://doc.rust-lang.org/1.67.0/core/marker/trait.Sized.html],

Mutable access to the Deref::Target of a value. Read more
Â§

FN TAP_DBG(SELF, FUNC: IMPL FNONCE [https://doc.rust-lang.org/1.67.0/core/ops/function/trait.FnOnce.html](&
[https://doc.rust-lang.org/1.67.0/std/primitive.reference.html]SELF)) -> SELF

Calls .tap() only in debug builds, and is erased in release builds.
Â§

FN TAP_MUT_DBG(SELF, FUNC: IMPL FNONCE [https://doc.rust-lang.org/1.67.0/core/ops/function/trait.FnOnce.html](&MUT
[https://doc.rust-lang.org/1.67.0/std/primitive.reference.html]SELF)) -> SELF

Calls .tap_mut() only in debug builds, and is erased in release builds. Read more
Â§

FN TAP_BORROW_DBG<B>(SELF, FUNC: IMPL FNONCE [https://doc.rust-lang.org/1.67.0/core/ops/function/trait.FnOnce.html](&
[https://doc.rust-lang.org/1.67.0/std/primitive.reference.html]B)) -> SELFWHERE
Â Â Â Â SELF: BORROW [https://doc.rust-lang.org/1.67.0/core/borrow/trait.Borrow.html]<B>,
Â Â Â Â B: ?SIZED [https://doc.rust-lang.org/1.67.0/core/marker/trait.Sized.html],

Calls .tap_borrow() only in debug builds, and is erased in release builds. Read more
Â§

FN TAP_BORROW_MUT_DBG<B>(SELF, FUNC: IMPL FNONCE [https://doc.rust-lang.org/1.67.0/core/ops/function/trait.FnOnce.html](&MUT
[https://doc.rust-lang.org/1.67.0/std/primitive.reference.html]B)) -> SELFWHERE
Â Â Â Â SELF: BORROWMUT [https://doc.rust-lang.org/1.67.0/core/borrow/trait.BorrowMut.html]<B>,
Â Â Â Â B: ?SIZED [https://doc.rust-lang.org/1.67.0/core/marker/trait.Sized.html],

Calls .tap_borrow_mut() only in debug builds, and is erased in release builds. Read more
Â§

FN TAP_REF_DBG<R>(SELF, FUNC: IMPL FNONCE [https://doc.rust-lang.org/1.67.0/core/ops/function/trait.FnOnce.html](&
[https://doc.rust-lang.org/1.67.0/std/primitive.reference.html]R)) -> SELFWHERE
Â Â Â Â SELF: ASREF [https://doc.rust-lang.org/1.67.0/core/convert/trait.AsRef.html]<R>,
Â Â Â Â R: ?SIZED [https://doc.rust-lang.org/1.67.0/core/marker/trait.Sized.html],

Calls .tap_ref() only in debug builds, and is erased in release builds. Read more
Â§

FN TAP_REF_MUT_DBG<R>(SELF, FUNC: IMPL FNONCE [https://doc.rust-lang.org/1.67.0/core/ops/function/trait.FnOnce.html](&MUT
[https://doc.rust-lang.org/1.67.0/std/primitive.reference.html]R)) -> SELFWHERE
Â Â Â Â SELF: ASMUT [https://doc.rust-lang.org/1.67.0/core/convert/trait.AsMut.html]<R>,
Â Â Â Â R: ?SIZED [https://doc.rust-lang.org/1.67.0/core/marker/trait.Sized.html],

Calls .tap_ref_mut() only in debug builds, and is erased in release builds. Read more
Â§

FN TAP_DEREF_DBG<T>(SELF, FUNC: IMPL FNONCE [https://doc.rust-lang.org/1.67.0/core/ops/function/trait.FnOnce.html](&
[https://doc.rust-lang.org/1.67.0/std/primitive.reference.html]T)) -> SELFWHERE
Â Â Â Â SELF: DEREF [https://doc.rust-lang.org/1.67.0/core/ops/deref/trait.Deref.html]<TARGET = T>,
Â Â Â Â T: ?SIZED [https://doc.rust-lang.org/1.67.0/core/marker/trait.Sized.html],

Calls .tap_deref() only in debug builds, and is erased in release builds. Read more
Â§

FN TAP_DEREF_MUT_DBG<T>(SELF, FUNC: IMPL FNONCE [https://doc.rust-lang.org/1.67.0/core/ops/function/trait.FnOnce.html](&MUT
[https://doc.rust-lang.org/1.67.0/std/primitive.reference.html]T)) -> SELFWHERE
Â Â Â Â SELF: DEREFMUT [https://doc.rust-lang.org/1.67.0/core/ops/deref/trait.DerefMut.html]<TARGET = T> + DEREF
[https://doc.rust-lang.org/1.67.0/core/ops/deref/trait.Deref.html],
Â Â Â Â T: ?SIZED [https://doc.rust-lang.org/1.67.0/core/marker/trait.Sized.html],

Calls .tap_deref_mut() only in debug builds, and is erased in release builds. Read more
source [https://doc.rust-lang.org/1.67.0/src/alloc/borrow.rs.html#82]Â§


IMPL<T> TOOWNED [https://doc.rust-lang.org/1.67.0/alloc/borrow/trait.ToOwned.html] FOR TWHERE
Â Â Â Â T: CLONE [https://doc.rust-lang.org/1.67.0/core/clone/trait.Clone.html],

Â§

TYPE OWNED [https://doc.rust-lang.org/1.67.0/alloc/borrow/trait.ToOwned.html#associatedtype.Owned] = T

The resulting type after obtaining ownership.
source [https://doc.rust-lang.org/1.67.0/src/alloc/borrow.rs.html#87]Â§

FN TO_OWNED [https://doc.rust-lang.org/1.67.0/alloc/borrow/trait.ToOwned.html#tymethod.to_owned](&SELF) -> T

Creates owned data from borrowed data, usually by cloning. Read more
[https://doc.rust-lang.org/1.67.0/alloc/borrow/trait.ToOwned.html#tymethod.to_owned]
source [https://doc.rust-lang.org/1.67.0/src/alloc/borrow.rs.html#91]Â§

FN CLONE_INTO [https://doc.rust-lang.org/1.67.0/alloc/borrow/trait.ToOwned.html#method.clone_into](&SELF, TARGET: &MUT
[https://doc.rust-lang.org/1.67.0/std/primitive.reference.html]T)

Uses borrowed data to replace owned data, usually by cloning. Read more
[https://doc.rust-lang.org/1.67.0/alloc/borrow/trait.ToOwned.html#method.clone_into]
Â§


IMPL<T> TRYCONV FOR T

Â§

FN TRY_CONV<T>(SELF) -> RESULT [https://doc.rust-lang.org/1.67.0/core/result/enum.Result.html]<T, SELF::ERROR
[https://doc.rust-lang.org/1.67.0/core/convert/trait.TryInto.html#associatedtype.Error]>WHERE
Â Â Â Â SELF: TRYINTO [https://doc.rust-lang.org/1.67.0/core/convert/trait.TryInto.html]<T>,

Attempts to convert self into T using TryInto<T>. Read more
source [https://doc.rust-lang.org/1.67.0/src/core/convert/mod.rs.html#775]Â§


IMPL<T, U> TRYFROM [https://doc.rust-lang.org/1.67.0/core/convert/trait.TryFrom.html]<U> FOR TWHERE
Â Â Â Â U: INTO [https://doc.rust-lang.org/1.67.0/core/convert/trait.Into.html]<T>,

Â§

TYPE ERROR [https://doc.rust-lang.org/1.67.0/core/convert/trait.TryFrom.html#associatedtype.Error] = INFALLIBLE
[https://doc.rust-lang.org/1.67.0/core/convert/enum.Infallible.html]

The type returned in the event of a conversion error.
const: unstable [https://github.com/rust-lang/rust/issues/88674] Â· source
[https://doc.rust-lang.org/1.67.0/src/core/convert/mod.rs.html#781]Â§

FN TRY_FROM [https://doc.rust-lang.org/1.67.0/core/convert/trait.TryFrom.html#tymethod.try_from](VALUE: U) -> RESULT
[https://doc.rust-lang.org/1.67.0/core/result/enum.Result.html]<T, <T AS TRYFROM
[https://doc.rust-lang.org/1.67.0/core/convert/trait.TryFrom.html]<U>>::ERROR
[https://doc.rust-lang.org/1.67.0/core/convert/trait.TryFrom.html#associatedtype.Error]>

Performs the conversion.
source [https://doc.rust-lang.org/1.67.0/src/core/convert/mod.rs.html#760]Â§


IMPL<T, U> TRYINTO [https://doc.rust-lang.org/1.67.0/core/convert/trait.TryInto.html]<U> FOR TWHERE
Â Â Â Â U: TRYFROM [https://doc.rust-lang.org/1.67.0/core/convert/trait.TryFrom.html]<T>,

Â§

TYPE ERROR [https://doc.rust-lang.org/1.67.0/core/convert/trait.TryInto.html#associatedtype.Error] = <U AS TRYFROM
[https://doc.rust-lang.org/1.67.0/core/convert/trait.TryFrom.html]<T>>::ERROR
[https://doc.rust-lang.org/1.67.0/core/convert/trait.TryFrom.html#associatedtype.Error]

The type returned in the event of a conversion error.
const: unstable [https://github.com/rust-lang/rust/issues/88674] Â· source
[https://doc.rust-lang.org/1.67.0/src/core/convert/mod.rs.html#766]Â§

FN TRY_INTO [https://doc.rust-lang.org/1.67.0/core/convert/trait.TryInto.html#tymethod.try_into](SELF) -> RESULT
[https://doc.rust-lang.org/1.67.0/core/result/enum.Result.html]<U, <U AS TRYFROM
[https://doc.rust-lang.org/1.67.0/core/convert/trait.TryFrom.html]<T>>::ERROR
[https://doc.rust-lang.org/1.67.0/core/convert/trait.TryFrom.html#associatedtype.Error]>

Performs the conversion.
Â§


IMPL<V, T> VZIP<V> FOR TWHERE
Â Â Â Â V: MULTILANE<T>,

Â§

FN VZIP(SELF) -> V

source [https://docs.rs/tracing/0.1.37/src/tracing/instrument.rs.html#334]Â§


IMPL<T> WITHSUBSCRIBER [https://docs.rs/tracing/0.1.37/tracing/instrument/trait.WithSubscriber.html] FOR T

source [https://docs.rs/tracing/0.1.37/src/tracing/instrument.rs.html#169-171]Â§

FN WITH_SUBSCRIBER [https://docs.rs/tracing/0.1.37/tracing/instrument/trait.WithSubscriber.html#method.with_subscriber]<S>(SELF,
SUBSCRIBER: S) -> WITHDISPATCH [https://docs.rs/tracing/0.1.37/tracing/instrument/struct.WithDispatch.html]<SELF>WHERE
Â Â Â Â S: INTO [https://doc.rust-lang.org/1.67.0/core/convert/trait.Into.html]<DISPATCH
[https://docs.rs/tracing-core/0.1.22/tracing_core/dispatcher/struct.Dispatch.html]>,

Attaches the provided Subscriber [https://docs.rs/tracing-core/0.1.22/tracing_core/subscriber/trait.Subscriber.html] to this type,
returning a WithDispatch [https://docs.rs/tracing/0.1.37/tracing/instrument/struct.WithDispatch.html] wrapper. Read more
[https://docs.rs/tracing/0.1.37/tracing/instrument/trait.WithSubscriber.html#method.with_subscriber]
source [https://docs.rs/tracing/0.1.37/src/tracing/instrument.rs.html#221]Â§

FN WITH_CURRENT_SUBSCRIBER
[https://docs.rs/tracing/0.1.37/tracing/instrument/trait.WithSubscriber.html#method.with_current_subscriber](SELF) -> WITHDISPATCH
[https://docs.rs/tracing/0.1.37/tracing/instrument/struct.WithDispatch.html]<SELF>

Attaches the current default [https://docs.rs/tracing/0.1.37/tracing/dispatcher/index.html#setting-the-default-subscriber]
Subscriber [https://docs.rs/tracing-core/0.1.22/tracing_core/subscriber/trait.Subscriber.html] to this type, returning a
WithDispatch [https://docs.rs/tracing/0.1.37/tracing/instrument/struct.WithDispatch.html] wrapper. Read more
[https://docs.rs/tracing/0.1.37/tracing/instrument/trait.WithSubscriber.html#method.with_current_subscriber]
source [https://docs.rs/serde/1.0.163/src/serde/de/mod.rs.html#604]Â§


IMPL<T> DESERIALIZEOWNED [https://docs.rs/serde/1.0.163/serde/de/trait.DeserializeOwned.html] FOR TWHERE
Â Â Â Â T: FOR<'DE> DESERIALIZE [https://docs.rs/serde/1.0.163/serde/de/trait.Deserialize.html]<'DE>,

source [../../src/fedimint_core/task.rs.html#568]Â§


IMPL<T> MAYBESEND [../task/trait.MaybeSend.html] FOR TWHERE
Â Â Â Â T: SEND [https://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html],

Â§


IMPL<T> MAYBESEND FOR TWHERE
Â Â Â Â T: SEND [https://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html],

source [../../src/fedimint_core/task.rs.html#582]Â§


IMPL<T> MAYBESYNC [../task/trait.MaybeSync.html] FOR TWHERE
Â Â Â Â T: SYNC [https://doc.rust-lang.org/1.67.0/core/marker/trait.Sync.html],

