â˜°
logo [../static.files/rust-logo-151179464ae7ed46.svg]
../fedimint_core/index.html




logo [../static.files/rust-logo-151179464ae7ed46.svg]
../fedimint_core/index.html


CRATE FEDIMINT_CORE

 * Macros
 * Structs
 * Enums
 * Constants
 * Traits
 * Functions
 * Type Definitions
 * Attribute Macros
 * Derive Macros

? [../help.html]
Change settings [../static.files/wheel-5ec35bf9ca753509.svg]../settings.html


LIST OF ALL ITEMS


STRUCTS

 * Amount [struct.Amount.html]
 * Feerate [struct.Feerate.html]
 * OutPoint [struct.OutPoint.html]
 * PeerId [struct.PeerId.html]
 * TransactionId [struct.TransactionId.html]
 * admin_client::ConfigGenConnectionsRequest [admin_client/struct.ConfigGenConnectionsRequest.html]
 * admin_client::ConfigGenParamsConsensus [admin_client/struct.ConfigGenParamsConsensus.html]
 * admin_client::ConfigGenParamsRequest [admin_client/struct.ConfigGenParamsRequest.html]
 * admin_client::ConfigGenParamsResponse [admin_client/struct.ConfigGenParamsResponse.html]
 * admin_client::PeerServerParams [admin_client/struct.PeerServerParams.html]
 * admin_client::WsAdminClient [admin_client/struct.WsAdminClient.html]
 * api::ApiVersionSet [api/struct.ApiVersionSet.html]
 * api::ClientConfigDownloadToken [api/struct.ClientConfigDownloadToken.html]
 * api::ConsensusContribution [api/struct.ConsensusContribution.html]
 * api::ConsensusStatus [api/struct.ConsensusStatus.html]
 * api::DynGlobalApi [api/struct.DynGlobalApi.html]
 * api::DynModuleApi [api/struct.DynModuleApi.html]
 * api::FederationError [api/struct.FederationError.html]
 * api::PeerConsensusStatus [api/struct.PeerConsensusStatus.html]
 * api::PeerResponse [api/struct.PeerResponse.html]
 * api::StatusResponse [api/struct.StatusResponse.html]
 * api::WsClientConnectInfo [api/struct.WsClientConnectInfo.html]
 * api::WsFederationApi [api/struct.WsFederationApi.html]
 * backup::ClientBackupKey [backup/struct.ClientBackupKey.html]
 * backup::ClientBackupKeyPrefix [backup/struct.ClientBackupKeyPrefix.html]
 * backup::ClientBackupSnapshot [backup/struct.ClientBackupSnapshot.html]
 * bitcoinrpc::BitcoinRpcConfig [bitcoinrpc/struct.BitcoinRpcConfig.html]
 * cancellable::Cancelled [cancellable/struct.Cancelled.html]
 * config::ClientConfig [config/struct.ClientConfig.html]
 * config::ClientConfigResponse [config/struct.ClientConfigResponse.html]
 * config::ClientModuleConfig [config/struct.ClientModuleConfig.html]
 * config::ConfigGenModuleParams [config/struct.ConfigGenModuleParams.html]
 * config::EmptyGenParams [config/struct.EmptyGenParams.html]
 * config::FederationId [config/struct.FederationId.html]
 * config::JsonWithKind [config/struct.JsonWithKind.html]
 * config::ModuleGenRegistry [config/struct.ModuleGenRegistry.html]
 * config::PeerUrl [config/struct.PeerUrl.html]
 * config::ServerModuleConfig [config/struct.ServerModuleConfig.html]
 * config::ServerModuleConsensusConfig [config/struct.ServerModuleConsensusConfig.html]
 * core::Decoder [core/struct.Decoder.html]
 * core::DecoderBuilder [core/struct.DecoderBuilder.html]
 * core::DynClientConfig [core/struct.DynClientConfig.html]
 * core::DynInput [core/struct.DynInput.html]
 * core::DynModuleConsensusItem [core/struct.DynModuleConsensusItem.html]
 * core::DynOutput [core/struct.DynOutput.html]
 * core::DynOutputOutcome [core/struct.DynOutputOutcome.html]
 * core::KeyPair [core/struct.KeyPair.html]
 * core::ModuleKind [core/struct.ModuleKind.html]
 * core::backup::BackupRequest [core/backup/struct.BackupRequest.html]
 * core::backup::SignedBackupRequest [core/backup/struct.SignedBackupRequest.html]
 * core::client::DynClientModule [core/client/struct.DynClientModule.html]
 * core::server::DynServerModule [core/server/struct.DynServerModule.html]
 * core::server::DynVerificationCache [core/server/struct.DynVerificationCache.html]
 * db::CommitTracker [db/struct.CommitTracker.html]
 * db::Database [db/struct.Database.html]
 * db::DatabaseTransaction [db/struct.DatabaseTransaction.html]
 * db::DatabaseVersion [db/struct.DatabaseVersion.html]
 * db::DatabaseVersionKey [db/struct.DatabaseVersionKey.html]
 * db::DbKeyPrefixIter [db/struct.DbKeyPrefixIter.html]
 * db::ModuleDatabaseTransaction [db/struct.ModuleDatabaseTransaction.html]
 * db::SingleUseDatabaseTransaction [db/struct.SingleUseDatabaseTransaction.html]
 * db::mem_impl::DatabaseDeleteOperation [db/mem_impl/struct.DatabaseDeleteOperation.html]
 * db::mem_impl::DatabaseInsertOperation [db/mem_impl/struct.DatabaseInsertOperation.html]
 * db::mem_impl::DummyError [db/mem_impl/struct.DummyError.html]
 * db::mem_impl::MemDatabase [db/mem_impl/struct.MemDatabase.html]
 * db::mem_impl::MemTransaction [db/mem_impl/struct.MemTransaction.html]
 * db::notifications::Notifications [db/notifications/struct.Notifications.html]
 * db::notifications::NotifyQueue [db/notifications/struct.NotifyQueue.html]
 * db::notifications::NotifyingTransaction [db/notifications/struct.NotifyingTransaction.html]
 * encoding::BigSize [encoding/struct.BigSize.html]
 * encoding::CountWrite [encoding/struct.CountWrite.html]
 * encoding::DecodeError [encoding/struct.DecodeError.html]
 * epoch::ConsensusUpgrade [epoch/struct.ConsensusUpgrade.html]
 * epoch::EpochOutcome [epoch/struct.EpochOutcome.html]
 * epoch::SerdeSignature [epoch/struct.SerdeSignature.html]
 * epoch::SerdeSignatureShare [epoch/struct.SerdeSignatureShare.html]
 * epoch::SignedEpochOutcome [epoch/struct.SignedEpochOutcome.html]
 * epoch::UnzipConsensusItem [epoch/struct.UnzipConsensusItem.html]
 * fmt_utils::AbbreviateDebug [fmt_utils/struct.AbbreviateDebug.html]
 * fmt_utils::AbbreviateHexBytes [fmt_utils/struct.AbbreviateHexBytes.html]
 * fmt_utils::AbbreviateJson [fmt_utils/struct.AbbreviateJson.html]
 * module::ApiAuth [module/struct.ApiAuth.html]
 * module::ApiEndpoint [module/struct.ApiEndpoint.html]
 * module::ApiEndpointContext [module/struct.ApiEndpointContext.html]
 * module::ApiError [module/struct.ApiError.html]
 * module::ApiRequest [module/struct.ApiRequest.html]
 * module::DynCommonModuleGen [module/struct.DynCommonModuleGen.html]
 * module::DynServerModuleGen [module/struct.DynServerModuleGen.html]
 * module::InputMeta [module/struct.InputMeta.html]
 * module::PeerHandle [module/struct.PeerHandle.html]
 * module::SerdeModuleEncoding [module/struct.SerdeModuleEncoding.html]
 * module::TransactionItemAmount [module/struct.TransactionItemAmount.html]
 * module::audit::Audit [module/audit/struct.Audit.html]
 * module::audit::AuditItem [module/audit/struct.AuditItem.html]
 * module::registry::ModuleRegistry [module/registry/struct.ModuleRegistry.html]
 * module::version::ApiVersion [module/version/struct.ApiVersion.html]
 * module::version::CoreConsensusVersion [module/version/struct.CoreConsensusVersion.html]
 * module::version::ModuleConsensusVersion [module/version/struct.ModuleConsensusVersion.html]
 * module::version::MultiApiVersion [module/version/struct.MultiApiVersion.html]
 * module::version::MultiApiVersionIter [module/version/struct.MultiApiVersionIter.html]
 * module::version::SupportedApiVersionsSummary [module/version/struct.SupportedApiVersionsSummary.html]
 * module::version::SupportedCoreApiVersions [module/version/struct.SupportedCoreApiVersions.html]
 * module::version::SupportedModuleApiVersions [module/version/struct.SupportedModuleApiVersions.html]
 * net::peers::MuxPeerConnections [net/peers/struct.MuxPeerConnections.html]
 * net::peers::PeerConnections [net/peers/struct.PeerConnections.html]
 * query::AllOrDeadline [query/struct.AllOrDeadline.html]
 * query::CurrentConsensus [query/struct.CurrentConsensus.html]
 * query::DiscoverApiVersionSet [query/struct.DiscoverApiVersionSet.html]
 * query::EventuallyConsistent [query/struct.EventuallyConsistent.html]
 * query::TrustAllPeers [query/struct.TrustAllPeers.html]
 * query::UnionResponses [query/struct.UnionResponses.html]
 * query::UnionResponsesSingle [query/struct.UnionResponsesSingle.html]
 * query::VerifiableResponse [query/struct.VerifiableResponse.html]
 * task::Elapsed [task/struct.Elapsed.html]
 * task::RwLock [task/struct.RwLock.html]
 * task::RwLockReadGuard [task/struct.RwLockReadGuard.html]
 * task::RwLockWriteGuard [task/struct.RwLockWriteGuard.html]
 * task::TaskGroup [task/struct.TaskGroup.html]
 * task::TaskHandle [task/struct.TaskHandle.html]
 * task::TaskPanicGuard [task/struct.TaskPanicGuard.html]
 * tiered::InvalidAmountTierError [tiered/struct.InvalidAmountTierError.html]
 * tiered::Tiered [tiered/struct.Tiered.html]
 * tiered_multi::TieredMulti [tiered_multi/struct.TieredMulti.html]
 * tiered_multi::TieredMultiZip [tiered_multi/struct.TieredMultiZip.html]
 * tiered_multi::TieredSummary [tiered_multi/struct.TieredSummary.html]
 * timing::TimeReporter [timing/struct.TimeReporter.html]
 * transaction::Transaction [transaction/struct.Transaction.html]
 * txoproof::TxOutProof [txoproof/struct.TxOutProof.html]
 * util::SanitizedUrl [util/struct.SanitizedUrl.html]
 * util::broadcaststream::BroadcastStream [util/broadcaststream/struct.BroadcastStream.html]


ENUMS

 * ConsensusDecision [enum.ConsensusDecision.html]
 * CoreError [enum.CoreError.html]
 * ParseAmountError [enum.ParseAmountError.html]
 * api::MemberError [api/enum.MemberError.html]
 * api::OutputOutcomeError [api/enum.OutputOutcomeError.html]
 * api::PeerConnectionStatus [api/enum.PeerConnectionStatus.html]
 * api::ServerStatus [api/enum.ServerStatus.html]
 * config::DkgError [config/enum.DkgError.html]
 * config::DkgMessage [config/enum.DkgMessage.html]
 * config::DkgPeerMsg [config/enum.DkgPeerMsg.html]
 * config::SupportedDkgMessage [config/enum.SupportedDkgMessage.html]
 * core::FinalizationError [core/enum.FinalizationError.html]
 * db::AutocommitError [db/enum.AutocommitError.html]
 * db::DbKeyPrefix [db/enum.DbKeyPrefix.html]
 * db::DecodingError [db/enum.DecodingError.html]
 * db::TestDbKeyPrefix [db/enum.TestDbKeyPrefix.html]
 * db::mem_impl::DatabaseOperation [db/mem_impl/enum.DatabaseOperation.html]
 * encoding::DynRawFallback [encoding/enum.DynRawFallback.html]
 * epoch::ConsensusItem [epoch/enum.ConsensusItem.html]
 * epoch::EpochVerifyError [epoch/enum.EpochVerifyError.html]
 * module::ConsensusProposal [module/enum.ConsensusProposal.html]
 * module::ModuleError [module/enum.ModuleError.html]
 * outcome::TransactionStatus [outcome/enum.TransactionStatus.html]
 * query::QueryStep [query/enum.QueryStep.html]
 * transaction::TransactionError [transaction/enum.TransactionError.html]
 * util::broadcaststream::BroadcastStreamRecvError [util/broadcaststream/enum.BroadcastStreamRecvError.html]


TRAITS

 * BitcoinHash [trait.BitcoinHash.html]
 * NumPeers [trait.NumPeers.html]
 * api::FederationApiExt [api/trait.FederationApiExt.html]
 * api::GlobalFederationApi [api/trait.GlobalFederationApi.html]
 * api::IFederationApi [api/trait.IFederationApi.html]
 * api::IGlobalFederationApi [api/trait.IGlobalFederationApi.html]
 * api::IModuleFederationApi [api/trait.IModuleFederationApi.html]
 * api::JsonRpcClient [api/trait.JsonRpcClient.html]
 * config::DkgGroup [config/trait.DkgGroup.html]
 * config::ISupportedDkgMessage [config/trait.ISupportedDkgMessage.html]
 * config::ModuleGenParams [config/trait.ModuleGenParams.html]
 * config::SGroup [config/trait.SGroup.html]
 * config::TypedServerModuleConfig [config/trait.TypedServerModuleConfig.html]
 * config::TypedServerModuleConsensusConfig [config/trait.TypedServerModuleConsensusConfig.html]
 * core::ClientConfig [core/trait.ClientConfig.html]
 * core::IClientConfig [core/trait.IClientConfig.html]
 * core::IInput [core/trait.IInput.html]
 * core::IModuleConsensusItem [core/trait.IModuleConsensusItem.html]
 * core::IOutput [core/trait.IOutput.html]
 * core::IOutputOutcome [core/trait.IOutputOutcome.html]
 * core::Input [core/trait.Input.html]
 * core::IntoDynInstance [core/trait.IntoDynInstance.html]
 * core::ModuleConsensusItem [core/trait.ModuleConsensusItem.html]
 * core::Output [core/trait.Output.html]
 * core::OutputOutcome [core/trait.OutputOutcome.html]
 * core::client::ClientModule [core/client/trait.ClientModule.html]
 * core::client::IClientModule [core/client/trait.IClientModule.html]
 * core::server::IServerModule [core/server/trait.IServerModule.html]
 * core::server::IVerificationCache [core/server/trait.IVerificationCache.html]
 * core::server::VerificationCache [core/server/trait.VerificationCache.html]
 * db::DatabaseKey [db/trait.DatabaseKey.html]
 * db::DatabaseKeyPrefix [db/trait.DatabaseKeyPrefix.html]
 * db::DatabaseKeyWithNotify [db/trait.DatabaseKeyWithNotify.html]
 * db::DatabaseLookup [db/trait.DatabaseLookup.html]
 * db::DatabaseRecord [db/trait.DatabaseRecord.html]
 * db::DatabaseValue [db/trait.DatabaseValue.html]
 * db::IDatabase [db/trait.IDatabase.html]
 * db::IDatabaseTransaction [db/trait.IDatabaseTransaction.html]
 * db::ISingleUseDatabaseTransaction [db/trait.ISingleUseDatabaseTransaction.html]
 * encoding::Decodable [encoding/trait.Decodable.html]
 * encoding::DynEncodable [encoding/trait.DynEncodable.html]
 * encoding::Encodable [encoding/trait.Encodable.html]
 * epoch::IterUnzipConsensusItem [epoch/trait.IterUnzipConsensusItem.html]
 * fmt_utils::AbbreviatedDebug [fmt_utils/trait.AbbreviatedDebug.html]
 * module::CommonModuleGen [module/trait.CommonModuleGen.html]
 * module::ExtendsCommonModuleGen [module/trait.ExtendsCommonModuleGen.html]
 * module::IDynCommonModuleGen [module/trait.IDynCommonModuleGen.html]
 * module::IServerModuleGen [module/trait.IServerModuleGen.html]
 * module::IntoModuleError [module/trait.IntoModuleError.html]
 * module::ModuleCommon [module/trait.ModuleCommon.html]
 * module::ServerModule [module/trait.ServerModule.html]
 * module::ServerModuleGen [module/trait.ServerModuleGen.html]
 * module::TypedApiEndpoint [module/trait.TypedApiEndpoint.html]
 * net::peers::IMuxPeerConnections [net/peers/trait.IMuxPeerConnections.html]
 * net::peers::IPeerConnections [net/peers/trait.IPeerConnections.html]
 * query::QueryStrategy [query/trait.QueryStrategy.html]
 * task::MaybeSend [task/trait.MaybeSend.html]
 * task::MaybeSync [task/trait.MaybeSync.html]
 * util::NextOrPending [util/trait.NextOrPending.html]


MACROS

 * __api_endpoint [macro.__api_endpoint.html]
 * _dyn_newtype_define_inner [macro._dyn_newtype_define_inner.html]
 * _dyn_newtype_define_with_instance_id_inner [macro._dyn_newtype_define_with_instance_id_inner.html]
 * _dyn_newtype_impl_deref_mut [macro._dyn_newtype_impl_deref_mut.html]
 * async_trait_maybe_send [macro.async_trait_maybe_send.html]
 * dyn_newtype_define [macro.dyn_newtype_define.html]
 * dyn_newtype_define_with_instance_id [macro.dyn_newtype_define_with_instance_id.html]
 * dyn_newtype_impl_dyn_clone_passhthrough [macro.dyn_newtype_impl_dyn_clone_passhthrough.html]
 * dyn_newtype_impl_dyn_clone_passhthrough_with_instance_id [macro.dyn_newtype_impl_dyn_clone_passhthrough_with_instance_id.html]
 * impl_db_lookup [macro.impl_db_lookup.html]
 * impl_db_record [macro.impl_db_record.html]
 * maybe_add_send [macro.maybe_add_send.html]
 * maybe_add_send_sync [macro.maybe_add_send_sync.html]
 * module::api_endpoint [module/macro.api_endpoint.html]
 * module_dyn_newtype_impl_encode_decode [macro.module_dyn_newtype_impl_encode_decode.html]
 * module_plugin_trait_define [macro.module_plugin_trait_define.html]
 * newtype_impl_eq_passthrough_with_instance_id [macro.newtype_impl_eq_passthrough_with_instance_id.html]
 * plugin_types_trait_impl_common [macro.plugin_types_trait_impl_common.html]
 * plugin_types_trait_impl_config [macro.plugin_types_trait_impl_config.html]
 * push_db_key_items [macro.push_db_key_items.html]
 * push_db_pair_items [macro.push_db_pair_items.html]
 * push_db_pair_items_no_serde [macro.push_db_pair_items_no_serde.html]


ATTRIBUTE MACROS

 * apply [attr.apply.html]


DERIVE MACROS

 * encoding::Decodable [encoding/derive.Decodable.html]
 * encoding::Encodable [encoding/derive.Encodable.html]
 * encoding::UnzipConsensus [encoding/derive.UnzipConsensus.html]


FUNCTIONS

 * config::load_from_file [config/fn.load_from_file.html]
 * config::serde_binary_human_readable::deserialize [config/serde_binary_human_readable/fn.deserialize.html]
 * config::serde_binary_human_readable::serialize [config/serde_binary_human_readable/fn.serialize.html]
 * db::apply_migrations [db/fn.apply_migrations.html]
 * db::expect_write_conflict [db/fn.expect_write_conflict.html]
 * db::find_by_prefix_sorted_descending [db/fn.find_by_prefix_sorted_descending.html]
 * db::future_returns_shortly [db/fn.future_returns_shortly.html]
 * db::verify_commit [db/fn.verify_commit.html]
 * db::verify_find_by_prefix [db/fn.verify_find_by_prefix.html]
 * db::verify_insert_elements [db/fn.verify_insert_elements.html]
 * db::verify_module_db [db/fn.verify_module_db.html]
 * db::verify_module_prefix [db/fn.verify_module_prefix.html]
 * db::verify_phantom_entry [db/fn.verify_phantom_entry.html]
 * db::verify_prevent_dirty_reads [db/fn.verify_prevent_dirty_reads.html]
 * db::verify_prevent_nonrepeatable_reads [db/fn.verify_prevent_nonrepeatable_reads.html]
 * db::verify_read_own_writes [db/fn.verify_read_own_writes.html]
 * db::verify_remove_by_prefix [db/fn.verify_remove_by_prefix.html]
 * db::verify_remove_existing [db/fn.verify_remove_existing.html]
 * db::verify_remove_nonexisting [db/fn.verify_remove_nonexisting.html]
 * db::verify_rollback_to_savepoint [db/fn.verify_rollback_to_savepoint.html]
 * db::verify_string_prefix [db/fn.verify_string_prefix.html]
 * encoding::as_hex::deserialize [encoding/as_hex/fn.deserialize.html]
 * encoding::as_hex::serialize [encoding/as_hex/fn.serialize.html]
 * epoch::combine_sigs [epoch/fn.combine_sigs.html]
 * fmt_utils::floor_char_boundary [fmt_utils/fn.floor_char_boundary.html]
 * fmt_utils::rust_log_full_enabled [fmt_utils/fn.rust_log_full_enabled.html]
 * hex::serde::deserialize [hex/serde/fn.deserialize.html]
 * hex::serde::serialize [hex/serde/fn.serialize.html]
 * msats [fn.msats.html]
 * net::peers::fake::make_fake_peer_connection [net/peers/fake/fn.make_fake_peer_connection.html]
 * sats [fn.sats.html]
 * task::block_in_place [task/fn.block_in_place.html]
 * task::sleep [task/fn.sleep.html]
 * task::sleep_until [task/fn.sleep_until.html]
 * task::timeout [task/fn.timeout.html]
 * time::now [time/fn.now.html]
 * transaction::agg_keys [transaction/fn.agg_keys.html]
 * transaction::agg_sign [transaction/fn.agg_sign.html]
 * util::write_new [util/fn.write_new.html]
 * util::write_new_async [util/fn.write_new_async.html]
 * util::write_overwrite [util/fn.write_overwrite.html]
 * util::write_overwrite_async [util/fn.write_overwrite_async.html]


TYPE DEFINITIONS

 * api::FederationResult [api/type.FederationResult.html]
 * api::JsonRpcResult [api/type.JsonRpcResult.html]
 * api::MemberResult [api/type.MemberResult.html]
 * cancellable::Cancellable [cancellable/type.Cancellable.html]
 * config::CommonModuleGenRegistry [config/type.CommonModuleGenRegistry.html]
 * config::DkgResult [config/type.DkgResult.html]
 * config::ServerModuleGenParamsRegistry [config/type.ServerModuleGenParamsRegistry.html]
 * config::ServerModuleGenRegistry [config/type.ServerModuleGenRegistry.html]
 * core::ModuleInstanceId [core/type.ModuleInstanceId.html]
 * db::MigrationMap [db/type.MigrationMap.html]
 * db::PrefixStream [db/type.PrefixStream.html]
 * epoch::SerdeConsensusItem [epoch/type.SerdeConsensusItem.html]
 * epoch::SerdeEpochHistory [epoch/type.SerdeEpochHistory.html]
 * module::ApiRequestErased [module/type.ApiRequestErased.html]
 * module::registry::ModuleDecoderRegistry [module/registry/type.ModuleDecoderRegistry.html]
 * module::registry::ServerModuleRegistry [module/registry/type.ServerModuleRegistry.html]
 * outcome::SerdeOutputOutcome [outcome/type.SerdeOutputOutcome.html]
 * transaction::SerdeTransaction [transaction/type.SerdeTransaction.html]
 * util::BoxFuture [util/type.BoxFuture.html]
 * util::BoxStream [util/type.BoxStream.html]


CONSTANTS

 * bitcoinrpc::FM_BITCOIN_RPC_KIND [bitcoinrpc/constant.FM_BITCOIN_RPC_KIND.html]
 * bitcoinrpc::FM_BITCOIN_RPC_URL [bitcoinrpc/constant.FM_BITCOIN_RPC_URL.html]
 * config::META_FEDERATION_NAME_KEY [config/constant.META_FEDERATION_NAME_KEY.html]
 * core::LEGACY_HARDCODED_INSTANCE_ID_LN [core/constant.LEGACY_HARDCODED_INSTANCE_ID_LN.html]
 * core::LEGACY_HARDCODED_INSTANCE_ID_MINT [core/constant.LEGACY_HARDCODED_INSTANCE_ID_MINT.html]
 * core::LEGACY_HARDCODED_INSTANCE_ID_WALLET [core/constant.LEGACY_HARDCODED_INSTANCE_ID_WALLET.html]
 * core::MODULE_INSTANCE_ID_GLOBAL [core/constant.MODULE_INSTANCE_ID_GLOBAL.html]
 * db::MODULE_GLOBAL_PREFIX [db/constant.MODULE_GLOBAL_PREFIX.html]

