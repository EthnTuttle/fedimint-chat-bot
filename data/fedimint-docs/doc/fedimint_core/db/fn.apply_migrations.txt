☰
logo [../../static.files/rust-logo-151179464ae7ed46.svg]
../../fedimint_core/index.html




logo [../../static.files/rust-logo-151179464ae7ed46.svg]
../../fedimint_core/index.html


IN FEDIMINT_CORE::DB [index.html]

? [../../help.html]
Change settings [../../static.files/wheel-5ec35bf9ca753509.svg]../../settings.html


FUNCTION FEDIMINT_CORE [../index.html]::DB [index.html]::APPLY_MIGRATIONSCopy item path
[../../static.files/clipboard-7571035ce49a181d.svg]

source [../../src/fedimint_core/db/mod.rs.html#1544-1583] · [−]

pub async fn apply_migrations<'a>(
    db: &'a Databasestruct.Database.html,
    kind: Stringhttps://doc.rust-lang.org/1.67.0/alloc/string/struct.String.html,
    target_db_version: DatabaseVersionstruct.DatabaseVersion.html,
    migrations: MigrationMaptype.MigrationMap.html<'a>
) -> Resulthttps://docs.rs/anyhow/1.0.71/anyhow/type.Result.html<()https://doc.rust-lang.org/1.67.0/std/primitive.unit.html, Errorhttps://docs.rs/anyhow/1.0.71/anyhow/struct.Error.html>

Expand description

apply_migrations iterates from the on disk database version for the module up to target_db_version and executes all of the
migrations that exist in the MigrationMap. Each migration in MigrationMap updates the database to have the correct on-disk
structures that the code is expecting. The entire migration process is atomic (i.e migration from 0->1 and 1->2 happen
atomically). This function is called before the module is initialized and as long as the correct migrations are supplied in
MigrationMap, the module will be able to read and write from the database successfully.

