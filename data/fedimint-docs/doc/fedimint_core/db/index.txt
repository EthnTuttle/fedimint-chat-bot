☰
logo [../../static.files/rust-logo-151179464ae7ed46.svg]
../../fedimint_core/index.html




logo [../../static.files/rust-logo-151179464ae7ed46.svg]
../../fedimint_core/index.html


MODULE DB

 * Modules
 * Structs
 * Enums
 * Constants
 * Traits
 * Functions
 * Type Definitions

? [../../help.html]
Change settings [../../static.files/wheel-5ec35bf9ca753509.svg]../../settings.html


MODULE FEDIMINT_CORE [../index.html]::DBCopy item path [../../static.files/clipboard-7571035ce49a181d.svg]

source [../../src/fedimint_core/db/mod.rs.html#1-2502] · [−]


MODULES

mem_impl [mem_impl/index.html]
notifications [notifications/index.html]


STRUCTS

CommitTracker [struct.CommitTracker.html]
A handle to a type-erased database implementation
Database [struct.Database.html]
DatabaseTransaction [struct.DatabaseTransaction.html]
DatabaseTransaction is the parent-level database transaction that can modify the database. The owner of the DatabaseTransaction is
responsible for managing the lifetime of the DatabaseTransaction, either by committing the modifications to the database or
rolling back the transaction. From this parent-level DatabaseTransaction, a ModuleDatabaseTransaction can be created which
operates like a child transaction where the child transaction only has access to the modules database namespace.
DatabaseVersion [struct.DatabaseVersion.html]
DatabaseVersionKey [struct.DatabaseVersionKey.html]
DbKeyPrefixIter [struct.DbKeyPrefixIter.html]
An iterator over the variants of Self [struct.DbKeyPrefixIter.html]
ModuleDatabaseTransaction [struct.ModuleDatabaseTransaction.html]
ModuleDatabaseTransaction is the public wrapper structure that allows modules to modify the database. It takes a
ISingleUseDatabaseTransaction that handles the details of interacting with the database. The APIs that the modules are allowed to
interact with are a subset of DatabaseTransaction, since modules do not manage the lifetime of database transactions. Committing
to the database or rolling back a transaction is not exposed.
SingleUseDatabaseTransaction [struct.SingleUseDatabaseTransaction.html]
Struct that implements ISingleUseDatabaseTransaction and can be wrapped easier in other structs since it does not consumed self by
move.


ENUMS

AutocommitError [enum.AutocommitError.html]
Error returned when the autocommit function fails
DbKeyPrefix [enum.DbKeyPrefix.html]
DecodingError [enum.DecodingError.html]
TestDbKeyPrefix [enum.TestDbKeyPrefix.html]


CONSTANTS

MODULE_GLOBAL_PREFIX [constant.MODULE_GLOBAL_PREFIX.html]


TRAITS

DatabaseKey [trait.DatabaseKey.html]
DatabaseKey that represents the lookup structure for retrieving key/value pairs from the database.
DatabaseKeyPrefix [trait.DatabaseKeyPrefix.html]
DatabaseKeyWithNotify [trait.DatabaseKeyWithNotify.html]
Marker trait for DatabaseKeys where NOTIFY is true
DatabaseLookup [trait.DatabaseLookup.html]
A key that can be used to query one or more DatabaseRecord Extends DatabaseKeyPrefix to prepend the key’s prefix.
DatabaseRecord [trait.DatabaseRecord.html]
A key + value pair in the database with a unique prefix Extends DatabaseKeyPrefix to prepend the key’s prefix.
DatabaseValue [trait.DatabaseValue.html]
DatabaseValue that represents the value structure of database records.
IDatabase [trait.IDatabase.html]
IDatabaseTransaction [trait.IDatabaseTransaction.html]
Fedimint requires that the database implementation implement Snapshot Isolation. Snapshot Isolation is a database isolation level
that guarantees consistent reads from the time that the snapshot was created (at transaction creation time). Transactions with
Snapshot Isolation level will only commit if there has been no write to the modified keys since the snapshot (i.e. write-write
conflicts are prevented).
ISingleUseDatabaseTransaction [trait.ISingleUseDatabaseTransaction.html]
ISingleUseDatabaseTransaction re-defines the functions from IDatabaseTransaction but does not consumed self when committing to the
database. This allows for wrapper structs to more easily borrow ISingleUseDatabaseTransaction without needing to make additional
allocations.


FUNCTIONS

apply_migrations [fn.apply_migrations.html]
apply_migrations iterates from the on disk database version for the module up to target_db_version and executes all of the
migrations that exist in the MigrationMap. Each migration in MigrationMap updates the database to have the correct on-disk
structures that the code is expecting. The entire migration process is atomic (i.e migration from 0->1 and 1->2 happen
atomically). This function is called before the module is initialized and as long as the correct migrations are supplied in
MigrationMap, the module will be able to read and write from the database successfully.
expect_write_conflict [fn.expect_write_conflict.html]
find_by_prefix_sorted_descending [fn.find_by_prefix_sorted_descending.html]
future_returns_shortly [fn.future_returns_shortly.html]
verify_commit [fn.verify_commit.html]
verify_find_by_prefix [fn.verify_find_by_prefix.html]
verify_insert_elements [fn.verify_insert_elements.html]
verify_module_db [fn.verify_module_db.html]
verify_module_prefix [fn.verify_module_prefix.html]
verify_phantom_entry [fn.verify_phantom_entry.html]
verify_prevent_dirty_reads [fn.verify_prevent_dirty_reads.html]
verify_prevent_nonrepeatable_reads [fn.verify_prevent_nonrepeatable_reads.html]
verify_read_own_writes [fn.verify_read_own_writes.html]
verify_remove_by_prefix [fn.verify_remove_by_prefix.html]
verify_remove_existing [fn.verify_remove_existing.html]
verify_remove_nonexisting [fn.verify_remove_nonexisting.html]
verify_rollback_to_savepoint [fn.verify_rollback_to_savepoint.html]
verify_string_prefix [fn.verify_string_prefix.html]


TYPE DEFINITIONS

MigrationMap [type.MigrationMap.html]
MigrationMap is a BTreeMap that maps DatabaseVersions to async functions. These functions are expected to “migrate” the database
from the keyed DatabaseVersion to DatabaseVersion + 1.
PrefixStream [type.PrefixStream.html]
