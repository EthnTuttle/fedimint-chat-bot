☰
logo [../../../static.files/rust-logo-151179464ae7ed46.svg]
../../../fedimint_core/index.html




logo [../../../static.files/rust-logo-151179464ae7ed46.svg]
../../../fedimint_core/index.html


MODULE VERSION

 * Structs

? [../../../help.html]
Change settings [../../../static.files/wheel-5ec35bf9ca753509.svg]../../../settings.html


MODULE FEDIMINT_CORE [../../index.html]::MODULE [../index.html]::VERSIONCopy item path
[../../../static.files/clipboard-7571035ce49a181d.svg]

source [../../../src/fedimint_core/module/version.rs.html#1-373] · [−]
Expand description

Fedimint consensus and API versioning.


INTRODUCTION

Fedimint federations are expected to last and serve over time diverse set of clients running on various devices and platforms with
different versions of the client software. To ensure broad interoperability core Fedimint logic and modules use consensus and API
versiong scheme.


DEFINIONS

 * Fedimint component - either a core Fedimint logic or one of the modules


CONSENSUS VERSIONS

By definition all instances of a given component on every peer inside a Federation must be running with the same consensus version
at the same time.

Each component in the Federation can only ever be in one consensus version. The set of all consensus versions of each component is
a part of consensus config that is identical for all peers.

The code implementing given component can however support multiple consensus versions at the same time, making it possible to use
the same code for diverse set of Federations created at different times. The consensus version to run with is passed to the code
during initialization.

The client side components need track consensus versions of each Federation they use and be able to handle the currently running
version of it.

CoreConsensusVersion [struct.CoreConsensusVersion.html] and ModuleConsensusVersion [struct.ModuleConsensusVersion.html] are used
for consensus versioning.


API VERSIONS

Unlike consensus version which has to be single and identical accross Federation, both server and client side components can
advertise simultanous support for multiple API versions. This is the main mechanism to ensure interoperability in the face of hard
to control and predict software changes across all the involved software.

Each peer in the Federation and each client can update the Fedimint software at their own pace without cordinating API changes.

Each client is expected to survey Federation API support and discover the API version to use for each component.

Notably the current consensus version of a software component is considered a prefix to the API version it advertises.

Software components implementations are expected to provide a good multi-API support to ensure clients and Federations can always
find common API versions to use.

ApiVersion [struct.ApiVersion.html] and MultiApiVersion [struct.MultiApiVersion.html] is used for API versioning.


STRUCTS

ApiVersion [struct.ApiVersion.html]
Api version supported by a core server or a client/server module at a given ModuleConsensusVersion
[struct.ModuleConsensusVersion.html].
CoreConsensusVersion [struct.CoreConsensusVersion.html]
Consensus version of a core server
ModuleConsensusVersion [struct.ModuleConsensusVersion.html]
Consensus version of a specific module instance
MultiApiVersion [struct.MultiApiVersion.html]
Multiple, disjoint, minimum required or maximum supported, ApiVersion [struct.ApiVersion.html]s.
MultiApiVersionIter [struct.MultiApiVersionIter.html]
SupportedApiVersionsSummary [struct.SupportedApiVersionsSummary.html]
SupportedCoreApiVersions [struct.SupportedCoreApiVersions.html]
SupportedModuleApiVersions [struct.SupportedModuleApiVersions.html]
