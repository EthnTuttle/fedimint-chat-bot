☰
logo [../../static.files/rust-logo-151179464ae7ed46.svg]
../../fedimint_core/index.html




logo [../../static.files/rust-logo-151179464ae7ed46.svg]
../../fedimint_core/index.html


IDYNCOMMONMODULEGEN


REQUIRED METHODS

 * decoder
 * module_kind
 * to_dyn_common


TRAIT IMPLEMENTATIONS

 * AsRef<dyn IDynCommonModuleGen + Send + Sync + 'static>
 * AsRef<dyn IDynCommonModuleGen + Send + Sync + 'static>


IMPLEMENTORS


IN FEDIMINT_CORE::MODULE [index.html]

? [../../help.html]
Change settings [../../static.files/wheel-5ec35bf9ca753509.svg]../../settings.html


TRAIT FEDIMINT_CORE [../index.html]::MODULE [index.html]::IDYNCOMMONMODULEGENCopy item path
[../../static.files/clipboard-7571035ce49a181d.svg]

source [../../src/fedimint_core/module/mod.rs.html#407-413] · [−]

pub trait IDynCommonModuleGen: Debughttps://doc.rust-lang.org/1.67.0/core/fmt/trait.Debug.html {
    fn decoder(&self) -> Decoder../core/struct.Decoder.html;
    fn module_kind(&self) -> ModuleKind../core/struct.ModuleKind.html;
    fn to_dyn_common(&self) -> DynCommonModuleGenstruct.DynCommonModuleGen.html;
}

Expand description

Operations common to Server and Client side module gen dyn newtypes

Due to conflict of impl Trait for T for both ServerModuleGen and ClientModuleGen, we can’t really have a ICommonModuleGen, so to
unify them in ModuleGenRegistry we move the common functionality to be an interface over their dyn newtype wrappers. A bit weird,
but works.


REQUIRED METHODS§

source [../../src/fedimint_core/module/mod.rs.html#408]

FN DECODER(&SELF) -> DECODER [../core/struct.Decoder.html]

source [../../src/fedimint_core/module/mod.rs.html#410]

FN MODULE_KIND(&SELF) -> MODULEKIND [../core/struct.ModuleKind.html]

source [../../src/fedimint_core/module/mod.rs.html#412]

FN TO_DYN_COMMON(&SELF) -> DYNCOMMONMODULEGEN [struct.DynCommonModuleGen.html]


TRAIT IMPLEMENTATIONS§

source [../../src/fedimint_core/module/mod.rs.html#500-504]§


IMPL ASREF [https://doc.rust-lang.org/1.67.0/core/convert/trait.AsRef.html]<DYN IDYNCOMMONMODULEGEN
[trait.IDynCommonModuleGen.html] + SEND [https://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html] + SYNC
[https://doc.rust-lang.org/1.67.0/core/marker/trait.Sync.html] + 'STATIC> FOR DYNCOMMONMODULEGEN [struct.DynCommonModuleGen.html]

source [../../src/fedimint_core/module/mod.rs.html#501-503]§

FN AS_REF [https://doc.rust-lang.org/1.67.0/core/convert/trait.AsRef.html#tymethod.as_ref](&SELF) -> &(DYN IDYNCOMMONMODULEGEN
[trait.IDynCommonModuleGen.html] + SEND [https://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html] + SYNC
[https://doc.rust-lang.org/1.67.0/core/marker/trait.Sync.html] + 'STATIC)

Converts this type into a shared reference of the (usually inferred) input type.
source [../../src/fedimint_core/module/mod.rs.html#517-521]§


IMPL ASREF [https://doc.rust-lang.org/1.67.0/core/convert/trait.AsRef.html]<DYN IDYNCOMMONMODULEGEN
[trait.IDynCommonModuleGen.html] + SEND [https://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html] + SYNC
[https://doc.rust-lang.org/1.67.0/core/marker/trait.Sync.html] + 'STATIC> FOR DYNSERVERMODULEGEN [struct.DynServerModuleGen.html]

source [../../src/fedimint_core/module/mod.rs.html#518-520]§

FN AS_REF [https://doc.rust-lang.org/1.67.0/core/convert/trait.AsRef.html#tymethod.as_ref](&SELF) -> &(DYN IDYNCOMMONMODULEGEN
[trait.IDynCommonModuleGen.html] + SEND [https://doc.rust-lang.org/1.67.0/core/marker/trait.Send.html] + SYNC
[https://doc.rust-lang.org/1.67.0/core/marker/trait.Sync.html] + 'STATIC)

Converts this type into a shared reference of the (usually inferred) input type.


IMPLEMENTORS§

source [../../src/fedimint_core/module/mod.rs.html#419-434]§


IMPL<T> IDYNCOMMONMODULEGEN [trait.IDynCommonModuleGen.html] FOR TWHERE
    T: EXTENDSCOMMONMODULEGEN [trait.ExtendsCommonModuleGen.html],

